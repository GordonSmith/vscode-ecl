// Generated from ./KELParser.g4 by ANTLR 4.9.1
// jshint ignore: start
import antlr4 from 'antlr4';
import KELParserListener from './KELParserListener.js';
import KELParserVisitor from './KELParserVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003m\u04ea\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0003\u0002\u0007\u0002\u00c8\n\u0002\f\u0002\u000e\u0002\u00cb",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u00d0\n",
    "\u0002\f\u0002\u000e\u0002\u00d3\u000b\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u00da\n\u0002\u0003",
    "\u0002\u0003\u0002\u0005\u0002\u00de\n\u0002\u0007\u0002\u00e0\n\u0002",
    "\f\u0002\u000e\u0002\u00e3\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0003\u0003\u0003\u0005\u0003\u00e9\n\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u00f5\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0107\n\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0007\u0006\u0110\n\u0006\f\u0006\u000e\u0006\u0113\u000b\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0005\u0007\u011d\n\u0007\u0003\u0007\u0005\u0007",
    "\u0120\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u0126\n\b\f\b",
    "\u000e\b\u0129\u000b\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0007\n\u0131\n\n\f\n\u000e\n\u0134\u000b\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0007\n\u013a\n\n\f\n\u000e\n\u013d\u000b\n\u0003\n\u0003",
    "\n\u0005\n\u0141\n\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0006\r\u014f",
    "\n\r\r\r\u000e\r\u0150\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u015b\n\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0007\u000f\u0164\n\u000f\f\u000f\u000e\u000f\u0167\u000b",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0007\u0010\u0170\n\u0010\f\u0010\u000e\u0010\u0173",
    "\u000b\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0005\u0011",
    "\u0179\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u0180\n\u0012\f\u0012\u000e\u0012\u0183\u000b\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0014\u0005\u0014",
    "\u018a\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u018e\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0193\n\u0014\u0003\u0014",
    "\u0005\u0014\u0196\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u019a",
    "\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u019f\n\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u01a3\n\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u01ab",
    "\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u01b4\n\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u01b9\n\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016",
    "\u01c2\n\u0016\f\u0016\u000e\u0016\u01c5\u000b\u0016\u0005\u0016\u01c7",
    "\n\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0007\u0017\u01cf\n\u0017\f\u0017\u000e\u0017\u01d2\u000b",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0007\u0018\u01db\n\u0018\f\u0018\u000e\u0018\u01de",
    "\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u01e6\n\u0018\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01ed\n\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u01f3\n\u0019\f\u0019",
    "\u000e\u0019\u01f6\u000b\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01fa",
    "\n\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0007\u001b\u0202\n\u001b\f\u001b\u000e\u001b\u0205\u000b",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0006\u001c\u020d\n\u001c\r\u001c\u000e\u001c\u020e\u0003\u001c",
    "\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0006\u001d\u0219\n\u001d\r\u001d\u000e\u001d\u021a\u0003",
    "\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0227\n\u001e",
    "\u0006\u001e\u0229\n\u001e\r\u001e\u000e\u001e\u022a\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0007 \u0235",
    "\n \f \u000e \u0238\u000b \u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0005!\u0240\n!\u0006!\u0242\n!\r!\u000e!\u0243\u0003!\u0003!\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0005#\u024e\n#\u0003#\u0003",
    "#\u0003#\u0005#\u0253\n#\u0007#\u0255\n#\f#\u000e#\u0258\u000b#\u0003",
    "#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0262\n$\f",
    "$\u000e$\u0265\u000b$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0007$\u026f\n$\f$\u000e$\u0272\u000b$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u027d\n$\f$\u000e",
    "$\u0280\u000b$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u028f\n$\f$\u000e$\u0292",
    "\u000b$\u0003$\u0003$\u0005$\u0296\n$\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0005%\u029e\n%\u0003%\u0005%\u02a1\n%\u0003%\u0003%\u0003",
    "%\u0003%\u0005%\u02a7\n%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0005%\u02b0\n%\u0003&\u0003&\u0003&\u0007&\u02b5\n&\f&\u000e&\u02b8",
    "\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0007(\u02c4\n(\f(\u000e(\u02c7\u000b(\u0003(\u0005",
    "(\u02ca\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005",
    "*\u02e8\n*\u0003+\u0003+\u0003+\u0007+\u02ed\n+\f+\u000e+\u02f0\u000b",
    "+\u0003+\u0005+\u02f3\n+\u0003,\u0003,\u0003,\u0007,\u02f8\n,\f,\u000e",
    ",\u02fb\u000b,\u0003-\u0003-\u0003-\u0003-\u0003.\u0003.\u0003.\u0007",
    ".\u0304\n.\f.\u000e.\u0307\u000b.\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0007/\u030e\n/\f/\u000e/\u0311\u000b/\u0003/\u0003/\u00030\u0003",
    "0\u00030\u00030\u00050\u0319\n0\u00030\u00030\u00030\u00031\u00031\u0003",
    "1\u00031\u00071\u0322\n1\f1\u000e1\u0325\u000b1\u00031\u00031\u0003",
    "2\u00052\u032a\n2\u00032\u00032\u00033\u00033\u00053\u0330\n3\u0003",
    "4\u00034\u00034\u00034\u00054\u0336\n4\u00034\u00034\u00034\u00034\u0007",
    "4\u033c\n4\f4\u000e4\u033f\u000b4\u00034\u00074\u0342\n4\f4\u000e4\u0345",
    "\u000b4\u00034\u00054\u0348\n4\u00034\u00054\u034b\n4\u00035\u00035",
    "\u00035\u00035\u00075\u0351\n5\f5\u000e5\u0354\u000b5\u00035\u00035",
    "\u00036\u00056\u0359\n6\u00036\u00036\u00056\u035d\n6\u00036\u00036",
    "\u00036\u00036\u00036\u00036\u00036\u00036\u00056\u0367\n6\u00037\u0003",
    "7\u00037\u00037\u00057\u036d\n7\u00038\u00038\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00059\u0377\n9\u00039\u00039\u0003:\u0003:\u0003:\u0003",
    ";\u0003;\u0003;\u0003;\u0005;\u0382\n;\u0003;\u0003;\u0003;\u0007;\u0387",
    "\n;\f;\u000e;\u038a\u000b;\u0003;\u0005;\u038d\n;\u0003;\u0005;\u0390",
    "\n;\u0003<\u0003<\u0007<\u0394\n<\f<\u000e<\u0397\u000b<\u0003<\u0003",
    "<\u0003=\u0003=\u0007=\u039d\n=\f=\u000e=\u03a0\u000b=\u0003=\u0003",
    "=\u0003>\u0003>\u0003?\u0003?\u0003?\u0007?\u03a9\n?\f?\u000e?\u03ac",
    "\u000b?\u0003@\u0003@\u0003@\u0007@\u03b1\n@\f@\u000e@\u03b4\u000b@",
    "\u0003A\u0003A\u0003A\u0005A\u03b9\nA\u0003B\u0003B\u0003B\u0005B\u03be",
    "\nB\u0003C\u0003C\u0003C\u0007C\u03c3\nC\fC\u000eC\u03c6\u000bC\u0003",
    "D\u0003D\u0003D\u0007D\u03cb\nD\fD\u000eD\u03ce\u000bD\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0005E\u03d5\nE\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0007E\u03e4",
    "\nE\fE\u000eE\u03e7\u000bE\u0003E\u0003E\u0005E\u03eb\nE\u0003F\u0003",
    "F\u0006F\u03ef\nF\rF\u000eF\u03f0\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0005F\u03f8\nF\u0003G\u0003G\u0003G\u0005G\u03fd\nG\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0007H\u0405\nH\fH\u000eH\u0408\u000b",
    "H\u0003H\u0003H\u0005H\u040c\nH\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0007H\u0414\nH\fH\u000eH\u0417\u000bH\u0003H\u0003H\u0005H\u041b",
    "\nH\u0003I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0005J\u0427\nJ\u0003J\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003",
    "M\u0007M\u043b\nM\fM\u000eM\u043e\u000bM\u0003M\u0003M\u0003N\u0003",
    "N\u0003N\u0003N\u0005N\u0446\nN\u0003O\u0003O\u0003O\u0003O\u0003O\u0007",
    "O\u044d\nO\fO\u000eO\u0450\u000bO\u0003O\u0003O\u0003P\u0003P\u0005",
    "P\u0456\nP\u0003P\u0003P\u0003P\u0003P\u0007P\u045c\nP\fP\u000eP\u045f",
    "\u000bP\u0003P\u0005P\u0462\nP\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0005R\u046e\nR\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0005S\u0476\nS\u0003S\u0003S\u0005S\u047a\nS\u0003",
    "T\u0003T\u0003U\u0003U\u0003U\u0007U\u0481\nU\fU\u000eU\u0484\u000b",
    "U\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u048b\nV\u0003W\u0003W\u0003",
    "W\u0003W\u0005W\u0491\nW\u0003X\u0003X\u0003Y\u0003Y\u0005Y\u0497\n",
    "Y\u0003Z\u0003Z\u0003Z\u0005Z\u049c\nZ\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0005[\u04a4\n[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0003\\\u0005\\\u04af\n\\\u0003]\u0003]\u0003]\u0003",
    "]\u0003]\u0003]\u0005]\u04b7\n]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0005^\u04bf\n^\u0003^\u0003^\u0003^\u0003_\u0006_\u04c5\n_\r_\u000e",
    "_\u04c6\u0003`\u0003`\u0007`\u04cb\n`\f`\u000e`\u04ce\u000b`\u0003`",
    "\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u04d6\n`\u0003a\u0003a\u0003",
    "a\u0007a\u04db\na\fa\u000ea\u04de\u000ba\u0003b\u0003b\u0005b\u04e2",
    "\nb\u0003c\u0003c\u0003c\u0003c\u0005c\u04e8\nc\u0003c\u0002\u0002d",
    "\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c",
    "\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082",
    "\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a",
    "\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2",
    "\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u0002\f\u0003",
    "\u000223\u0003\u00029:\u0004\u0002;;TT\u0004\u000299AA\u0003\u0002L",
    "L\u0003\u0002NN\u0006\u0002\u0005\u0005\u0007\b\u001d\u001f!$\u0004",
    "\u0002\u0016\u0016\u0018\u0018\u0006\u0002\u0011\u0011\u0017\u0017\u0019",
    "\u0019**\u0003\u0002\u0003\u0004\u0002\u054b\u0002\u00c9\u0003\u0002",
    "\u0002\u0002\u0004\u00e8\u0003\u0002\u0002\u0002\u0006\u00f4\u0003\u0002",
    "\u0002\u0002\b\u0106\u0003\u0002\u0002\u0002\n\u0108\u0003\u0002\u0002",
    "\u0002\f\u0116\u0003\u0002\u0002\u0002\u000e\u0121\u0003\u0002\u0002",
    "\u0002\u0010\u012a\u0003\u0002\u0002\u0002\u0012\u0140\u0003\u0002\u0002",
    "\u0002\u0014\u0142\u0003\u0002\u0002\u0002\u0016\u0144\u0003\u0002\u0002",
    "\u0002\u0018\u0148\u0003\u0002\u0002\u0002\u001a\u015a\u0003\u0002\u0002",
    "\u0002\u001c\u015c\u0003\u0002\u0002\u0002\u001e\u0168\u0003\u0002\u0002",
    "\u0002 \u0178\u0003\u0002\u0002\u0002\"\u017a\u0003\u0002\u0002\u0002",
    "$\u0186\u0003\u0002\u0002\u0002&\u01b3\u0003\u0002\u0002\u0002(\u01b5",
    "\u0003\u0002\u0002\u0002*\u01bc\u0003\u0002\u0002\u0002,\u01ca\u0003",
    "\u0002\u0002\u0002.\u01e5\u0003\u0002\u0002\u00020\u01f9\u0003\u0002",
    "\u0002\u00022\u01fb\u0003\u0002\u0002\u00024\u01fd\u0003\u0002\u0002",
    "\u00026\u0206\u0003\u0002\u0002\u00028\u0212\u0003\u0002\u0002\u0002",
    ":\u021e\u0003\u0002\u0002\u0002<\u022e\u0003\u0002\u0002\u0002>\u0230",
    "\u0003\u0002\u0002\u0002@\u0239\u0003\u0002\u0002\u0002B\u0247\u0003",
    "\u0002\u0002\u0002D\u0249\u0003\u0002\u0002\u0002F\u0295\u0003\u0002",
    "\u0002\u0002H\u02af\u0003\u0002\u0002\u0002J\u02b1\u0003\u0002\u0002",
    "\u0002L\u02b9\u0003\u0002\u0002\u0002N\u02c9\u0003\u0002\u0002\u0002",
    "P\u02cb\u0003\u0002\u0002\u0002R\u02e7\u0003\u0002\u0002\u0002T\u02f2",
    "\u0003\u0002\u0002\u0002V\u02f4\u0003\u0002\u0002\u0002X\u02fc\u0003",
    "\u0002\u0002\u0002Z\u0300\u0003\u0002\u0002\u0002\\\u0308\u0003\u0002",
    "\u0002\u0002^\u0314\u0003\u0002\u0002\u0002`\u031d\u0003\u0002\u0002",
    "\u0002b\u0329\u0003\u0002\u0002\u0002d\u032f\u0003\u0002\u0002\u0002",
    "f\u0331\u0003\u0002\u0002\u0002h\u034c\u0003\u0002\u0002\u0002j\u0366",
    "\u0003\u0002\u0002\u0002l\u036c\u0003\u0002\u0002\u0002n\u036e\u0003",
    "\u0002\u0002\u0002p\u0370\u0003\u0002\u0002\u0002r\u037a\u0003\u0002",
    "\u0002\u0002t\u037d\u0003\u0002\u0002\u0002v\u0391\u0003\u0002\u0002",
    "\u0002x\u039a\u0003\u0002\u0002\u0002z\u03a3\u0003\u0002\u0002\u0002",
    "|\u03a5\u0003\u0002\u0002\u0002~\u03ad\u0003\u0002\u0002\u0002\u0080",
    "\u03b8\u0003\u0002\u0002\u0002\u0082\u03ba\u0003\u0002\u0002\u0002\u0084",
    "\u03bf\u0003\u0002\u0002\u0002\u0086\u03c7\u0003\u0002\u0002\u0002\u0088",
    "\u03ea\u0003\u0002\u0002\u0002\u008a\u03f7\u0003\u0002\u0002\u0002\u008c",
    "\u03fc\u0003\u0002\u0002\u0002\u008e\u041a\u0003\u0002\u0002\u0002\u0090",
    "\u041c\u0003\u0002\u0002\u0002\u0092\u0420\u0003\u0002\u0002\u0002\u0094",
    "\u042d\u0003\u0002\u0002\u0002\u0096\u0433\u0003\u0002\u0002\u0002\u0098",
    "\u0436\u0003\u0002\u0002\u0002\u009a\u0445\u0003\u0002\u0002\u0002\u009c",
    "\u0447\u0003\u0002\u0002\u0002\u009e\u0461\u0003\u0002\u0002\u0002\u00a0",
    "\u0463\u0003\u0002\u0002\u0002\u00a2\u046d\u0003\u0002\u0002\u0002\u00a4",
    "\u0479\u0003\u0002\u0002\u0002\u00a6\u047b\u0003\u0002\u0002\u0002\u00a8",
    "\u047d\u0003\u0002\u0002\u0002\u00aa\u048a\u0003\u0002\u0002\u0002\u00ac",
    "\u0490\u0003\u0002\u0002\u0002\u00ae\u0492\u0003\u0002\u0002\u0002\u00b0",
    "\u0496\u0003\u0002\u0002\u0002\u00b2\u049b\u0003\u0002\u0002\u0002\u00b4",
    "\u04a3\u0003\u0002\u0002\u0002\u00b6\u04ae\u0003\u0002\u0002\u0002\u00b8",
    "\u04b6\u0003\u0002\u0002\u0002\u00ba\u04b8\u0003\u0002\u0002\u0002\u00bc",
    "\u04c4\u0003\u0002\u0002\u0002\u00be\u04d5\u0003\u0002\u0002\u0002\u00c0",
    "\u04d7\u0003\u0002\u0002\u0002\u00c2\u04e1\u0003\u0002\u0002\u0002\u00c4",
    "\u04e7\u0003\u0002\u0002\u0002\u00c6\u00c8\u0005\b\u0005\u0002\u00c7",
    "\u00c6\u0003\u0002\u0002\u0002\u00c8\u00cb\u0003\u0002\u0002\u0002\u00c9",
    "\u00c7\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca",
    "\u00d1\u0003\u0002\u0002\u0002\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cc",
    "\u00cd\u0005\u0004\u0003\u0002\u00cd\u00ce\u0007\u000b\u0002\u0002\u00ce",
    "\u00d0\u0003\u0002\u0002\u0002\u00cf\u00cc\u0003\u0002\u0002\u0002\u00d0",
    "\u00d3\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d1",
    "\u00d2\u0003\u0002\u0002\u0002\u00d2\u00e1\u0003\u0002\u0002\u0002\u00d3",
    "\u00d1\u0003\u0002\u0002\u0002\u00d4\u00d5\u0005\u0006\u0004\u0002\u00d5",
    "\u00d6\u0007\u000b\u0002\u0002\u00d6\u00e0\u0003\u0002\u0002\u0002\u00d7",
    "\u00d9\u0005v<\u0002\u00d8\u00da\u0007\u000b\u0002\u0002\u00d9\u00d8",
    "\u0003\u0002\u0002\u0002\u00d9\u00da\u0003\u0002\u0002\u0002\u00da\u00e0",
    "\u0003\u0002\u0002\u0002\u00db\u00dd\u0005x=\u0002\u00dc\u00de\u0007",
    "\u000b\u0002\u0002\u00dd\u00dc\u0003\u0002\u0002\u0002\u00dd\u00de\u0003",
    "\u0002\u0002\u0002\u00de\u00e0\u0003\u0002\u0002\u0002\u00df\u00d4\u0003",
    "\u0002\u0002\u0002\u00df\u00d7\u0003\u0002\u0002\u0002\u00df\u00db\u0003",
    "\u0002\u0002\u0002\u00e0\u00e3\u0003\u0002\u0002\u0002\u00e1\u00df\u0003",
    "\u0002\u0002\u0002\u00e1\u00e2\u0003\u0002\u0002\u0002\u00e2\u00e4\u0003",
    "\u0002\u0002\u0002\u00e3\u00e1\u0003\u0002\u0002\u0002\u00e4\u00e5\u0007",
    "\u0002\u0002\u0003\u00e5\u0003\u0003\u0002\u0002\u0002\u00e6\u00e9\u0005",
    "\n\u0006\u0002\u00e7\u00e9\u0005\u000e\b\u0002\u00e8\u00e6\u0003\u0002",
    "\u0002\u0002\u00e8\u00e7\u0003\u0002\u0002\u0002\u00e9\u0005\u0003\u0002",
    "\u0002\u0002\u00ea\u00f5\u0005\u0012\n\u0002\u00eb\u00f5\u0005\u0014",
    "\u000b\u0002\u00ec\u00f5\u0005\u001e\u0010\u0002\u00ed\u00f5\u00054",
    "\u001b\u0002\u00ee\u00f5\u00056\u001c\u0002\u00ef\u00f5\u00058\u001d",
    "\u0002\u00f0\u00f5\u0005R*\u0002\u00f1\u00f5\u0005^0\u0002\u00f2\u00f5",
    "\u0005f4\u0002\u00f3\u00f5\u0005t;\u0002\u00f4\u00ea\u0003\u0002\u0002",
    "\u0002\u00f4\u00eb\u0003\u0002\u0002\u0002\u00f4\u00ec\u0003\u0002\u0002",
    "\u0002\u00f4\u00ed\u0003\u0002\u0002\u0002\u00f4\u00ee\u0003\u0002\u0002",
    "\u0002\u00f4\u00ef\u0003\u0002\u0002\u0002\u00f4\u00f0\u0003\u0002\u0002",
    "\u0002\u00f4\u00f1\u0003\u0002\u0002\u0002\u00f4\u00f2\u0003\u0002\u0002",
    "\u0002\u00f4\u00f3\u0003\u0002\u0002\u0002\u00f5\u0007\u0003\u0002\u0002",
    "\u0002\u00f6\u00f7\u00070\u0002\u0002\u00f7\u00f8\u0007\u0003\u0002",
    "\u0002\u00f8\u00f9\u0007T\u0002\u0002\u00f9\u0107\u0007\u0004\u0002",
    "\u0002\u00fa\u00fb\u00070\u0002\u0002\u00fb\u00fc\u0007\u0003\u0002",
    "\u0002\u00fc\u00fd\u0007T\u0002\u0002\u00fd\u00fe\u0007\n\u0002\u0002",
    "\u00fe\u00ff\u0007Y\u0002\u0002\u00ff\u0107\u0007\u0004\u0002\u0002",
    "\u0100\u0101\u00070\u0002\u0002\u0101\u0102\u0007\u0003\u0002\u0002",
    "\u0102\u0103\u0007T\u0002\u0002\u0103\u0104\u0007\n\u0002\u0002\u0104",
    "\u0105\u0007U\u0002\u0002\u0105\u0107\u0007\u0004\u0002\u0002\u0106",
    "\u00f6\u0003\u0002\u0002\u0002\u0106\u00fa\u0003\u0002\u0002\u0002\u0106",
    "\u0100\u0003\u0002\u0002\u0002\u0107\t\u0003\u0002\u0002\u0002\u0108",
    "\u0109\u0007(\u0002\u0002\u0109\u010a\u0007T\u0002\u0002\u010a\u010b",
    "\u0007T\u0002\u0002\u010b\u010c\u0007\u0003\u0002\u0002\u010c\u0111",
    "\u0005\f\u0007\u0002\u010d\u010e\u0007\n\u0002\u0002\u010e\u0110\u0005",
    "\f\u0007\u0002\u010f\u010d\u0003\u0002\u0002\u0002\u0110\u0113\u0003",
    "\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002\u0111\u0112\u0003",
    "\u0002\u0002\u0002\u0112\u0114\u0003\u0002\u0002\u0002\u0113\u0111\u0003",
    "\u0002\u0002\u0002\u0114\u0115\u0007\u0004\u0002\u0002\u0115\u000b\u0003",
    "\u0002\u0002\u0002\u0116\u011f\u0007T\u0002\u0002\u0117\u0118\u0007",
    "\u0005\u0002\u0002\u0118\u0119\u0007)\u0002\u0002\u0119\u011a\u0007",
    "\u0003\u0002\u0002\u011a\u011c\u0007T\u0002\u0002\u011b\u011d\u0007",
    "T\u0002\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011c\u011d\u0003",
    "\u0002\u0002\u0002\u011d\u011e\u0003\u0002\u0002\u0002\u011e\u0120\u0007",
    "\u0004\u0002\u0002\u011f\u0117\u0003\u0002\u0002\u0002\u011f\u0120\u0003",
    "\u0002\u0002\u0002\u0120\r\u0003\u0002\u0002\u0002\u0121\u0122\u0007",
    "1\u0002\u0002\u0122\u0127\u0005\u0010\t\u0002\u0123\u0124\u0007\n\u0002",
    "\u0002\u0124\u0126\u0005\u0010\t\u0002\u0125\u0123\u0003\u0002\u0002",
    "\u0002\u0126\u0129\u0003\u0002\u0002\u0002\u0127\u0125\u0003\u0002\u0002",
    "\u0002\u0127\u0128\u0003\u0002\u0002\u0002\u0128\u000f\u0003\u0002\u0002",
    "\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u012a\u012b\u0007T\u0002",
    "\u0002\u012b\u0011\u0003\u0002\u0002\u0002\u012c\u012d\u00074\u0002",
    "\u0002\u012d\u0132\u0005J&\u0002\u012e\u012f\u0007\n\u0002\u0002\u012f",
    "\u0131\u0005J&\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0131\u0134",
    "\u0003\u0002\u0002\u0002\u0132\u0130\u0003\u0002\u0002\u0002\u0132\u0133",
    "\u0003\u0002\u0002\u0002\u0133\u0141\u0003\u0002\u0002\u0002\u0134\u0132",
    "\u0003\u0002\u0002\u0002\u0135\u0136\u00074\u0002\u0002\u0136\u013b",
    "\u0007T\u0002\u0002\u0137\u0138\u0007\n\u0002\u0002\u0138\u013a\u0007",
    "T\u0002\u0002\u0139\u0137\u0003\u0002\u0002\u0002\u013a\u013d\u0003",
    "\u0002\u0002\u0002\u013b\u0139\u0003\u0002\u0002\u0002\u013b\u013c\u0003",
    "\u0002\u0002\u0002\u013c\u013e\u0003\u0002\u0002\u0002\u013d\u013b\u0003",
    "\u0002\u0002\u0002\u013e\u013f\u00075\u0002\u0002\u013f\u0141\u0005",
    "J&\u0002\u0140\u012c\u0003\u0002\u0002\u0002\u0140\u0135\u0003\u0002",
    "\u0002\u0002\u0141\u0013\u0003\u0002\u0002\u0002\u0142\u0143\u0005\u0018",
    "\r\u0002\u0143\u0015\u0003\u0002\u0002\u0002\u0144\u0145\u0005\u0018",
    "\r\u0002\u0145\u0146\u0007\u000b\u0002\u0002\u0146\u0147\u0007\u0002",
    "\u0002\u0003\u0147\u0017\u0003\u0002\u0002\u0002\u0148\u0149\u00076",
    "\u0002\u0002\u0149\u014a\u0007T\u0002\u0002\u014a\u014e\u0007\u000b",
    "\u0002\u0002\u014b\u014c\u0005\u001a\u000e\u0002\u014c\u014d\u0007\u000b",
    "\u0002\u0002\u014d\u014f\u0003\u0002\u0002\u0002\u014e\u014b\u0003\u0002",
    "\u0002\u0002\u014f\u0150\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002",
    "\u0002\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002",
    "\u0002\u0002\u0152\u0153\u00077\u0002\u0002\u0153\u0019\u0003\u0002",
    "\u0002\u0002\u0154\u015b\u0005\u0012\n\u0002\u0155\u015b\u0005\u001e",
    "\u0010\u0002\u0156\u015b\u00054\u001b\u0002\u0157\u015b\u0005R*\u0002",
    "\u0158\u015b\u0005^0\u0002\u0159\u015b\u0005\u001c\u000f\u0002\u015a",
    "\u0154\u0003\u0002\u0002\u0002\u015a\u0155\u0003\u0002\u0002\u0002\u015a",
    "\u0156\u0003\u0002\u0002\u0002\u015a\u0157\u0003\u0002\u0002\u0002\u015a",
    "\u0158\u0003\u0002\u0002\u0002\u015a\u0159\u0003\u0002\u0002\u0002\u015b",
    "\u001b\u0003\u0002\u0002\u0002\u015c\u015d\u00078\u0002\u0002\u015d",
    "\u015e\u0007\f\u0002\u0002\u015e\u015f\u0007T\u0002\u0002\u015f\u0160",
    "\u0007\u001f\u0002\u0002\u0160\u0165\u0005z>\u0002\u0161\u0162\u0007",
    "\n\u0002\u0002\u0162\u0164\u0005z>\u0002\u0163\u0161\u0003\u0002\u0002",
    "\u0002\u0164\u0167\u0003\u0002\u0002\u0002\u0165\u0163\u0003\u0002\u0002",
    "\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u001d\u0003\u0002\u0002",
    "\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0168\u0169\u0007T\u0002",
    "\u0002\u0169\u016a\u0007\u001c\u0002\u0002\u016a\u016b\t\u0002\u0002",
    "\u0002\u016b\u016c\u0007\u0003\u0002\u0002\u016c\u0171\u0005 \u0011",
    "\u0002\u016d\u016e\u0007\n\u0002\u0002\u016e\u0170\u0005 \u0011\u0002",
    "\u016f\u016d\u0003\u0002\u0002\u0002\u0170\u0173\u0003\u0002\u0002\u0002",
    "\u0171\u016f\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002",
    "\u0172\u0174\u0003\u0002\u0002\u0002\u0173\u0171\u0003\u0002\u0002\u0002",
    "\u0174\u0175\u0007\u0004\u0002\u0002\u0175\u001f\u0003\u0002\u0002\u0002",
    "\u0176\u0179\u0005\"\u0012\u0002\u0177\u0179\u0005.\u0018\u0002\u0178",
    "\u0176\u0003\u0002\u0002\u0002\u0178\u0177\u0003\u0002\u0002\u0002\u0179",
    "!\u0003\u0002\u0002\u0002\u017a\u017b\u0005$\u0013\u0002\u017b\u017c",
    "\u0007\u0003\u0002\u0002\u017c\u0181\u0005&\u0014\u0002\u017d\u017e",
    "\u0007\n\u0002\u0002\u017e\u0180\u0005&\u0014\u0002\u017f\u017d\u0003",
    "\u0002\u0002\u0002\u0180\u0183\u0003\u0002\u0002\u0002\u0181\u017f\u0003",
    "\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0184\u0003",
    "\u0002\u0002\u0002\u0183\u0181\u0003\u0002\u0002\u0002\u0184\u0185\u0007",
    "\u0004\u0002\u0002\u0185#\u0003\u0002\u0002\u0002\u0186\u0187\t\u0003",
    "\u0002\u0002\u0187%\u0003\u0002\u0002\u0002\u0188\u018a\u0007T\u0002",
    "\u0002\u0189\u0188\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002",
    "\u0002\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u01b4\u0007T\u0002",
    "\u0002\u018c\u018e\u0007T\u0002\u0002\u018d\u018c\u0003\u0002\u0002",
    "\u0002\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u018f\u0003\u0002\u0002",
    "\u0002\u018f\u0190\u0007T\u0002\u0002\u0190\u0192\u0007\u0005\u0002",
    "\u0002\u0191\u0193\u0005(\u0015\u0002\u0192\u0191\u0003\u0002\u0002",
    "\u0002\u0192\u0193\u0003\u0002\u0002\u0002\u0193\u0195\u0003\u0002\u0002",
    "\u0002\u0194\u0196\u0005*\u0016\u0002\u0195\u0194\u0003\u0002\u0002",
    "\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0197\u0003\u0002\u0002",
    "\u0002\u0197\u01b4\u0005J&\u0002\u0198\u019a\u0007T\u0002\u0002\u0199",
    "\u0198\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a",
    "\u019b\u0003\u0002\u0002\u0002\u019b\u019c\u0007T\u0002\u0002\u019c",
    "\u019e\u0007\u0005\u0002\u0002\u019d\u019f\u0005(\u0015\u0002\u019e",
    "\u019d\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f",
    "\u01a0\u0003\u0002\u0002\u0002\u01a0\u01b4\u0005*\u0016\u0002\u01a1",
    "\u01a3\u0007T\u0002\u0002\u01a2\u01a1\u0003\u0002\u0002\u0002\u01a2",
    "\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0007T\u0002\u0002\u01a5\u01a6\u0007\u0005\u0002\u0002\u01a6",
    "\u01b4\u0005(\u0015\u0002\u01a7\u01aa\u0007;\u0002\u0002\u01a8\u01a9",
    "\u0007\u0005\u0002\u0002\u01a9\u01ab\u0005J&\u0002\u01aa\u01a8\u0003",
    "\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab\u01b4\u0003",
    "\u0002\u0002\u0002\u01ac\u01ad\u0007;\u0002\u0002\u01ad\u01b4\u0005",
    ",\u0017\u0002\u01ae\u01af\u0007T\u0002\u0002\u01af\u01b0\u0007T\u0002",
    "\u0002\u01b0\u01b1\u0007\u0005\u0002\u0002\u01b1\u01b2\u0007;\u0002",
    "\u0002\u01b2\u01b4\u0005,\u0017\u0002\u01b3\u0189\u0003\u0002\u0002",
    "\u0002\u01b3\u018d\u0003\u0002\u0002\u0002\u01b3\u0199\u0003\u0002\u0002",
    "\u0002\u01b3\u01a2\u0003\u0002\u0002\u0002\u01b3\u01a7\u0003\u0002\u0002",
    "\u0002\u01b3\u01ac\u0003\u0002\u0002\u0002\u01b3\u01ae\u0003\u0002\u0002",
    "\u0002\u01b4\'\u0003\u0002\u0002\u0002\u01b5\u01b6\u0007)\u0002\u0002",
    "\u01b6\u01b8\u0007\u0003\u0002\u0002\u01b7\u01b9\u0005\u00b4[\u0002",
    "\u01b8\u01b7\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002",
    "\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007\u0004\u0002\u0002",
    "\u01bb)\u0003\u0002\u0002\u0002\u01bc\u01bd\u0007<\u0002\u0002\u01bd",
    "\u01c6\u0007\u0003\u0002\u0002\u01be\u01c3\u0005\u00b4[\u0002\u01bf",
    "\u01c0\u0007\n\u0002\u0002\u01c0\u01c2\u0005\u00b4[\u0002\u01c1\u01bf",
    "\u0003\u0002\u0002\u0002\u01c2\u01c5\u0003\u0002\u0002\u0002\u01c3\u01c1",
    "\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c7",
    "\u0003\u0002\u0002\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c6\u01be",
    "\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c7\u01c8",
    "\u0003\u0002\u0002\u0002\u01c8\u01c9\u0007\u0004\u0002\u0002\u01c9+",
    "\u0003\u0002\u0002\u0002\u01ca\u01cb\u0007\u0003\u0002\u0002\u01cb\u01d0",
    "\u0005J&\u0002\u01cc\u01cd\u0007\n\u0002\u0002\u01cd\u01cf\u0005J&\u0002",
    "\u01ce\u01cc\u0003\u0002\u0002\u0002\u01cf\u01d2\u0003\u0002\u0002\u0002",
    "\u01d0\u01ce\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002",
    "\u01d1\u01d3\u0003\u0002\u0002\u0002\u01d2\u01d0\u0003\u0002\u0002\u0002",
    "\u01d3\u01d4\u0007\u0004\u0002\u0002\u01d4-\u0003\u0002\u0002\u0002",
    "\u01d5\u01d6\u0007=\u0002\u0002\u01d6\u01d7\u0007\u0003\u0002\u0002",
    "\u01d7\u01dc\u00050\u0019\u0002\u01d8\u01d9\u0007\n\u0002\u0002\u01d9",
    "\u01db\u00050\u0019\u0002\u01da\u01d8\u0003\u0002\u0002\u0002\u01db",
    "\u01de\u0003\u0002\u0002\u0002\u01dc\u01da\u0003\u0002\u0002\u0002\u01dc",
    "\u01dd\u0003\u0002\u0002\u0002\u01dd\u01df\u0003\u0002\u0002\u0002\u01de",
    "\u01dc\u0003\u0002\u0002\u0002\u01df\u01e0\u0007\u0004\u0002\u0002\u01e0",
    "\u01e6\u0003\u0002\u0002\u0002\u01e1\u01e2\u0007=\u0002\u0002\u01e2",
    "\u01e3\u0007\u0003\u0002\u0002\u01e3\u01e4\u0007\u0011\u0002\u0002\u01e4",
    "\u01e6\u0007\u0004\u0002\u0002\u01e5\u01d5\u0003\u0002\u0002\u0002\u01e5",
    "\u01e1\u0003\u0002\u0002\u0002\u01e6/\u0003\u0002\u0002\u0002\u01e7",
    "\u01fa\t\u0004\u0002\u0002\u01e8\u01e9\u0007\r\u0002\u0002\u01e9\u01ea",
    "\u0007\u0011\u0002\u0002\u01ea\u01fa\u0007\u000e\u0002\u0002\u01eb\u01ed",
    "\u0007T\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed",
    "\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002\u01ee\u01ef",
    "\u0007\r\u0002\u0002\u01ef\u01f4\u00052\u001a\u0002\u01f0\u01f1\u0007",
    "\n\u0002\u0002\u01f1\u01f3\u00052\u001a\u0002\u01f2\u01f0\u0003\u0002",
    "\u0002\u0002\u01f3\u01f6\u0003\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002",
    "\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f7\u0003\u0002",
    "\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f7\u01f8\u0007\u000e",
    "\u0002\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9\u01e7\u0003\u0002",
    "\u0002\u0002\u01f9\u01e8\u0003\u0002\u0002\u0002\u01f9\u01ec\u0003\u0002",
    "\u0002\u0002\u01fa1\u0003\u0002\u0002\u0002\u01fb\u01fc\t\u0004\u0002",
    "\u0002\u01fc3\u0003\u0002\u0002\u0002\u01fd\u01fe\u0007>\u0002\u0002",
    "\u01fe\u0203\u0005:\u001e\u0002\u01ff\u0200\u0007\n\u0002\u0002\u0200",
    "\u0202\u0005:\u001e\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0202",
    "\u0205\u0003\u0002\u0002\u0002\u0203\u0201\u0003\u0002\u0002\u0002\u0203",
    "\u0204\u0003\u0002\u0002\u0002\u02045\u0003\u0002\u0002\u0002\u0205",
    "\u0203\u0003\u0002\u0002\u0002\u0206\u0207\u0007>\u0002\u0002\u0207",
    "\u0208\u0005J&\u0002\u0208\u0209\u0007\u0003\u0002\u0002\u0209\u020c",
    "\u0007?\u0002\u0002\u020a\u020b\u0007\n\u0002\u0002\u020b\u020d\u0005",
    "z>\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002",
    "\u0002\u0002\u020e\u020c\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002",
    "\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u0211\u0007\u0004",
    "\u0002\u0002\u02117\u0003\u0002\u0002\u0002\u0212\u0213\u0007>\u0002",
    "\u0002\u0213\u0214\u0005J&\u0002\u0214\u0215\u0007\u0003\u0002\u0002",
    "\u0215\u0218\u0007@\u0002\u0002\u0216\u0217\u0007\n\u0002\u0002\u0217",
    "\u0219\u0007T\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0219",
    "\u021a\u0003\u0002\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021a",
    "\u021b\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c",
    "\u021d\u0007\u0004\u0002\u0002\u021d9\u0003\u0002\u0002\u0002\u021e",
    "\u021f\u0005J&\u0002\u021f\u0220\u0007\u0003\u0002\u0002\u0220\u0228",
    "\u0005<\u001f\u0002\u0221\u0226\u0007\n\u0002\u0002\u0222\u0227\u0005",
    "D#\u0002\u0223\u0227\u0005F$\u0002\u0224\u0227\u0005L\'\u0002\u0225",
    "\u0227\u0005P)\u0002\u0226\u0222\u0003\u0002\u0002\u0002\u0226\u0223",
    "\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002\u0002\u0226\u0225",
    "\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002\u0002\u0228\u0221",
    "\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a\u0228",
    "\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022c",
    "\u0003\u0002\u0002\u0002\u022c\u022d\u0007\u0004\u0002\u0002\u022d;",
    "\u0003\u0002\u0002\u0002\u022e\u022f\t\u0005\u0002\u0002\u022f=\u0003",
    "\u0002\u0002\u0002\u0230\u0231\u0007>\u0002\u0002\u0231\u0236\u0005",
    "@!\u0002\u0232\u0233\u0007\n\u0002\u0002\u0233\u0235\u0005@!\u0002\u0234",
    "\u0232\u0003\u0002\u0002\u0002\u0235\u0238\u0003\u0002\u0002\u0002\u0236",
    "\u0234\u0003\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237",
    "?\u0003\u0002\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0239",
    "\u023a\u0007T\u0002\u0002\u023a\u023b\u0007\u0003\u0002\u0002\u023b",
    "\u0241\u0005B\"\u0002\u023c\u023f\u0007\n\u0002\u0002\u023d\u0240\u0005",
    "F$\u0002\u023e\u0240\u0005L\'\u0002\u023f\u023d\u0003\u0002\u0002\u0002",
    "\u023f\u023e\u0003\u0002\u0002\u0002\u0240\u0242\u0003\u0002\u0002\u0002",
    "\u0241\u023c\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002",
    "\u0243\u0241\u0003\u0002\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002",
    "\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0246\u0007\u0004\u0002\u0002",
    "\u0246A\u0003\u0002\u0002\u0002\u0247\u0248\u00079\u0002\u0002\u0248",
    "C\u0003\u0002\u0002\u0002\u0249\u024a\u0007T\u0002\u0002\u024a\u024d",
    "\u0007\u0003\u0002\u0002\u024b\u024e\u0005F$\u0002\u024c\u024e\u0005",
    "L\'\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024c\u0003\u0002",
    "\u0002\u0002\u024e\u0256\u0003\u0002\u0002\u0002\u024f\u0252\u0007\n",
    "\u0002\u0002\u0250\u0253\u0005F$\u0002\u0251\u0253\u0005L\'\u0002\u0252",
    "\u0250\u0003\u0002\u0002\u0002\u0252\u0251\u0003\u0002\u0002\u0002\u0253",
    "\u0255\u0003\u0002\u0002\u0002\u0254\u024f\u0003\u0002\u0002\u0002\u0255",
    "\u0258\u0003\u0002\u0002\u0002\u0256\u0254\u0003\u0002\u0002\u0002\u0256",
    "\u0257\u0003\u0002\u0002\u0002\u0257\u0259\u0003\u0002\u0002\u0002\u0258",
    "\u0256\u0003\u0002\u0002\u0002\u0259\u025a\u0007\u0004\u0002\u0002\u025a",
    "E\u0003\u0002\u0002\u0002\u025b\u0296\u0007T\u0002\u0002\u025c\u025d",
    "\u0007T\u0002\u0002\u025d\u025e\u0007\u0003\u0002\u0002\u025e\u0263",
    "\u0005H%\u0002\u025f\u0260\u0007\n\u0002\u0002\u0260\u0262\u0005H%\u0002",
    "\u0261\u025f\u0003\u0002\u0002\u0002\u0262\u0265\u0003\u0002\u0002\u0002",
    "\u0263\u0261\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002\u0002\u0002",
    "\u0264\u0266\u0003\u0002\u0002\u0002\u0265\u0263\u0003\u0002\u0002\u0002",
    "\u0266\u0267\u0007\u0004\u0002\u0002\u0267\u0296\u0003\u0002\u0002\u0002",
    "\u0268\u0269\u0007T\u0002\u0002\u0269\u026a\u0007\u0003\u0002\u0002",
    "\u026a\u026b\u0007T\u0002\u0002\u026b\u0270\u0007\u0011\u0002\u0002",
    "\u026c\u026d\u0007\n\u0002\u0002\u026d\u026f\u0005H%\u0002\u026e\u026c",
    "\u0003\u0002\u0002\u0002\u026f\u0272\u0003\u0002\u0002\u0002\u0270\u026e",
    "\u0003\u0002\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0273",
    "\u0003\u0002\u0002\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0273\u0296",
    "\u0007\u0004\u0002\u0002\u0274\u0275\u0007T\u0002\u0002\u0275\u0276",
    "\u0007\u0003\u0002\u0002\u0276\u0277\u0007B\u0002\u0002\u0277\u0278",
    "\u0007\u0003\u0002\u0002\u0278\u0279\u0005\u00bc_\u0002\u0279\u027e",
    "\u0007\u0004\u0002\u0002\u027a\u027b\u0007\n\u0002\u0002\u027b\u027d",
    "\u0005H%\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027d\u0280\u0003",
    "\u0002\u0002\u0002\u027e\u027c\u0003\u0002\u0002\u0002\u027e\u027f\u0003",
    "\u0002\u0002\u0002\u027f\u0281\u0003\u0002\u0002\u0002\u0280\u027e\u0003",
    "\u0002\u0002\u0002\u0281\u0282\u0007\u0004\u0002\u0002\u0282\u0296\u0003",
    "\u0002\u0002\u0002\u0283\u0284\u0007T\u0002\u0002\u0284\u0285\u0007",
    "\u0003\u0002\u0002\u0285\u0286\u0007T\u0002\u0002\u0286\u0287\u0007",
    "\u0011\u0002\u0002\u0287\u0288\u0007\n\u0002\u0002\u0288\u0289\u0007",
    "B\u0002\u0002\u0289\u028a\u0007\u0003\u0002\u0002\u028a\u028b\u0005",
    "\u00bc_\u0002\u028b\u0290\u0007\u0004\u0002\u0002\u028c\u028d\u0007",
    "\n\u0002\u0002\u028d\u028f\u0005H%\u0002\u028e\u028c\u0003\u0002\u0002",
    "\u0002\u028f\u0292\u0003\u0002\u0002\u0002\u0290\u028e\u0003\u0002\u0002",
    "\u0002\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0293\u0003\u0002\u0002",
    "\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0293\u0294\u0007\u0004\u0002",
    "\u0002\u0294\u0296\u0003\u0002\u0002\u0002\u0295\u025b\u0003\u0002\u0002",
    "\u0002\u0295\u025c\u0003\u0002\u0002\u0002\u0295\u0268\u0003\u0002\u0002",
    "\u0002\u0295\u0274\u0003\u0002\u0002\u0002\u0295\u0283\u0003\u0002\u0002",
    "\u0002\u0296G\u0003\u0002\u0002\u0002\u0297\u0298\u0007;\u0002\u0002",
    "\u0298\u0299\u0007\u0005\u0002\u0002\u0299\u02b0\u0005J&\u0002\u029a",
    "\u029b\u0007T\u0002\u0002\u029b\u029d\u0007\u0005\u0002\u0002\u029c",
    "\u029e\u0005(\u0015\u0002\u029d\u029c\u0003\u0002\u0002\u0002\u029d",
    "\u029e\u0003\u0002\u0002\u0002\u029e\u02a0\u0003\u0002\u0002\u0002\u029f",
    "\u02a1\u0005*\u0016\u0002\u02a0\u029f\u0003\u0002\u0002\u0002\u02a0",
    "\u02a1\u0003\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2",
    "\u02b0\u0005J&\u0002\u02a3\u02a4\u0007T\u0002\u0002\u02a4\u02a6\u0007",
    "\u0005\u0002\u0002\u02a5\u02a7\u0005(\u0015\u0002\u02a6\u02a5\u0003",
    "\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003",
    "\u0002\u0002\u0002\u02a8\u02b0\u0005*\u0016\u0002\u02a9\u02aa\u0007",
    "T\u0002\u0002\u02aa\u02ab\u0007\u0005\u0002\u0002\u02ab\u02b0\u0005",
    "(\u0015\u0002\u02ac\u02ad\u0007T\u0002\u0002\u02ad\u02ae\u0007\u0005",
    "\u0002\u0002\u02ae\u02b0\u0005\u00b4[\u0002\u02af\u0297\u0003\u0002",
    "\u0002\u0002\u02af\u029a\u0003\u0002\u0002\u0002\u02af\u02a3\u0003\u0002",
    "\u0002\u0002\u02af\u02a9\u0003\u0002\u0002\u0002\u02af\u02ac\u0003\u0002",
    "\u0002\u0002\u02b0I\u0003\u0002\u0002\u0002\u02b1\u02b6\u0007T\u0002",
    "\u0002\u02b2\u02b3\u0007\t\u0002\u0002\u02b3\u02b5\u0007T\u0002\u0002",
    "\u02b4\u02b2\u0003\u0002\u0002\u0002\u02b5\u02b8\u0003\u0002\u0002\u0002",
    "\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002",
    "\u02b7K\u0003\u0002\u0002\u0002\u02b8\u02b6\u0003\u0002\u0002\u0002",
    "\u02b9\u02ba\u00071\u0002\u0002\u02ba\u02bb\u0007\u0003\u0002\u0002",
    "\u02bb\u02bc\u0005N(\u0002\u02bc\u02bd\u0007\u0004\u0002\u0002\u02bd",
    "M\u0003\u0002\u0002\u0002\u02be\u02ca\u0005J&\u0002\u02bf\u02c0\u0007",
    "\u000f\u0002\u0002\u02c0\u02c5\u0007T\u0002\u0002\u02c1\u02c2\u0007",
    "\n\u0002\u0002\u02c2\u02c4\u0007T\u0002\u0002\u02c3\u02c1\u0003\u0002",
    "\u0002\u0002\u02c4\u02c7\u0003\u0002\u0002\u0002\u02c5\u02c3\u0003\u0002",
    "\u0002\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c8\u0003\u0002",
    "\u0002\u0002\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c8\u02ca\u0007\u0010",
    "\u0002\u0002\u02c9\u02be\u0003\u0002\u0002\u0002\u02c9\u02bf\u0003\u0002",
    "\u0002\u0002\u02caO\u0003\u0002\u0002\u0002\u02cb\u02cc\u0007C\u0002",
    "\u0002\u02cc\u02cd\u0007\u0003\u0002\u0002\u02cd\u02ce\u0007T\u0002",
    "\u0002\u02ce\u02cf\u0007\u0004\u0002\u0002\u02cfQ\u0003\u0002\u0002",
    "\u0002\u02d0\u02d1\u0007T\u0002\u0002\u02d1\u02d2\u0007\f\u0002\u0002",
    "\u02d2\u02d3\u0005T+\u0002\u02d3\u02d4\u0007 \u0002\u0002\u02d4\u02d5",
    "\u0005V,\u0002\u02d5\u02e8\u0003\u0002\u0002\u0002\u02d6\u02d7\u0007",
    "T\u0002\u0002\u02d7\u02d8\u0007\t\u0002\u0002\u02d8\u02d9\u0007T\u0002",
    "\u0002\u02d9\u02da\u0007\f\u0002\u0002\u02da\u02db\u0005T+\u0002\u02db",
    "\u02dc\u0007 \u0002\u0002\u02dc\u02dd\u0005V,\u0002\u02dd\u02e8\u0003",
    "\u0002\u0002\u0002\u02de\u02df\u0007T\u0002\u0002\u02df\u02e0\u0007",
    "\f\u0002\u0002\u02e0\u02e8\u0005V,\u0002\u02e1\u02e2\u0007D\u0002\u0002",
    "\u02e2\u02e3\u0007\f\u0002\u0002\u02e3\u02e4\u0005T+\u0002\u02e4\u02e5",
    "\u0007 \u0002\u0002\u02e5\u02e6\u0005Z.\u0002\u02e6\u02e8\u0003\u0002",
    "\u0002\u0002\u02e7\u02d0\u0003\u0002\u0002\u0002\u02e7\u02d6\u0003\u0002",
    "\u0002\u0002\u02e7\u02de\u0003\u0002\u0002\u0002\u02e7\u02e1\u0003\u0002",
    "\u0002\u0002\u02e8S\u0003\u0002\u0002\u0002\u02e9\u02ee\u0005z>\u0002",
    "\u02ea\u02eb\u0007\n\u0002\u0002\u02eb\u02ed\u0005z>\u0002\u02ec\u02ea",
    "\u0003\u0002\u0002\u0002\u02ed\u02f0\u0003\u0002\u0002\u0002\u02ee\u02ec",
    "\u0003\u0002\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f3",
    "\u0003\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002\u02f1\u02f3",
    "\u0003\u0002\u0002\u0002\u02f2\u02e9\u0003\u0002\u0002\u0002\u02f2\u02f1",
    "\u0003\u0002\u0002\u0002\u02f3U\u0003\u0002\u0002\u0002\u02f4\u02f9",
    "\u0005X-\u0002\u02f5\u02f6\u0007\n\u0002\u0002\u02f6\u02f8\u0005X-\u0002",
    "\u02f7\u02f5\u0003\u0002\u0002\u0002\u02f8\u02fb\u0003\u0002\u0002\u0002",
    "\u02f9\u02f7\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002",
    "\u02faW\u0003\u0002\u0002\u0002\u02fb\u02f9\u0003\u0002\u0002\u0002",
    "\u02fc\u02fd\u0007T\u0002\u0002\u02fd\u02fe\u0007\u001c\u0002\u0002",
    "\u02fe\u02ff\u0005z>\u0002\u02ffY\u0003\u0002\u0002\u0002\u0300\u0305",
    "\u0005\\/\u0002\u0301\u0302\u0007\n\u0002\u0002\u0302\u0304\u0005\\",
    "/\u0002\u0303\u0301\u0003\u0002\u0002\u0002\u0304\u0307\u0003\u0002",
    "\u0002\u0002\u0305\u0303\u0003\u0002\u0002\u0002\u0305\u0306\u0003\u0002",
    "\u0002\u0002\u0306[\u0003\u0002\u0002\u0002\u0307\u0305\u0003\u0002",
    "\u0002\u0002\u0308\u0309\u0007T\u0002\u0002\u0309\u030a\u0007\u0003",
    "\u0002\u0002\u030a\u030f\u0005z>\u0002\u030b\u030c\u0007\n\u0002\u0002",
    "\u030c\u030e\u0005z>\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030e",
    "\u0311\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002\u0002\u0002\u030f",
    "\u0310\u0003\u0002\u0002\u0002\u0310\u0312\u0003\u0002\u0002\u0002\u0311",
    "\u030f\u0003\u0002\u0002\u0002\u0312\u0313\u0007\u0004\u0002\u0002\u0313",
    "]\u0003\u0002\u0002\u0002\u0314\u0315\u0007E\u0002\u0002\u0315\u0316",
    "\u0007\f\u0002\u0002\u0316\u0318\u0007T\u0002\u0002\u0317\u0319\u0005",
    "`1\u0002\u0318\u0317\u0003\u0002\u0002\u0002\u0318\u0319\u0003\u0002",
    "\u0002\u0002\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u031b\u0007\u001f",
    "\u0002\u0002\u031b\u031c\u0005d3\u0002\u031c_\u0003\u0002\u0002\u0002",
    "\u031d\u031e\u0007\u0003\u0002\u0002\u031e\u0323\u0005b2\u0002\u031f",
    "\u0320\u0007\n\u0002\u0002\u0320\u0322\u0005b2\u0002\u0321\u031f\u0003",
    "\u0002\u0002\u0002\u0322\u0325\u0003\u0002\u0002\u0002\u0323\u0321\u0003",
    "\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002\u0324\u0326\u0003",
    "\u0002\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0326\u0327\u0007",
    "\u0004\u0002\u0002\u0327a\u0003\u0002\u0002\u0002\u0328\u032a\u0005",
    "l7\u0002\u0329\u0328\u0003\u0002\u0002\u0002\u0329\u032a\u0003\u0002",
    "\u0002\u0002\u032a\u032b\u0003\u0002\u0002\u0002\u032b\u032c\u0007T",
    "\u0002\u0002\u032cc\u0003\u0002\u0002\u0002\u032d\u0330\u0005z>\u0002",
    "\u032e\u0330\u0005\u00ba^\u0002\u032f\u032d\u0003\u0002\u0002\u0002",
    "\u032f\u032e\u0003\u0002\u0002\u0002\u0330e\u0003\u0002\u0002\u0002",
    "\u0331\u0332\u0007:\u0002\u0002\u0332\u0333\u0007\f\u0002\u0002\u0333",
    "\u0335\u0007T\u0002\u0002\u0334\u0336\u0005h5\u0002\u0335\u0334\u0003",
    "\u0002\u0002\u0002\u0335\u0336\u0003\u0002\u0002\u0002\u0336\u0337\u0003",
    "\u0002\u0002\u0002\u0337\u0338\u0007\u001f\u0002\u0002\u0338\u033d\u0005",
    "z>\u0002\u0339\u033a\u0007\n\u0002\u0002\u033a\u033c\u0005z>\u0002\u033b",
    "\u0339\u0003\u0002\u0002\u0002\u033c\u033f\u0003\u0002\u0002\u0002\u033d",
    "\u033b\u0003\u0002\u0002\u0002\u033d\u033e\u0003\u0002\u0002\u0002\u033e",
    "\u0343\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002\u0002\u0002\u0340",
    "\u0342\u0005p9\u0002\u0341\u0340\u0003\u0002\u0002\u0002\u0342\u0345",
    "\u0003\u0002\u0002\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0343\u0344",
    "\u0003\u0002\u0002\u0002\u0344\u0347\u0003\u0002\u0002\u0002\u0345\u0343",
    "\u0003\u0002\u0002\u0002\u0346\u0348\u0005r:\u0002\u0347\u0346\u0003",
    "\u0002\u0002\u0002\u0347\u0348\u0003\u0002\u0002\u0002\u0348\u034a\u0003",
    "\u0002\u0002\u0002\u0349\u034b\u0005> \u0002\u034a\u0349\u0003\u0002",
    "\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034bg\u0003\u0002",
    "\u0002\u0002\u034c\u034d\u0007\u0003\u0002\u0002\u034d\u0352\u0005j",
    "6\u0002\u034e\u034f\u0007\n\u0002\u0002\u034f\u0351\u0005j6\u0002\u0350",
    "\u034e\u0003\u0002\u0002\u0002\u0351\u0354\u0003\u0002\u0002\u0002\u0352",
    "\u0350\u0003\u0002\u0002\u0002\u0352\u0353\u0003\u0002\u0002\u0002\u0353",
    "\u0355\u0003\u0002\u0002\u0002\u0354\u0352\u0003\u0002\u0002\u0002\u0355",
    "\u0356\u0007\u0004\u0002\u0002\u0356i\u0003\u0002\u0002\u0002\u0357",
    "\u0359\u0005l7\u0002\u0358\u0357\u0003\u0002\u0002\u0002\u0358\u0359",
    "\u0003\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u0367",
    "\u0007T\u0002\u0002\u035b\u035d\u0005n8\u0002\u035c\u035b\u0003\u0002",
    "\u0002\u0002\u035c\u035d\u0003\u0002\u0002\u0002\u035d\u035e\u0003\u0002",
    "\u0002\u0002\u035e\u0367\u0007P\u0002\u0002\u035f\u0360\u00071\u0002",
    "\u0002\u0360\u0367\u0007T\u0002\u0002\u0361\u0362\u0007F\u0002\u0002",
    "\u0362\u0363\u0007G\u0002\u0002\u0363\u0364\u0005J&\u0002\u0364\u0365",
    "\u0007T\u0002\u0002\u0365\u0367\u0003\u0002\u0002\u0002\u0366\u0358",
    "\u0003\u0002\u0002\u0002\u0366\u035c\u0003\u0002\u0002\u0002\u0366\u035f",
    "\u0003\u0002\u0002\u0002\u0366\u0361\u0003\u0002\u0002\u0002\u0367k",
    "\u0003\u0002\u0002\u0002\u0368\u036d\u0005n8\u0002\u0369\u036a\u0007",
    "H\u0002\u0002\u036a\u036b\u0007G\u0002\u0002\u036b\u036d\u0005n8\u0002",
    "\u036c\u0368\u0003\u0002\u0002\u0002\u036c\u0369\u0003\u0002\u0002\u0002",
    "\u036dm\u0003\u0002\u0002\u0002\u036e\u036f\t\u0004\u0002\u0002\u036f",
    "o\u0003\u0002\u0002\u0002\u0370\u0371\u0007I\u0002\u0002\u0371\u0372",
    "\u0007T\u0002\u0002\u0372\u0373\u0007\u0003\u0002\u0002\u0373\u0376",
    "\u0005z>\u0002\u0374\u0375\u0007\n\u0002\u0002\u0375\u0377\u0005z>\u0002",
    "\u0376\u0374\u0003\u0002\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002",
    "\u0377\u0378\u0003\u0002\u0002\u0002\u0378\u0379\u0007\u0004\u0002\u0002",
    "\u0379q\u0003\u0002\u0002\u0002\u037a\u037b\u0007J\u0002\u0002\u037b",
    "\u037c\u0005N(\u0002\u037cs\u0003\u0002\u0002\u0002\u037d\u037e\u0007",
    "8\u0002\u0002\u037e\u037f\u0007\f\u0002\u0002\u037f\u0381\u0007T\u0002",
    "\u0002\u0380\u0382\u0005h5\u0002\u0381\u0380\u0003\u0002\u0002\u0002",
    "\u0381\u0382\u0003\u0002\u0002\u0002\u0382\u0383\u0003\u0002\u0002\u0002",
    "\u0383\u0384\u0007\u001f\u0002\u0002\u0384\u0388\u0005z>\u0002\u0385",
    "\u0387\u0005p9\u0002\u0386\u0385\u0003\u0002\u0002\u0002\u0387\u038a",
    "\u0003\u0002\u0002\u0002\u0388\u0386\u0003\u0002\u0002\u0002\u0388\u0389",
    "\u0003\u0002\u0002\u0002\u0389\u038c\u0003\u0002\u0002\u0002\u038a\u0388",
    "\u0003\u0002\u0002\u0002\u038b\u038d\u0005r:\u0002\u038c\u038b\u0003",
    "\u0002\u0002\u0002\u038c\u038d\u0003\u0002\u0002\u0002\u038d\u038f\u0003",
    "\u0002\u0002\u0002\u038e\u0390\u0005> \u0002\u038f\u038e\u0003\u0002",
    "\u0002\u0002\u038f\u0390\u0003\u0002\u0002\u0002\u0390u\u0003\u0002",
    "\u0002\u0002\u0391\u0395\u0007K\u0002\u0002\u0392\u0394\n\u0006\u0002",
    "\u0002\u0393\u0392\u0003\u0002\u0002\u0002\u0394\u0397\u0003\u0002\u0002",
    "\u0002\u0395\u0393\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002",
    "\u0002\u0396\u0398\u0003\u0002\u0002\u0002\u0397\u0395\u0003\u0002\u0002",
    "\u0002\u0398\u0399\u0007L\u0002\u0002\u0399w\u0003\u0002\u0002\u0002",
    "\u039a\u039e\u0007M\u0002\u0002\u039b\u039d\n\u0007\u0002\u0002\u039c",
    "\u039b\u0003\u0002\u0002\u0002\u039d\u03a0\u0003\u0002\u0002\u0002\u039e",
    "\u039c\u0003\u0002\u0002\u0002\u039e\u039f\u0003\u0002\u0002\u0002\u039f",
    "\u03a1\u0003\u0002\u0002\u0002\u03a0\u039e\u0003\u0002\u0002\u0002\u03a1",
    "\u03a2\u0007N\u0002\u0002\u03a2y\u0003\u0002\u0002\u0002\u03a3\u03a4",
    "\u0005|?\u0002\u03a4{\u0003\u0002\u0002\u0002\u03a5\u03aa\u0005~@\u0002",
    "\u03a6\u03a7\u0007%\u0002\u0002\u03a7\u03a9\u0005~@\u0002\u03a8\u03a6",
    "\u0003\u0002\u0002\u0002\u03a9\u03ac\u0003\u0002\u0002\u0002\u03aa\u03a8",
    "\u0003\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab}",
    "\u0003\u0002\u0002\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002\u03ad\u03b2",
    "\u0005\u0080A\u0002\u03ae\u03af\u0007\'\u0002\u0002\u03af\u03b1\u0005",
    "\u0080A\u0002\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b1\u03b4\u0003",
    "\u0002\u0002\u0002\u03b2\u03b0\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003",
    "\u0002\u0002\u0002\u03b3\u007f\u0003\u0002\u0002\u0002\u03b4\u03b2\u0003",
    "\u0002\u0002\u0002\u03b5\u03b6\u0007&\u0002\u0002\u03b6\u03b9\u0005",
    "\u0080A\u0002\u03b7\u03b9\u0005\u0082B\u0002\u03b8\u03b5\u0003\u0002",
    "\u0002\u0002\u03b8\u03b7\u0003\u0002\u0002\u0002\u03b9\u0081\u0003\u0002",
    "\u0002\u0002\u03ba\u03bd\u0005\u0084C\u0002\u03bb\u03bc\t\b\u0002\u0002",
    "\u03bc\u03be\u0005\u0084C\u0002\u03bd\u03bb\u0003\u0002\u0002\u0002",
    "\u03bd\u03be\u0003\u0002\u0002\u0002\u03be\u0083\u0003\u0002\u0002\u0002",
    "\u03bf\u03c4\u0005\u0086D\u0002\u03c0\u03c1\t\t\u0002\u0002\u03c1\u03c3",
    "\u0005\u0086D\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c3\u03c6",
    "\u0003\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c4\u03c5",
    "\u0003\u0002\u0002\u0002\u03c5\u0085\u0003\u0002\u0002\u0002\u03c6\u03c4",
    "\u0003\u0002\u0002\u0002\u03c7\u03cc\u0005\u0088E\u0002\u03c8\u03c9",
    "\t\n\u0002\u0002\u03c9\u03cb\u0005\u0088E\u0002\u03ca\u03c8\u0003\u0002",
    "\u0002\u0002\u03cb\u03ce\u0003\u0002\u0002\u0002\u03cc\u03ca\u0003\u0002",
    "\u0002\u0002\u03cc\u03cd\u0003\u0002\u0002\u0002\u03cd\u0087\u0003\u0002",
    "\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03cf\u03d0\u0007\u0016",
    "\u0002\u0002\u03d0\u03eb\u0005\u0088E\u0002\u03d1\u03d4\u0005\u008a",
    "F\u0002\u03d2\u03d3\u0007\f\u0002\u0002\u03d3\u03d5\u0005\u00a4S\u0002",
    "\u03d4\u03d2\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002",
    "\u03d5\u03eb\u0003\u0002\u0002\u0002\u03d6\u03d7\u0005\u00a8U\u0002",
    "\u03d7\u03d8\u0007\u0012\u0002\u0002\u03d8\u03d9\u0005\u00a2R\u0002",
    "\u03d9\u03eb\u0003\u0002\u0002\u0002\u03da\u03eb\u0005\u00b2Z\u0002",
    "\u03db\u03dc\u0007\u0003\u0002\u0002\u03dc\u03dd\u0005z>\u0002\u03dd",
    "\u03de\u0007\u0004\u0002\u0002\u03de\u03eb\u0003\u0002\u0002\u0002\u03df",
    "\u03e0\u0007\u000f\u0002\u0002\u03e0\u03e5\u0005z>\u0002\u03e1\u03e2",
    "\u0007\n\u0002\u0002\u03e2\u03e4\u0005z>\u0002\u03e3\u03e1\u0003\u0002",
    "\u0002\u0002\u03e4\u03e7\u0003\u0002\u0002\u0002\u03e5\u03e3\u0003\u0002",
    "\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6\u03e8\u0003\u0002",
    "\u0002\u0002\u03e7\u03e5\u0003\u0002\u0002\u0002\u03e8\u03e9\u0007\u0010",
    "\u0002\u0002\u03e9\u03eb\u0003\u0002\u0002\u0002\u03ea\u03cf\u0003\u0002",
    "\u0002\u0002\u03ea\u03d1\u0003\u0002\u0002\u0002\u03ea\u03d6\u0003\u0002",
    "\u0002\u0002\u03ea\u03da\u0003\u0002\u0002\u0002\u03ea\u03db\u0003\u0002",
    "\u0002\u0002\u03ea\u03df\u0003\u0002\u0002\u0002\u03eb\u0089\u0003\u0002",
    "\u0002\u0002\u03ec\u03ee\u0005\u00aaV\u0002\u03ed\u03ef\u0005\u008c",
    "G\u0002\u03ee\u03ed\u0003\u0002\u0002\u0002\u03ef\u03f0\u0003\u0002",
    "\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002",
    "\u0002\u0002\u03f1\u03f8\u0003\u0002\u0002\u0002\u03f2\u03f8\u0005\u0098",
    "M\u0002\u03f3\u03f8\u0005\u009cO\u0002\u03f4\u03f8\u0005\u00aaV\u0002",
    "\u03f5\u03f8\u0007P\u0002\u0002\u03f6\u03f8\u0005\u0092J\u0002\u03f7",
    "\u03ec\u0003\u0002\u0002\u0002\u03f7\u03f2\u0003\u0002\u0002\u0002\u03f7",
    "\u03f3\u0003\u0002\u0002\u0002\u03f7\u03f4\u0003\u0002\u0002\u0002\u03f7",
    "\u03f5\u0003\u0002\u0002\u0002\u03f7\u03f6\u0003\u0002\u0002\u0002\u03f8",
    "\u008b\u0003\u0002\u0002\u0002\u03f9\u03fd\u0005\u008eH\u0002\u03fa",
    "\u03fd\u0005\u0098M\u0002\u03fb\u03fd\u0005\u00a0Q\u0002\u03fc\u03f9",
    "\u0003\u0002\u0002\u0002\u03fc\u03fa\u0003\u0002\u0002\u0002\u03fc\u03fb",
    "\u0003\u0002\u0002\u0002\u03fd\u008d\u0003\u0002\u0002\u0002\u03fe\u03ff",
    "\u0007\u0003\u0002\u0002\u03ff\u041b\u0007\u0004\u0002\u0002\u0400\u0401",
    "\u0007\u0003\u0002\u0002\u0401\u0406\u0005\u0090I\u0002\u0402\u0403",
    "\u0007\n\u0002\u0002\u0403\u0405\u0005\u0090I\u0002\u0404\u0402\u0003",
    "\u0002\u0002\u0002\u0405\u0408\u0003\u0002\u0002\u0002\u0406\u0404\u0003",
    "\u0002\u0002\u0002\u0406\u0407\u0003\u0002\u0002\u0002\u0407\u040b\u0003",
    "\u0002\u0002\u0002\u0408\u0406\u0003\u0002\u0002\u0002\u0409\u040a\u0007",
    "\n\u0002\u0002\u040a\u040c\u0005z>\u0002\u040b\u0409\u0003\u0002\u0002",
    "\u0002\u040b\u040c\u0003\u0002\u0002\u0002\u040c\u040d\u0003\u0002\u0002",
    "\u0002\u040d\u040e\u0007\u0004\u0002\u0002\u040e\u041b\u0003\u0002\u0002",
    "\u0002\u040f\u0410\u0007\u0003\u0002\u0002\u0410\u0415\u0005z>\u0002",
    "\u0411\u0412\u0007\n\u0002\u0002\u0412\u0414\u0005z>\u0002\u0413\u0411",
    "\u0003\u0002\u0002\u0002\u0414\u0417\u0003\u0002\u0002\u0002\u0415\u0413",
    "\u0003\u0002\u0002\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416\u0418",
    "\u0003\u0002\u0002\u0002\u0417\u0415\u0003\u0002\u0002\u0002\u0418\u0419",
    "\u0007\u0004\u0002\u0002\u0419\u041b\u0003\u0002\u0002\u0002\u041a\u03fe",
    "\u0003\u0002\u0002\u0002\u041a\u0400\u0003\u0002\u0002\u0002\u041a\u040f",
    "\u0003\u0002\u0002\u0002\u041b\u008f\u0003\u0002\u0002\u0002\u041c\u041d",
    "\u0005z>\u0002\u041d\u041e\u0007 \u0002\u0002\u041e\u041f\u0005z>\u0002",
    "\u041f\u0091\u0003\u0002\u0002\u0002\u0420\u0421\u0007-\u0002\u0002",
    "\u0421\u0422\u0007\u0003\u0002\u0002\u0422\u0423\u0005z>\u0002\u0423",
    "\u0424\u0007\n\u0002\u0002\u0424\u0426\u0005\u008aF\u0002\u0425\u0427",
    "\u0005\u0094K\u0002\u0426\u0425\u0003\u0002\u0002\u0002\u0426\u0427",
    "\u0003\u0002\u0002\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u0429",
    "\u0005\u0096L\u0002\u0429\u042a\u0007\n\u0002\u0002\u042a\u042b\u0005",
    "z>\u0002\u042b\u042c\u0007\u0004\u0002\u0002\u042c\u0093\u0003\u0002",
    "\u0002\u0002\u042d\u042e\u0007\u000f\u0002\u0002\u042e\u042f\u0005\u00b0",
    "Y\u0002\u042f\u0430\u0007\n\u0002\u0002\u0430\u0431\u0005\u00b0Y\u0002",
    "\u0431\u0432\u0007\u0010\u0002\u0002\u0432\u0095\u0003\u0002\u0002\u0002",
    "\u0433\u0434\u0007\u0011\u0002\u0002\u0434\u0435\u0007U\u0002\u0002",
    "\u0435\u0097\u0003\u0002\u0002\u0002\u0436\u0437\u0007\r\u0002\u0002",
    "\u0437\u043c\u0005\u009aN\u0002\u0438\u0439\u0007\n\u0002\u0002\u0439",
    "\u043b\u0005\u009aN\u0002\u043a\u0438\u0003\u0002\u0002\u0002\u043b",
    "\u043e\u0003\u0002\u0002\u0002\u043c\u043a\u0003\u0002\u0002\u0002\u043c",
    "\u043d\u0003\u0002\u0002\u0002\u043d\u043f\u0003\u0002\u0002\u0002\u043e",
    "\u043c\u0003\u0002\u0002\u0002\u043f\u0440\u0007\u000e\u0002\u0002\u0440",
    "\u0099\u0003\u0002\u0002\u0002\u0441\u0442\u0007T\u0002\u0002\u0442",
    "\u0443\u0007\u001c\u0002\u0002\u0443\u0446\u0005z>\u0002\u0444\u0446",
    "\u0005z>\u0002\u0445\u0441\u0003\u0002\u0002\u0002\u0445\u0444\u0003",
    "\u0002\u0002\u0002\u0446\u009b\u0003\u0002\u0002\u0002\u0447\u0448\u0007",
    "=\u0002\u0002\u0448\u0449\u0007\u0003\u0002\u0002\u0449\u044e\u0005",
    "\u009eP\u0002\u044a\u044b\u0007\n\u0002\u0002\u044b\u044d\u0005\u009e",
    "P\u0002\u044c\u044a\u0003\u0002\u0002\u0002\u044d\u0450\u0003\u0002",
    "\u0002\u0002\u044e\u044c\u0003\u0002\u0002\u0002\u044e\u044f\u0003\u0002",
    "\u0002\u0002\u044f\u0451\u0003\u0002\u0002\u0002\u0450\u044e\u0003\u0002",
    "\u0002\u0002\u0451\u0452\u0007\u0004\u0002\u0002\u0452\u009d\u0003\u0002",
    "\u0002\u0002\u0453\u0462\u0007R\u0002\u0002\u0454\u0456\u0007S\u0002",
    "\u0002\u0455\u0454\u0003\u0002\u0002\u0002\u0455\u0456\u0003\u0002\u0002",
    "\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457\u0458\u0007\r\u0002",
    "\u0002\u0458\u045d\u0007R\u0002\u0002\u0459\u045a\u0007\n\u0002\u0002",
    "\u045a\u045c\u0007R\u0002\u0002\u045b\u0459\u0003\u0002\u0002\u0002",
    "\u045c\u045f\u0003\u0002\u0002\u0002\u045d\u045b\u0003\u0002\u0002\u0002",
    "\u045d\u045e\u0003\u0002\u0002\u0002\u045e\u0460\u0003\u0002\u0002\u0002",
    "\u045f\u045d\u0003\u0002\u0002\u0002\u0460\u0462\u0007\u000e\u0002\u0002",
    "\u0461\u0453\u0003\u0002\u0002\u0002\u0461\u0455\u0003\u0002\u0002\u0002",
    "\u0462\u009f\u0003\u0002\u0002\u0002\u0463\u0464\u0007\t\u0002\u0002",
    "\u0464\u0465\u0005\u00acW\u0002\u0465\u00a1\u0003\u0002\u0002\u0002",
    "\u0466\u046e\u0005\u00a4S\u0002\u0467\u0468\u0007\u001a\u0002\u0002",
    "\u0468\u046e\u0005\u00a4S\u0002\u0469\u046a\u0005\u008aF\u0002\u046a",
    "\u046b\u0007\f\u0002\u0002\u046b\u046c\u0005\u00a4S\u0002\u046c\u046e",
    "\u0003\u0002\u0002\u0002\u046d\u0466\u0003\u0002\u0002\u0002\u046d\u0467",
    "\u0003\u0002\u0002\u0002\u046d\u0469\u0003\u0002\u0002\u0002\u046e\u00a3",
    "\u0003\u0002\u0002\u0002\u046f\u047a\u0005\u00aeX\u0002\u0470\u0471",
    "\u0005\u00aeX\u0002\u0471\u0472\u0007\u0003\u0002\u0002\u0472\u0475",
    "\u0005z>\u0002\u0473\u0474\u0007\n\u0002\u0002\u0474\u0476\u0005z>\u0002",
    "\u0475\u0473\u0003\u0002\u0002\u0002\u0475\u0476\u0003\u0002\u0002\u0002",
    "\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u0478\u0007\u0004\u0002\u0002",
    "\u0478\u047a\u0003\u0002\u0002\u0002\u0479\u046f\u0003\u0002\u0002\u0002",
    "\u0479\u0470\u0003\u0002\u0002\u0002\u047a\u00a5\u0003\u0002\u0002\u0002",
    "\u047b\u047c\u0007T\u0002\u0002\u047c\u00a7\u0003\u0002\u0002\u0002",
    "\u047d\u0482\u0005\u00aaV\u0002\u047e\u047f\u0007\t\u0002\u0002\u047f",
    "\u0481\u0005\u00acW\u0002\u0480\u047e\u0003\u0002\u0002\u0002\u0481",
    "\u0484\u0003\u0002\u0002\u0002\u0482\u0480\u0003\u0002\u0002\u0002\u0482",
    "\u0483\u0003\u0002\u0002\u0002\u0483\u00a9\u0003\u0002\u0002\u0002\u0484",
    "\u0482\u0003\u0002\u0002\u0002\u0485\u048b\u0007T\u0002\u0002\u0486",
    "\u048b\u0007;\u0002\u0002\u0487\u048b\u0007Q\u0002\u0002\u0488\u048b",
    "\u0007R\u0002\u0002\u0489\u048b\u0007S\u0002\u0002\u048a\u0485\u0003",
    "\u0002\u0002\u0002\u048a\u0486\u0003\u0002\u0002\u0002\u048a\u0487\u0003",
    "\u0002\u0002\u0002\u048a\u0488\u0003\u0002\u0002\u0002\u048a\u0489\u0003",
    "\u0002\u0002\u0002\u048b\u00ab\u0003\u0002\u0002\u0002\u048c\u0491\u0007",
    "T\u0002\u0002\u048d\u0491\u0007;\u0002\u0002\u048e\u0491\u0007R\u0002",
    "\u0002\u048f\u0491\u0007S\u0002\u0002\u0490\u048c\u0003\u0002\u0002",
    "\u0002\u0490\u048d\u0003\u0002\u0002\u0002\u0490\u048e\u0003\u0002\u0002",
    "\u0002\u0490\u048f\u0003\u0002\u0002\u0002\u0491\u00ad\u0003\u0002\u0002",
    "\u0002\u0492\u0493\u0007T\u0002\u0002\u0493\u00af\u0003\u0002\u0002",
    "\u0002\u0494\u0497\u0007T\u0002\u0002\u0495\u0497\u0007;\u0002\u0002",
    "\u0496\u0494\u0003\u0002\u0002\u0002\u0496\u0495\u0003\u0002\u0002\u0002",
    "\u0497\u00b1\u0003\u0002\u0002\u0002\u0498\u049c\u0005\u00b4[\u0002",
    "\u0499\u049a\u0007\u000f\u0002\u0002\u049a\u049c\u0007\u0010\u0002\u0002",
    "\u049b\u0498\u0003\u0002\u0002\u0002\u049b\u0499\u0003\u0002\u0002\u0002",
    "\u049c\u00b3\u0003\u0002\u0002\u0002\u049d\u04a4\u0007Y\u0002\u0002",
    "\u049e\u04a4\u0005\u00b8]\u0002\u049f\u04a4\u0007+\u0002\u0002\u04a0",
    "\u04a4\u0007,\u0002\u0002\u04a1\u04a4\u0007Z\u0002\u0002\u04a2\u04a4",
    "\u0005\u00b6\\\u0002\u04a3\u049d\u0003\u0002\u0002\u0002\u04a3\u049e",
    "\u0003\u0002\u0002\u0002\u04a3\u049f\u0003\u0002\u0002\u0002\u04a3\u04a0",
    "\u0003\u0002\u0002\u0002\u04a3\u04a1\u0003\u0002\u0002\u0002\u04a3\u04a2",
    "\u0003\u0002\u0002\u0002\u04a4\u00b5\u0003\u0002\u0002\u0002\u04a5\u04af",
    "\u0007U\u0002\u0002\u04a6\u04a7\u0007\u0016\u0002\u0002\u04a7\u04af",
    "\u0007U\u0002\u0002\u04a8\u04af\u0007V\u0002\u0002\u04a9\u04af\u0007",
    "W\u0002\u0002\u04aa\u04af\u0007f\u0002\u0002\u04ab\u04af\u0007d\u0002",
    "\u0002\u04ac\u04af\u0007e\u0002\u0002\u04ad\u04af\u0007g\u0002\u0002",
    "\u04ae\u04a5\u0003\u0002\u0002\u0002\u04ae\u04a6\u0003\u0002\u0002\u0002",
    "\u04ae\u04a8\u0003\u0002\u0002\u0002\u04ae\u04a9\u0003\u0002\u0002\u0002",
    "\u04ae\u04aa\u0003\u0002\u0002\u0002\u04ae\u04ab\u0003\u0002\u0002\u0002",
    "\u04ae\u04ac\u0003\u0002\u0002\u0002\u04ae\u04ad\u0003\u0002\u0002\u0002",
    "\u04af\u00b7\u0003\u0002\u0002\u0002\u04b0\u04b7\u0007X\u0002\u0002",
    "\u04b1\u04b2\u0007\u0016\u0002\u0002\u04b2\u04b7\u0007X\u0002\u0002",
    "\u04b3\u04b7\u0007h\u0002\u0002\u04b4\u04b7\u0007i\u0002\u0002\u04b5",
    "\u04b7\u0007j\u0002\u0002\u04b6\u04b0\u0003\u0002\u0002\u0002\u04b6",
    "\u04b1\u0003\u0002\u0002\u0002\u04b6\u04b3\u0003\u0002\u0002\u0002\u04b6",
    "\u04b4\u0003\u0002\u0002\u0002\u04b6\u04b5\u0003\u0002\u0002\u0002\u04b7",
    "\u00b9\u0003\u0002\u0002\u0002\u04b8\u04b9\u0007.\u0002\u0002\u04b9",
    "\u04ba\u0007\u0003\u0002\u0002\u04ba\u04bb\u0005\u00bc_\u0002\u04bb",
    "\u04be\u0007\u0004\u0002\u0002\u04bc\u04bd\u00075\u0002\u0002\u04bd",
    "\u04bf\u0005\u00c0a\u0002\u04be\u04bc\u0003\u0002\u0002\u0002\u04be",
    "\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002\u04c0",
    "\u04c1\u0007/\u0002\u0002\u04c1\u04c2\u0005\u00c4c\u0002\u04c2\u00bb",
    "\u0003\u0002\u0002\u0002\u04c3\u04c5\u0005\u00be`\u0002\u04c4\u04c3",
    "\u0003\u0002\u0002\u0002\u04c5\u04c6\u0003\u0002\u0002\u0002\u04c6\u04c4",
    "\u0003\u0002\u0002\u0002\u04c6\u04c7\u0003\u0002\u0002\u0002\u04c7\u00bd",
    "\u0003\u0002\u0002\u0002\u04c8\u04cc\u0007\u0003\u0002\u0002\u04c9\u04cb",
    "\u0005\u00bc_\u0002\u04ca\u04c9\u0003\u0002\u0002\u0002\u04cb\u04ce",
    "\u0003\u0002\u0002\u0002\u04cc\u04ca\u0003\u0002\u0002\u0002\u04cc\u04cd",
    "\u0003\u0002\u0002\u0002\u04cd\u04cf\u0003\u0002\u0002\u0002\u04ce\u04cc",
    "\u0003\u0002\u0002\u0002\u04cf\u04d6\u0007\u0004\u0002\u0002\u04d0\u04d6",
    "\n\u000b\u0002\u0002\u04d1\u04d6\u0007\u0015\u0002\u0002\u04d2\u04d6",
    "\u0007\u0014\u0002\u0002\u04d3\u04d6\u0007\u0013\u0002\u0002\u04d4\u04d6",
    "\u0007\u001b\u0002\u0002\u04d5\u04c8\u0003\u0002\u0002\u0002\u04d5\u04d0",
    "\u0003\u0002\u0002\u0002\u04d5\u04d1\u0003\u0002\u0002\u0002\u04d5\u04d2",
    "\u0003\u0002\u0002\u0002\u04d5\u04d3\u0003\u0002\u0002\u0002\u04d5\u04d4",
    "\u0003\u0002\u0002\u0002\u04d6\u00bf\u0003\u0002\u0002\u0002\u04d7\u04dc",
    "\u0005\u00c2b\u0002\u04d8\u04d9\u0007\n\u0002\u0002\u04d9\u04db\u0005",
    "\u00c2b\u0002\u04da\u04d8\u0003\u0002\u0002\u0002\u04db\u04de\u0003",
    "\u0002\u0002\u0002\u04dc\u04da\u0003\u0002\u0002\u0002\u04dc\u04dd\u0003",
    "\u0002\u0002\u0002\u04dd\u00c1\u0003\u0002\u0002\u0002\u04de\u04dc\u0003",
    "\u0002\u0002\u0002\u04df\u04e2\u0005J&\u0002\u04e0\u04e2\u0007\u0012",
    "\u0002\u0002\u04e1\u04df\u0003\u0002\u0002\u0002\u04e1\u04e0\u0003\u0002",
    "\u0002\u0002\u04e2\u00c3\u0003\u0002\u0002\u0002\u04e3\u04e8\u0005n",
    "8\u0002\u04e4\u04e5\u0007H\u0002\u0002\u04e5\u04e6\u0007G\u0002\u0002",
    "\u04e6\u04e8\u0005n8\u0002\u04e7\u04e3\u0003\u0002\u0002\u0002\u04e7",
    "\u04e4\u0003\u0002\u0002\u0002\u04e8\u00c5\u0003\u0002\u0002\u0002\u0085",
    "\u00c9\u00d1\u00d9\u00dd\u00df\u00e1\u00e8\u00f4\u0106\u0111\u011c\u011f",
    "\u0127\u0132\u013b\u0140\u0150\u015a\u0165\u0171\u0178\u0181\u0189\u018d",
    "\u0192\u0195\u0199\u019e\u01a2\u01aa\u01b3\u01b8\u01c3\u01c6\u01d0\u01dc",
    "\u01e5\u01ec\u01f4\u01f9\u0203\u020e\u021a\u0226\u022a\u0236\u023f\u0243",
    "\u024d\u0252\u0256\u0263\u0270\u027e\u0290\u0295\u029d\u02a0\u02a6\u02af",
    "\u02b6\u02c5\u02c9\u02e7\u02ee\u02f2\u02f9\u0305\u030f\u0318\u0323\u0329",
    "\u032f\u0335\u033d\u0343\u0347\u034a\u0352\u0358\u035c\u0366\u036c\u0376",
    "\u0381\u0388\u038c\u038f\u0395\u039e\u03aa\u03b2\u03b8\u03bd\u03c4\u03cc",
    "\u03d4\u03e5\u03ea\u03f0\u03f7\u03fc\u0406\u040b\u0415\u041a\u0426\u043c",
    "\u0445\u044e\u0455\u045d\u0461\u046d\u0475\u0479\u0482\u048a\u0490\u0496",
    "\u049b\u04a3\u04ae\u04b6\u04be\u04c6\u04cc\u04d5\u04dc\u04e1\u04e7"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class KELParser extends antlr4.Parser {

    static grammarFileName = "KELParser.g4";
    static literalNames = [ null, "'('", "')'", "'='", "'\"'", "'<'", "'>'", 
                            "'.'", "','", "';'", "':'", "'{'", "'}'", "'['", 
                            "']'", "'*'", "'$'", "'&'", "'~'", "'!'", "'-'", 
                            "'%'", "'+'", "'/'", "'^'", "'|'", "':='", "'!='", 
                            "'<>'", "'<='", "'=>'", "'>='", "'==='", "'!!='", 
                            "'IN'", "'OR'", "'NOT'", "'AND'", "'ERA'", "'NULL'", 
                            "'DIV'", "'TRUE'", "'FALSE'", "'LINK'", "'ECL'", 
                            "'RETURNS'", "'#OPTION'", "'PERMITS'", "'ENTITY'", 
                            "'ASSOCIATION'", "'IMPORT'", "'FROM'", "'PACKAGE'", 
                            "'END'", "'SHELL'", "'FLAT'", "'QUERY'", "'UID'", 
                            "'FORMAT'", "'MODEL'", "'USE'", "'KELBASE'", 
                            "'KELQUERY'", "'FDC'", "'FILTER'", "'HINT'", 
                            "'GLOBAL'", "'FUNCTION'", "'DATASET'", "'OF'", 
                            "'SET'", "'ASOF'", "'USING'", "'VISUALIZE'", 
                            "'ENDVISUALIZE'", "'RESOURCES'", "'ENDRESOURCES'" ];
    static symbolicNames = [ null, "LP", "RP", "EQ", "DQUOTE", "LT", "GT", 
                             "DOT", "COMMA", "SEMI", "COLON", "LCURL", "RCURL", 
                             "LSQUARE", "RSQUARE", "STAR", "SIGIL", "AMP", 
                             "TILDE", "EXCLAIM", "HYPHEN", "MOD", "PLUS", 
                             "FSLASH", "CARET", "PIPE", "DEFEQ", "NEQ", 
                             "LTGT", "LARROW", "RARROW", "GTEQ", "LEQ", 
                             "NNEQ", "IN", "OR", "NOT", "AND", "ERA", "NULL", 
                             "DIV", "TRUE", "FALSE", "LINK", "ECL", "RETURNS", 
                             "OPTION", "PERMITS", "ENTITY", "ASSOCIATION", 
                             "IMPORT", "FROM", "PACKAGE", "END", "SHELL", 
                             "FLAT", "QUERY", "UID", "FORMAT", "MODEL", 
                             "USE", "KELBASE", "KELQUERY", "FDC", "FILTER", 
                             "HINT", "GLOBAL", "FUNCTION", "DATASET", "OF", 
                             "SET", "ASOF", "USING", "VIS", "ENDVIS", "RESOURCES", 
                             "ENDRESOURCES", "DOUBLESTRING", "SID", "SINT", 
                             "PID", "PSID", "ID", "INT", "HEXINT", "BININT", 
                             "REAL", "STR", "TYPDCONST", "ESC", "SEP_COMMENT", 
                             "ML_COMMENT", "MLMS_COMMENT", "JAVADOC_OPEN", 
                             "EMPTY_JAVADOC", "NEWLINE", "COMMENT", "WS", 
                             "BAD_BIN", "HEX_NO_X", "BAD_HEX", "BAD_MIX", 
                             "BAD_REAL_A", "BAD_REAL_B", "BAD_REAL_C", "ML_COMMENT_START", 
                             "MLMS_COMMENT_START", "JD_COMMENT_START" ];
    static ruleNames = [ "program", "annotation", "statement", "option", 
                         "eraDeclaration", "epoch", "permitsDeclaration", 
                         "permit", "importStatement", "inlinePackage", "outoflinePackage", 
                         "packageDeclaration", "packageStatement", "packageExportDeclaration", 
                         "entityDeclaration", "entityProperty", "fieldMapping", 
                         "fileType", "mappingElement", "nullSpec", "formatSpec", 
                         "compositeIdSpec", "modelDeclaration", "submodelDeclaration", 
                         "submodelId", "useDeclaration", "useKelBaseDeclaration", 
                         "useKelQueryDeclaration", "useElement", "useFileType", 
                         "useClause", "useClauseElement", "useClauseFileType", 
                         "nestedEntityMapping", "entityMapping", "useMappingOverride", 
                         "dotId", "permitsClause", "permitsSpec", "hintsClause", 
                         "logicStatement", "logicPredicate", "logicProductions", 
                         "logicProduction", "entityProductions", "entityProduction", 
                         "functionStatement", "fparams", "fparam", "functionBody", 
                         "queryDeclaration", "qparams", "qparam", "paramTypeId", 
                         "simpleTypeId", "asof", "using", "shellDeclaration", 
                         "visual_section", "resource_section", "expression", 
                         "booleanDisjunction", "booleanConjunction", "booleanTerm", 
                         "booleanAtom", "valueExpression", "valueTerm", 
                         "valueFactor", "valueAtom", "queryFuncOp", "funcOrFilter", 
                         "pair", "linkExp", "linkSpec", "linkDegree", "entityProjection", 
                         "namedExpression", "patternModel", "patternSubmodel", 
                         "fieldSelector", "scopeExpression", "tableProperty", 
                         "func_id", "qualifiedId", "leadingId", "fieldId", 
                         "tablePropId", "propertyId", "constant", "simpleConstant", 
                         "intConstant", "realConstant", "eclExpression", 
                         "eclBody", "eclFragment", "eclImportList", "eclImportItem", 
                         "returnTypeId" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = KELParser.ruleNames;
        this.literalNames = KELParser.literalNames;
        this.symbolicNames = KELParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, KELParser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 199;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.OPTION) {
	            this.state = 196;
	            this.option();
	            this.state = 201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.ERA || _la===KELParser.PERMITS) {
	            this.state = 202;
	            this.annotation();
	            this.state = 203;
	            this.match(KELParser.SEMI);
	            this.state = 209;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (KELParser.IMPORT - 50)) | (1 << (KELParser.PACKAGE - 50)) | (1 << (KELParser.SHELL - 50)) | (1 << (KELParser.QUERY - 50)) | (1 << (KELParser.USE - 50)) | (1 << (KELParser.GLOBAL - 50)) | (1 << (KELParser.FUNCTION - 50)) | (1 << (KELParser.VIS - 50)) | (1 << (KELParser.RESOURCES - 50)))) !== 0) || _la===KELParser.ID) {
	            this.state = 221;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case KELParser.IMPORT:
	            case KELParser.PACKAGE:
	            case KELParser.SHELL:
	            case KELParser.QUERY:
	            case KELParser.USE:
	            case KELParser.GLOBAL:
	            case KELParser.FUNCTION:
	            case KELParser.ID:
	                this.state = 210;
	                this.statement();
	                this.state = 211;
	                this.match(KELParser.SEMI);
	                break;
	            case KELParser.VIS:
	                this.state = 213;
	                this.visual_section();
	                this.state = 215;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===KELParser.SEMI) {
	                    this.state = 214;
	                    this.match(KELParser.SEMI);
	                }

	                break;
	            case KELParser.RESOURCES:
	                this.state = 217;
	                this.resource_section();
	                this.state = 219;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===KELParser.SEMI) {
	                    this.state = 218;
	                    this.match(KELParser.SEMI);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 225;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 226;
	        this.match(KELParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, KELParser.RULE_annotation);
	    try {
	        this.state = 230;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.ERA:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 228;
	            this.eraDeclaration();
	            break;
	        case KELParser.PERMITS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 229;
	            this.permitsDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, KELParser.RULE_statement);
	    try {
	        this.state = 242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 232;
	            this.importStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 233;
	            this.inlinePackage();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 234;
	            this.entityDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 235;
	            this.useDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 236;
	            this.useKelBaseDeclaration();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 237;
	            this.useKelQueryDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 238;
	            this.logicStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 239;
	            this.functionStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 240;
	            this.queryDeclaration();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 241;
	            this.shellDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	option() {
	    let localctx = new OptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, KELParser.RULE_option);
	    try {
	        this.state = 260;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new OptionBoolContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 244;
	            this.match(KELParser.OPTION);
	            this.state = 245;
	            this.match(KELParser.LP);
	            this.state = 246;
	            localctx.name = this.match(KELParser.ID);
	            this.state = 247;
	            this.match(KELParser.RP);
	            break;

	        case 2:
	            localctx = new OptionStrContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 248;
	            this.match(KELParser.OPTION);
	            this.state = 249;
	            this.match(KELParser.LP);
	            this.state = 250;
	            localctx.name = this.match(KELParser.ID);
	            this.state = 251;
	            this.match(KELParser.COMMA);
	            this.state = 252;
	            localctx.value = this.match(KELParser.STR);
	            this.state = 253;
	            this.match(KELParser.RP);
	            break;

	        case 3:
	            localctx = new OptionIntContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 254;
	            this.match(KELParser.OPTION);
	            this.state = 255;
	            this.match(KELParser.LP);
	            this.state = 256;
	            localctx.name = this.match(KELParser.ID);
	            this.state = 257;
	            this.match(KELParser.COMMA);
	            this.state = 258;
	            localctx.value = this.match(KELParser.INT);
	            this.state = 259;
	            this.match(KELParser.RP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eraDeclaration() {
	    let localctx = new EraDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, KELParser.RULE_eraDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 262;
	        this.match(KELParser.ERA);
	        this.state = 263;
	        localctx.name = this.match(KELParser.ID);
	        this.state = 264;
	        localctx.type = this.match(KELParser.ID);
	        this.state = 265;
	        this.match(KELParser.LP);
	        this.state = 266;
	        this.epoch();
	        this.state = 271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 267;
	            this.match(KELParser.COMMA);
	            this.state = 268;
	            this.epoch();
	            this.state = 273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 274;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	epoch() {
	    let localctx = new EpochContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, KELParser.RULE_epoch);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 276;
	        localctx.name = this.match(KELParser.ID);
	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.EQ) {
	            this.state = 277;
	            this.match(KELParser.EQ);
	            this.state = 278;
	            this.match(KELParser.NULL);
	            this.state = 279;
	            this.match(KELParser.LP);
	            this.state = 280;
	            localctx.nulltype = this.match(KELParser.ID);
	            this.state = 282;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.ID) {
	                this.state = 281;
	                localctx.sw = this.match(KELParser.ID);
	            }

	            this.state = 284;
	            this.match(KELParser.RP);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permitsDeclaration() {
	    let localctx = new PermitsDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, KELParser.RULE_permitsDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 287;
	        this.match(KELParser.PERMITS);
	        this.state = 288;
	        this.permit();
	        this.state = 293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 289;
	            this.match(KELParser.COMMA);
	            this.state = 290;
	            this.permit();
	            this.state = 295;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permit() {
	    let localctx = new PermitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, KELParser.RULE_permit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 296;
	        this.match(KELParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, KELParser.RULE_importStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleImportContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 298;
	            this.match(KELParser.IMPORT);
	            this.state = 299;
	            this.dotId();
	            this.state = 304;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 300;
	                this.match(KELParser.COMMA);
	                this.state = 301;
	                this.dotId();
	                this.state = 306;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new PackageImportContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 307;
	            this.match(KELParser.IMPORT);
	            this.state = 308;
	            this.match(KELParser.ID);
	            this.state = 313;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 309;
	                this.match(KELParser.COMMA);
	                this.state = 310;
	                this.match(KELParser.ID);
	                this.state = 315;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 316;
	            this.match(KELParser.FROM);
	            this.state = 317;
	            this.dotId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlinePackage() {
	    let localctx = new InlinePackageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, KELParser.RULE_inlinePackage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this.packageDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outoflinePackage() {
	    let localctx = new OutoflinePackageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, KELParser.RULE_outoflinePackage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.packageDeclaration();
	        this.state = 323;
	        this.match(KELParser.SEMI);
	        this.state = 324;
	        this.match(KELParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, KELParser.RULE_packageDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 326;
	        this.match(KELParser.PACKAGE);
	        this.state = 327;
	        this.match(KELParser.ID);
	        this.state = 328;
	        this.match(KELParser.SEMI);
	        this.state = 332; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 329;
	            this.packageStatement();
	            this.state = 330;
	            this.match(KELParser.SEMI);
	            this.state = 334; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (KELParser.IMPORT - 50)) | (1 << (KELParser.SHELL - 50)) | (1 << (KELParser.USE - 50)) | (1 << (KELParser.GLOBAL - 50)) | (1 << (KELParser.FUNCTION - 50)))) !== 0) || _la===KELParser.ID);
	        this.state = 336;
	        this.match(KELParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageStatement() {
	    let localctx = new PackageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, KELParser.RULE_packageStatement);
	    try {
	        this.state = 344;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 338;
	            this.importStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 339;
	            this.entityDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 340;
	            this.useDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 341;
	            this.logicStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 342;
	            this.functionStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 343;
	            this.packageExportDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageExportDeclaration() {
	    let localctx = new PackageExportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, KELParser.RULE_packageExportDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 346;
	        this.match(KELParser.SHELL);
	        this.state = 347;
	        this.match(KELParser.COLON);
	        this.state = 348;
	        localctx.name = this.match(KELParser.ID);
	        this.state = 349;
	        this.match(KELParser.LARROW);
	        this.state = 350;
	        this.expression();
	        this.state = 355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 351;
	            this.match(KELParser.COMMA);
	            this.state = 352;
	            this.expression();
	            this.state = 357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityDeclaration() {
	    let localctx = new EntityDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, KELParser.RULE_entityDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 358;
	        this.match(KELParser.ID);
	        this.state = 359;
	        this.match(KELParser.DEFEQ);
	        this.state = 360;
	        localctx.t = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===KELParser.ENTITY || _la===KELParser.ASSOCIATION)) {
	            localctx.t = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 361;
	        this.match(KELParser.LP);
	        this.state = 362;
	        this.entityProperty();
	        this.state = 367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 363;
	            this.match(KELParser.COMMA);
	            this.state = 364;
	            this.entityProperty();
	            this.state = 369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 370;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityProperty() {
	    let localctx = new EntityPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, KELParser.RULE_entityProperty);
	    try {
	        this.state = 374;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.FLAT:
	        case KELParser.QUERY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 372;
	            localctx.fm = this.fieldMapping();
	            break;
	        case KELParser.MODEL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 373;
	            localctx.m = this.modelDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldMapping() {
	    let localctx = new FieldMappingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, KELParser.RULE_fieldMapping);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 376;
	        this.fileType();
	        this.state = 377;
	        this.match(KELParser.LP);
	        this.state = 378;
	        this.mappingElement();
	        this.state = 383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 379;
	            this.match(KELParser.COMMA);
	            this.state = 380;
	            localctx.m = this.mappingElement();
	            this.state = 385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 386;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileType() {
	    let localctx = new FileTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, KELParser.RULE_fileType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 388;
	        _la = this._input.LA(1);
	        if(!(_la===KELParser.FLAT || _la===KELParser.QUERY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mappingElement() {
	    let localctx = new MappingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, KELParser.RULE_mappingElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 433;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 391;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 390;
	                localctx.t = this.match(KELParser.ID);

	            }
	            this.state = 393;
	            localctx.i = this.match(KELParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 395;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 394;
	                localctx.t = this.match(KELParser.ID);

	            }
	            this.state = 397;
	            localctx.i = this.match(KELParser.ID);
	            this.state = 398;
	            this.match(KELParser.EQ);
	            this.state = 400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.NULL) {
	                this.state = 399;
	                localctx.nspec = this.nullSpec();
	            }

	            this.state = 403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.FORMAT) {
	                this.state = 402;
	                localctx.fspec = this.formatSpec();
	            }

	            this.state = 405;
	            localctx.from = this.dotId();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 407;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	            if(la_===1) {
	                this.state = 406;
	                localctx.t = this.match(KELParser.ID);

	            }
	            this.state = 409;
	            localctx.i = this.match(KELParser.ID);
	            this.state = 410;
	            this.match(KELParser.EQ);
	            this.state = 412;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.NULL) {
	                this.state = 411;
	                localctx.nspec = this.nullSpec();
	            }

	            this.state = 414;
	            localctx.fspec = this.formatSpec();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 416;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	            if(la_===1) {
	                this.state = 415;
	                localctx.t = this.match(KELParser.ID);

	            }
	            this.state = 418;
	            localctx.i = this.match(KELParser.ID);
	            this.state = 419;
	            this.match(KELParser.EQ);
	            this.state = 420;
	            localctx.nspec = this.nullSpec();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 421;
	            localctx.i = this.match(KELParser.UID);
	            this.state = 424;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.EQ) {
	                this.state = 422;
	                this.match(KELParser.EQ);
	                this.state = 423;
	                localctx.from = this.dotId();
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 426;
	            localctx.i = this.match(KELParser.UID);
	            this.state = 427;
	            localctx.c = this.compositeIdSpec();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 428;
	            localctx.t = this.match(KELParser.ID);
	            this.state = 429;
	            localctx.i = this.match(KELParser.ID);
	            this.state = 430;
	            this.match(KELParser.EQ);
	            this.state = 431;
	            localctx.u = this.match(KELParser.UID);
	            this.state = 432;
	            localctx.c = this.compositeIdSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullSpec() {
	    let localctx = new NullSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, KELParser.RULE_nullSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 435;
	        this.match(KELParser.NULL);
	        this.state = 436;
	        this.match(KELParser.LP);
	        this.state = 438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (KELParser.HYPHEN - 20)) | (1 << (KELParser.TRUE - 20)) | (1 << (KELParser.FALSE - 20)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (KELParser.INT - 83)) | (1 << (KELParser.HEXINT - 83)) | (1 << (KELParser.BININT - 83)) | (1 << (KELParser.REAL - 83)) | (1 << (KELParser.STR - 83)) | (1 << (KELParser.TYPDCONST - 83)) | (1 << (KELParser.BAD_BIN - 83)) | (1 << (KELParser.HEX_NO_X - 83)) | (1 << (KELParser.BAD_HEX - 83)) | (1 << (KELParser.BAD_MIX - 83)) | (1 << (KELParser.BAD_REAL_A - 83)) | (1 << (KELParser.BAD_REAL_B - 83)) | (1 << (KELParser.BAD_REAL_C - 83)))) !== 0)) {
	            this.state = 437;
	            localctx.c = this.simpleConstant();
	        }

	        this.state = 440;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formatSpec() {
	    let localctx = new FormatSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, KELParser.RULE_formatSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 442;
	        this.match(KELParser.FORMAT);
	        this.state = 443;
	        this.match(KELParser.LP);
	        this.state = 452;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (KELParser.HYPHEN - 20)) | (1 << (KELParser.TRUE - 20)) | (1 << (KELParser.FALSE - 20)))) !== 0) || ((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (KELParser.INT - 83)) | (1 << (KELParser.HEXINT - 83)) | (1 << (KELParser.BININT - 83)) | (1 << (KELParser.REAL - 83)) | (1 << (KELParser.STR - 83)) | (1 << (KELParser.TYPDCONST - 83)) | (1 << (KELParser.BAD_BIN - 83)) | (1 << (KELParser.HEX_NO_X - 83)) | (1 << (KELParser.BAD_HEX - 83)) | (1 << (KELParser.BAD_MIX - 83)) | (1 << (KELParser.BAD_REAL_A - 83)) | (1 << (KELParser.BAD_REAL_B - 83)) | (1 << (KELParser.BAD_REAL_C - 83)))) !== 0)) {
	            this.state = 444;
	            this.simpleConstant();
	            this.state = 449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 445;
	                this.match(KELParser.COMMA);
	                this.state = 446;
	                this.simpleConstant();
	                this.state = 451;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 454;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeIdSpec() {
	    let localctx = new CompositeIdSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, KELParser.RULE_compositeIdSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 456;
	        this.match(KELParser.LP);
	        this.state = 457;
	        this.dotId();
	        this.state = 462;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 458;
	            this.match(KELParser.COMMA);
	            this.state = 459;
	            this.dotId();
	            this.state = 464;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 465;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modelDeclaration() {
	    let localctx = new ModelDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, KELParser.RULE_modelDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 483;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ComplexModelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 467;
	            localctx.md = this.match(KELParser.MODEL);
	            this.state = 468;
	            this.match(KELParser.LP);
	            this.state = 469;
	            this.submodelDeclaration();
	            this.state = 474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 470;
	                this.match(KELParser.COMMA);
	                this.state = 471;
	                this.submodelDeclaration();
	                this.state = 476;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 477;
	            this.match(KELParser.RP);
	            break;

	        case 2:
	            localctx = new SingleRowModelContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 479;
	            localctx.md = this.match(KELParser.MODEL);
	            this.state = 480;
	            this.match(KELParser.LP);
	            this.state = 481;
	            this.match(KELParser.STAR);
	            this.state = 482;
	            this.match(KELParser.RP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	submodelDeclaration() {
	    let localctx = new SubmodelDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, KELParser.RULE_submodelDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 503;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SingleValueSubModelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 485;
	            localctx.i = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===KELParser.UID || _la===KELParser.ID)) {
	                localctx.i = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            localctx = new RemainderSubModelContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 486;
	            localctx.b = this.match(KELParser.LCURL);
	            this.state = 487;
	            this.match(KELParser.STAR);
	            this.state = 488;
	            this.match(KELParser.RCURL);
	            break;

	        case 3:
	            localctx = new ExplicitSubModelContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 490;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.ID) {
	                this.state = 489;
	                localctx.n = this.match(KELParser.ID);
	            }

	            this.state = 492;
	            localctx.b = this.match(KELParser.LCURL);
	            this.state = 493;
	            this.submodelId();
	            this.state = 498;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 494;
	                this.match(KELParser.COMMA);
	                this.state = 495;
	                this.submodelId();
	                this.state = 500;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 501;
	            this.match(KELParser.RCURL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	submodelId() {
	    let localctx = new SubmodelIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, KELParser.RULE_submodelId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 505;
	        _la = this._input.LA(1);
	        if(!(_la===KELParser.UID || _la===KELParser.ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useDeclaration() {
	    let localctx = new UseDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, KELParser.RULE_useDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 507;
	        this.match(KELParser.USE);
	        this.state = 508;
	        this.useElement();
	        this.state = 513;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 509;
	            this.match(KELParser.COMMA);
	            this.state = 510;
	            this.useElement();
	            this.state = 515;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useKelBaseDeclaration() {
	    let localctx = new UseKelBaseDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, KELParser.RULE_useKelBaseDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this.match(KELParser.USE);
	        this.state = 517;
	        localctx.attr = this.dotId();
	        this.state = 518;
	        this.match(KELParser.LP);
	        this.state = 519;
	        this.match(KELParser.KELBASE);
	        this.state = 522; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 520;
	            this.match(KELParser.COMMA);
	            this.state = 521;
	            this.expression();
	            this.state = 524; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===KELParser.COMMA);
	        this.state = 526;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useKelQueryDeclaration() {
	    let localctx = new UseKelQueryDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, KELParser.RULE_useKelQueryDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this.match(KELParser.USE);
	        this.state = 529;
	        localctx.attr = this.dotId();
	        this.state = 530;
	        this.match(KELParser.LP);
	        this.state = 531;
	        this.match(KELParser.KELQUERY);
	        this.state = 534; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 532;
	            this.match(KELParser.COMMA);
	            this.state = 533;
	            this.match(KELParser.ID);
	            this.state = 536; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===KELParser.COMMA);
	        this.state = 538;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useElement() {
	    let localctx = new UseElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, KELParser.RULE_useElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        localctx.attr = this.dotId();
	        this.state = 541;
	        this.match(KELParser.LP);
	        this.state = 542;
	        localctx.t = this.useFileType();
	        this.state = 550; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 543;
	            this.match(KELParser.COMMA);
	            this.state = 548;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 544;
	                localctx.ne = this.nestedEntityMapping();
	                break;

	            case 2:
	                this.state = 545;
	                localctx.e = this.entityMapping();
	                break;

	            case 3:
	                this.state = 546;
	                localctx.p = this.permitsClause();
	                break;

	            case 4:
	                this.state = 547;
	                this.hintsClause();
	                break;

	            }
	            this.state = 552; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===KELParser.COMMA);
	        this.state = 554;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useFileType() {
	    let localctx = new UseFileTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, KELParser.RULE_useFileType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 556;
	        _la = this._input.LA(1);
	        if(!(_la===KELParser.FLAT || _la===KELParser.FDC)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useClause() {
	    let localctx = new UseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, KELParser.RULE_useClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this.match(KELParser.USE);
	        this.state = 559;
	        this.useClauseElement();
	        this.state = 564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 560;
	            this.match(KELParser.COMMA);
	            this.state = 561;
	            this.useClauseElement();
	            this.state = 566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useClauseElement() {
	    let localctx = new UseClauseElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, KELParser.RULE_useClauseElement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        localctx.attr = this.match(KELParser.ID);
	        this.state = 568;
	        this.match(KELParser.LP);
	        this.state = 569;
	        localctx.t = this.useClauseFileType();
	        this.state = 575; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 570;
	            this.match(KELParser.COMMA);
	            this.state = 573;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case KELParser.ID:
	                this.state = 571;
	                localctx.e = this.entityMapping();
	                break;
	            case KELParser.PERMITS:
	                this.state = 572;
	                localctx.p = this.permitsClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 577; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===KELParser.COMMA);
	        this.state = 579;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useClauseFileType() {
	    let localctx = new UseClauseFileTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, KELParser.RULE_useClauseFileType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 581;
	        this.match(KELParser.FLAT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedEntityMapping() {
	    let localctx = new NestedEntityMappingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, KELParser.RULE_nestedEntityMapping);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        localctx.child = this.match(KELParser.ID);
	        this.state = 584;
	        this.match(KELParser.LP);
	        this.state = 587;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.ID:
	            this.state = 585;
	            localctx.e1 = this.entityMapping();
	            break;
	        case KELParser.PERMITS:
	            this.state = 586;
	            localctx.p1 = this.permitsClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 589;
	            this.match(KELParser.COMMA);
	            this.state = 592;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case KELParser.ID:
	                this.state = 590;
	                localctx.e2 = this.entityMapping();
	                break;
	            case KELParser.PERMITS:
	                this.state = 591;
	                localctx.p2 = this.permitsClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 599;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityMapping() {
	    let localctx = new EntityMappingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, KELParser.RULE_entityMapping);
	    var _la = 0; // Token type
	    try {
	        this.state = 659;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 601;
	            localctx.e = this.match(KELParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 602;
	            localctx.e = this.match(KELParser.ID);
	            this.state = 603;
	            this.match(KELParser.LP);
	            this.state = 604;
	            this.useMappingOverride();
	            this.state = 609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 605;
	                this.match(KELParser.COMMA);
	                this.state = 606;
	                this.useMappingOverride();
	                this.state = 611;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 612;
	            this.match(KELParser.RP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 614;
	            localctx.e = this.match(KELParser.ID);
	            this.state = 615;
	            this.match(KELParser.LP);
	            this.state = 616;
	            localctx.p = this.match(KELParser.ID);
	            this.state = 617;
	            this.match(KELParser.STAR);
	            this.state = 622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 618;
	                this.match(KELParser.COMMA);
	                this.state = 619;
	                this.useMappingOverride();
	                this.state = 624;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 625;
	            this.match(KELParser.RP);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 626;
	            localctx.e = this.match(KELParser.ID);
	            this.state = 627;
	            this.match(KELParser.LP);
	            this.state = 628;
	            this.match(KELParser.FILTER);
	            this.state = 629;
	            this.match(KELParser.LP);
	            this.state = 630;
	            localctx.f = this.eclBody();
	            this.state = 631;
	            this.match(KELParser.RP);
	            this.state = 636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 632;
	                this.match(KELParser.COMMA);
	                this.state = 633;
	                this.useMappingOverride();
	                this.state = 638;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 639;
	            this.match(KELParser.RP);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 641;
	            localctx.e = this.match(KELParser.ID);
	            this.state = 642;
	            this.match(KELParser.LP);
	            this.state = 643;
	            localctx.p = this.match(KELParser.ID);
	            this.state = 644;
	            this.match(KELParser.STAR);
	            this.state = 645;
	            this.match(KELParser.COMMA);
	            this.state = 646;
	            this.match(KELParser.FILTER);
	            this.state = 647;
	            this.match(KELParser.LP);
	            this.state = 648;
	            localctx.f = this.eclBody();
	            this.state = 649;
	            this.match(KELParser.RP);
	            this.state = 654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 650;
	                this.match(KELParser.COMMA);
	                this.state = 651;
	                this.useMappingOverride();
	                this.state = 656;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 657;
	            this.match(KELParser.RP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useMappingOverride() {
	    let localctx = new UseMappingOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, KELParser.RULE_useMappingOverride);
	    var _la = 0; // Token type
	    try {
	        this.state = 685;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NormalMappingOverrideContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 661;
	            localctx.ef = this.match(KELParser.UID);
	            this.state = 662;
	            this.match(KELParser.EQ);
	            this.state = 663;
	            localctx.from = this.dotId();
	            break;

	        case 2:
	            localctx = new NormalMappingOverrideContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 664;
	            localctx.ef = this.match(KELParser.ID);
	            this.state = 665;
	            this.match(KELParser.EQ);
	            this.state = 667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.NULL) {
	                this.state = 666;
	                localctx.nspec = this.nullSpec();
	            }

	            this.state = 670;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.FORMAT) {
	                this.state = 669;
	                localctx.fspec = this.formatSpec();
	            }

	            this.state = 672;
	            localctx.from = this.dotId();
	            break;

	        case 3:
	            localctx = new NormalMappingOverrideContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 673;
	            localctx.ef = this.match(KELParser.ID);
	            this.state = 674;
	            this.match(KELParser.EQ);
	            this.state = 676;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.NULL) {
	                this.state = 675;
	                localctx.nspec = this.nullSpec();
	            }

	            this.state = 678;
	            localctx.fspec = this.formatSpec();
	            break;

	        case 4:
	            localctx = new NormalMappingOverrideContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 679;
	            localctx.ef = this.match(KELParser.ID);
	            this.state = 680;
	            this.match(KELParser.EQ);
	            this.state = 681;
	            localctx.nspec = this.nullSpec();
	            break;

	        case 5:
	            localctx = new ConstantMappingOverrideContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 682;
	            localctx.ef = this.match(KELParser.ID);
	            this.state = 683;
	            this.match(KELParser.EQ);
	            this.state = 684;
	            localctx.c = this.simpleConstant();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotId() {
	    let localctx = new DotIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, KELParser.RULE_dotId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 687;
	        this.match(KELParser.ID);
	        this.state = 692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.DOT) {
	            this.state = 688;
	            this.match(KELParser.DOT);
	            this.state = 689;
	            this.match(KELParser.ID);
	            this.state = 694;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permitsClause() {
	    let localctx = new PermitsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, KELParser.RULE_permitsClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        this.match(KELParser.PERMITS);
	        this.state = 696;
	        this.match(KELParser.LP);
	        this.state = 697;
	        this.permitsSpec();
	        this.state = 698;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	permitsSpec() {
	    let localctx = new PermitsSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, KELParser.RULE_permitsSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 711;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.ID:
	            localctx = new VariablePermitsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 700;
	            this.dotId();
	            break;
	        case KELParser.LSQUARE:
	            localctx = new ConstantPermitsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 701;
	            this.match(KELParser.LSQUARE);
	            this.state = 702;
	            this.match(KELParser.ID);
	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 703;
	                this.match(KELParser.COMMA);
	                this.state = 704;
	                this.match(KELParser.ID);
	                this.state = 709;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 710;
	            this.match(KELParser.RSQUARE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintsClause() {
	    let localctx = new HintsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, KELParser.RULE_hintsClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.match(KELParser.HINT);
	        this.state = 714;
	        this.match(KELParser.LP);
	        this.state = 715;
	        this.match(KELParser.ID);
	        this.state = 716;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicStatement() {
	    let localctx = new LogicStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, KELParser.RULE_logicStatement);
	    try {
	        this.state = 741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LogicPropertyStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 718;
	            localctx.c = this.match(KELParser.ID);
	            this.state = 719;
	            this.match(KELParser.COLON);
	            this.state = 720;
	            localctx.p = this.logicPredicate();
	            this.state = 721;
	            this.match(KELParser.RARROW);
	            this.state = 722;
	            this.logicProductions();
	            break;

	        case 2:
	            localctx = new LogicPropertyStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 724;
	            localctx.c = this.match(KELParser.ID);
	            this.state = 725;
	            this.match(KELParser.DOT);
	            this.state = 726;
	            localctx.mvp = this.match(KELParser.ID);
	            this.state = 727;
	            this.match(KELParser.COLON);
	            this.state = 728;
	            localctx.p = this.logicPredicate();
	            this.state = 729;
	            this.match(KELParser.RARROW);
	            this.state = 730;
	            this.logicProductions();
	            break;

	        case 3:
	            localctx = new ConstantDeclStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 732;
	            localctx.c = this.match(KELParser.ID);
	            this.state = 733;
	            this.match(KELParser.COLON);
	            this.state = 734;
	            this.logicProductions();
	            break;

	        case 4:
	            localctx = new EntityGeneratorStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 735;
	            this.match(KELParser.GLOBAL);
	            this.state = 736;
	            this.match(KELParser.COLON);
	            this.state = 737;
	            localctx.p = this.logicPredicate();
	            this.state = 738;
	            this.match(KELParser.RARROW);
	            this.state = 739;
	            this.entityProductions();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicPredicate() {
	    let localctx = new LogicPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, KELParser.RULE_logicPredicate);
	    var _la = 0; // Token type
	    try {
	        this.state = 752;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.LP:
	        case KELParser.LCURL:
	        case KELParser.LSQUARE:
	        case KELParser.HYPHEN:
	        case KELParser.NOT:
	        case KELParser.TRUE:
	        case KELParser.FALSE:
	        case KELParser.LINK:
	        case KELParser.UID:
	        case KELParser.MODEL:
	        case KELParser.SID:
	        case KELParser.SINT:
	        case KELParser.PID:
	        case KELParser.PSID:
	        case KELParser.ID:
	        case KELParser.INT:
	        case KELParser.HEXINT:
	        case KELParser.BININT:
	        case KELParser.REAL:
	        case KELParser.STR:
	        case KELParser.TYPDCONST:
	        case KELParser.BAD_BIN:
	        case KELParser.HEX_NO_X:
	        case KELParser.BAD_HEX:
	        case KELParser.BAD_MIX:
	        case KELParser.BAD_REAL_A:
	        case KELParser.BAD_REAL_B:
	        case KELParser.BAD_REAL_C:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 743;
	            localctx.ex1 = this.expression();
	            this.state = 748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 744;
	                this.match(KELParser.COMMA);
	                this.state = 745;
	                localctx.ex2 = this.expression();
	                this.state = 750;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case KELParser.RARROW:
	            this.enterOuterAlt(localctx, 2);

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicProductions() {
	    let localctx = new LogicProductionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, KELParser.RULE_logicProductions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        this.logicProduction();
	        this.state = 759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 755;
	            this.match(KELParser.COMMA);
	            this.state = 756;
	            this.logicProduction();
	            this.state = 761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicProduction() {
	    let localctx = new LogicProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, KELParser.RULE_logicProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        localctx.name = this.match(KELParser.ID);
	        this.state = 763;
	        this.match(KELParser.DEFEQ);
	        this.state = 764;
	        localctx.ex = this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityProductions() {
	    let localctx = new EntityProductionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, KELParser.RULE_entityProductions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 766;
	        this.entityProduction();
	        this.state = 771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 767;
	            this.match(KELParser.COMMA);
	            this.state = 768;
	            this.entityProduction();
	            this.state = 773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityProduction() {
	    let localctx = new EntityProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, KELParser.RULE_entityProduction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        localctx.name = this.match(KELParser.ID);
	        this.state = 775;
	        this.match(KELParser.LP);
	        this.state = 776;
	        localctx.e1 = this.expression();
	        this.state = 781;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 777;
	            localctx.op = this.match(KELParser.COMMA);
	            this.state = 778;
	            localctx.e2 = this.expression();
	            this.state = 783;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 784;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionStatement() {
	    let localctx = new FunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, KELParser.RULE_functionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 786;
	        this.match(KELParser.FUNCTION);
	        this.state = 787;
	        this.match(KELParser.COLON);
	        this.state = 788;
	        localctx.name = this.match(KELParser.ID);
	        this.state = 790;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.LP) {
	            this.state = 789;
	            localctx.ps = this.fparams();
	        }

	        this.state = 792;
	        this.match(KELParser.LARROW);
	        this.state = 793;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fparams() {
	    let localctx = new FparamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, KELParser.RULE_fparams);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        this.match(KELParser.LP);
	        this.state = 796;
	        localctx.q1 = this.fparam();
	        this.state = 801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 797;
	            this.match(KELParser.COMMA);
	            this.state = 798;
	            localctx.q2 = this.fparam();
	            this.state = 803;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 804;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fparam() {
	    let localctx = new FparamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, KELParser.RULE_fparam);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        if(la_===1) {
	            this.state = 806;
	            localctx.pt = this.paramTypeId();

	        }
	        this.state = 809;
	        localctx.id = this.match(KELParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, KELParser.RULE_functionBody);
	    try {
	        this.state = 813;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.LP:
	        case KELParser.LCURL:
	        case KELParser.LSQUARE:
	        case KELParser.HYPHEN:
	        case KELParser.NOT:
	        case KELParser.TRUE:
	        case KELParser.FALSE:
	        case KELParser.LINK:
	        case KELParser.UID:
	        case KELParser.MODEL:
	        case KELParser.SID:
	        case KELParser.SINT:
	        case KELParser.PID:
	        case KELParser.PSID:
	        case KELParser.ID:
	        case KELParser.INT:
	        case KELParser.HEXINT:
	        case KELParser.BININT:
	        case KELParser.REAL:
	        case KELParser.STR:
	        case KELParser.TYPDCONST:
	        case KELParser.BAD_BIN:
	        case KELParser.HEX_NO_X:
	        case KELParser.BAD_HEX:
	        case KELParser.BAD_MIX:
	        case KELParser.BAD_REAL_A:
	        case KELParser.BAD_REAL_B:
	        case KELParser.BAD_REAL_C:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 811;
	            localctx.kel = this.expression();
	            break;
	        case KELParser.ECL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 812;
	            localctx.ecl = this.eclExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryDeclaration() {
	    let localctx = new QueryDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, KELParser.RULE_queryDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this.match(KELParser.QUERY);
	        this.state = 816;
	        this.match(KELParser.COLON);
	        this.state = 817;
	        localctx.name = this.match(KELParser.ID);
	        this.state = 819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.LP) {
	            this.state = 818;
	            localctx.ps = this.qparams();
	        }

	        this.state = 821;
	        this.match(KELParser.LARROW);
	        this.state = 822;
	        this.expression();
	        this.state = 827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 823;
	            this.match(KELParser.COMMA);
	            this.state = 824;
	            this.expression();
	            this.state = 829;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.ASOF) {
	            this.state = 830;
	            this.asof();
	            this.state = 835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 837;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.USING) {
	            this.state = 836;
	            this.using();
	        }

	        this.state = 840;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.USE) {
	            this.state = 839;
	            this.useClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qparams() {
	    let localctx = new QparamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, KELParser.RULE_qparams);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this.match(KELParser.LP);
	        this.state = 843;
	        localctx.q1 = this.qparam();
	        this.state = 848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 844;
	            this.match(KELParser.COMMA);
	            this.state = 845;
	            localctx.q2 = this.qparam();
	            this.state = 850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 851;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qparam() {
	    let localctx = new QparamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, KELParser.RULE_qparam);
	    var _la = 0; // Token type
	    try {
	        this.state = 868;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 854;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	            if(la_===1) {
	                this.state = 853;
	                localctx.pt = this.paramTypeId();

	            }
	            this.state = 856;
	            localctx.id = this.match(KELParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.UID || _la===KELParser.ID) {
	                this.state = 857;
	                localctx.at = this.simpleTypeId();
	            }

	            this.state = 860;
	            localctx.sid = this.match(KELParser.SID);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 861;
	            this.match(KELParser.PERMITS);
	            this.state = 862;
	            localctx.pid = this.match(KELParser.ID);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 863;
	            this.match(KELParser.DATASET);
	            this.state = 864;
	            this.match(KELParser.OF);
	            this.state = 865;
	            localctx.dstype = this.dotId();
	            this.state = 866;
	            localctx.dsid = this.match(KELParser.ID);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramTypeId() {
	    let localctx = new ParamTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, KELParser.RULE_paramTypeId);
	    try {
	        this.state = 874;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.UID:
	        case KELParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 870;
	            localctx.simple = this.simpleTypeId();
	            break;
	        case KELParser.SET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 871;
	            localctx.isSet = this.match(KELParser.SET);
	            this.state = 872;
	            this.match(KELParser.OF);
	            this.state = 873;
	            localctx.simple = this.simpleTypeId();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeId() {
	    let localctx = new SimpleTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, KELParser.RULE_simpleTypeId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 876;
	        _la = this._input.LA(1);
	        if(!(_la===KELParser.UID || _la===KELParser.ID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asof() {
	    let localctx = new AsofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, KELParser.RULE_asof);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 878;
	        this.match(KELParser.ASOF);
	        this.state = 879;
	        localctx.eraname = this.match(KELParser.ID);
	        this.state = 880;
	        this.match(KELParser.LP);
	        this.state = 881;
	        this.expression();
	        this.state = 884;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.COMMA) {
	            this.state = 882;
	            this.match(KELParser.COMMA);
	            this.state = 883;
	            this.expression();
	        }

	        this.state = 886;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	using() {
	    let localctx = new UsingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, KELParser.RULE_using);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.match(KELParser.USING);
	        this.state = 889;
	        this.permitsSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shellDeclaration() {
	    let localctx = new ShellDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, KELParser.RULE_shellDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        this.match(KELParser.SHELL);
	        this.state = 892;
	        this.match(KELParser.COLON);
	        this.state = 893;
	        localctx.name = this.match(KELParser.ID);
	        this.state = 895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.LP) {
	            this.state = 894;
	            localctx.ps = this.qparams();
	        }

	        this.state = 897;
	        this.match(KELParser.LARROW);
	        this.state = 898;
	        localctx.ex = this.expression();
	        this.state = 902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.ASOF) {
	            this.state = 899;
	            this.asof();
	            this.state = 904;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 906;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.USING) {
	            this.state = 905;
	            this.using();
	        }

	        this.state = 909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.USE) {
	            this.state = 908;
	            this.useClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	visual_section() {
	    let localctx = new Visual_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, KELParser.RULE_visual_section);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 911;
	        this.match(KELParser.VIS);
	        this.state = 915;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KELParser.LP) | (1 << KELParser.RP) | (1 << KELParser.EQ) | (1 << KELParser.DQUOTE) | (1 << KELParser.LT) | (1 << KELParser.GT) | (1 << KELParser.DOT) | (1 << KELParser.COMMA) | (1 << KELParser.SEMI) | (1 << KELParser.COLON) | (1 << KELParser.LCURL) | (1 << KELParser.RCURL) | (1 << KELParser.LSQUARE) | (1 << KELParser.RSQUARE) | (1 << KELParser.STAR) | (1 << KELParser.SIGIL) | (1 << KELParser.AMP) | (1 << KELParser.TILDE) | (1 << KELParser.EXCLAIM) | (1 << KELParser.HYPHEN) | (1 << KELParser.MOD) | (1 << KELParser.PLUS) | (1 << KELParser.FSLASH) | (1 << KELParser.CARET) | (1 << KELParser.PIPE) | (1 << KELParser.DEFEQ) | (1 << KELParser.NEQ) | (1 << KELParser.LTGT) | (1 << KELParser.LARROW) | (1 << KELParser.RARROW) | (1 << KELParser.GTEQ))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (KELParser.LEQ - 32)) | (1 << (KELParser.NNEQ - 32)) | (1 << (KELParser.IN - 32)) | (1 << (KELParser.OR - 32)) | (1 << (KELParser.NOT - 32)) | (1 << (KELParser.AND - 32)) | (1 << (KELParser.ERA - 32)) | (1 << (KELParser.NULL - 32)) | (1 << (KELParser.DIV - 32)) | (1 << (KELParser.TRUE - 32)) | (1 << (KELParser.FALSE - 32)) | (1 << (KELParser.LINK - 32)) | (1 << (KELParser.ECL - 32)) | (1 << (KELParser.RETURNS - 32)) | (1 << (KELParser.OPTION - 32)) | (1 << (KELParser.PERMITS - 32)) | (1 << (KELParser.ENTITY - 32)) | (1 << (KELParser.ASSOCIATION - 32)) | (1 << (KELParser.IMPORT - 32)) | (1 << (KELParser.FROM - 32)) | (1 << (KELParser.PACKAGE - 32)) | (1 << (KELParser.END - 32)) | (1 << (KELParser.SHELL - 32)) | (1 << (KELParser.FLAT - 32)) | (1 << (KELParser.QUERY - 32)) | (1 << (KELParser.UID - 32)) | (1 << (KELParser.FORMAT - 32)) | (1 << (KELParser.MODEL - 32)) | (1 << (KELParser.USE - 32)) | (1 << (KELParser.KELBASE - 32)) | (1 << (KELParser.KELQUERY - 32)) | (1 << (KELParser.FDC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (KELParser.FILTER - 64)) | (1 << (KELParser.HINT - 64)) | (1 << (KELParser.GLOBAL - 64)) | (1 << (KELParser.FUNCTION - 64)) | (1 << (KELParser.DATASET - 64)) | (1 << (KELParser.OF - 64)) | (1 << (KELParser.SET - 64)) | (1 << (KELParser.ASOF - 64)) | (1 << (KELParser.USING - 64)) | (1 << (KELParser.VIS - 64)) | (1 << (KELParser.RESOURCES - 64)) | (1 << (KELParser.ENDRESOURCES - 64)) | (1 << (KELParser.DOUBLESTRING - 64)) | (1 << (KELParser.SID - 64)) | (1 << (KELParser.SINT - 64)) | (1 << (KELParser.PID - 64)) | (1 << (KELParser.PSID - 64)) | (1 << (KELParser.ID - 64)) | (1 << (KELParser.INT - 64)) | (1 << (KELParser.HEXINT - 64)) | (1 << (KELParser.BININT - 64)) | (1 << (KELParser.REAL - 64)) | (1 << (KELParser.STR - 64)) | (1 << (KELParser.TYPDCONST - 64)) | (1 << (KELParser.ESC - 64)) | (1 << (KELParser.SEP_COMMENT - 64)) | (1 << (KELParser.ML_COMMENT - 64)) | (1 << (KELParser.MLMS_COMMENT - 64)) | (1 << (KELParser.JAVADOC_OPEN - 64)) | (1 << (KELParser.EMPTY_JAVADOC - 64)) | (1 << (KELParser.NEWLINE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (KELParser.COMMENT - 96)) | (1 << (KELParser.WS - 96)) | (1 << (KELParser.BAD_BIN - 96)) | (1 << (KELParser.HEX_NO_X - 96)) | (1 << (KELParser.BAD_HEX - 96)) | (1 << (KELParser.BAD_MIX - 96)) | (1 << (KELParser.BAD_REAL_A - 96)) | (1 << (KELParser.BAD_REAL_B - 96)) | (1 << (KELParser.BAD_REAL_C - 96)) | (1 << (KELParser.ML_COMMENT_START - 96)) | (1 << (KELParser.MLMS_COMMENT_START - 96)) | (1 << (KELParser.JD_COMMENT_START - 96)))) !== 0)) {
	            this.state = 912;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===KELParser.ENDVIS) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 917;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 918;
	        this.match(KELParser.ENDVIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource_section() {
	    let localctx = new Resource_sectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, KELParser.RULE_resource_section);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 920;
	        this.match(KELParser.RESOURCES);
	        this.state = 924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KELParser.LP) | (1 << KELParser.RP) | (1 << KELParser.EQ) | (1 << KELParser.DQUOTE) | (1 << KELParser.LT) | (1 << KELParser.GT) | (1 << KELParser.DOT) | (1 << KELParser.COMMA) | (1 << KELParser.SEMI) | (1 << KELParser.COLON) | (1 << KELParser.LCURL) | (1 << KELParser.RCURL) | (1 << KELParser.LSQUARE) | (1 << KELParser.RSQUARE) | (1 << KELParser.STAR) | (1 << KELParser.SIGIL) | (1 << KELParser.AMP) | (1 << KELParser.TILDE) | (1 << KELParser.EXCLAIM) | (1 << KELParser.HYPHEN) | (1 << KELParser.MOD) | (1 << KELParser.PLUS) | (1 << KELParser.FSLASH) | (1 << KELParser.CARET) | (1 << KELParser.PIPE) | (1 << KELParser.DEFEQ) | (1 << KELParser.NEQ) | (1 << KELParser.LTGT) | (1 << KELParser.LARROW) | (1 << KELParser.RARROW) | (1 << KELParser.GTEQ))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (KELParser.LEQ - 32)) | (1 << (KELParser.NNEQ - 32)) | (1 << (KELParser.IN - 32)) | (1 << (KELParser.OR - 32)) | (1 << (KELParser.NOT - 32)) | (1 << (KELParser.AND - 32)) | (1 << (KELParser.ERA - 32)) | (1 << (KELParser.NULL - 32)) | (1 << (KELParser.DIV - 32)) | (1 << (KELParser.TRUE - 32)) | (1 << (KELParser.FALSE - 32)) | (1 << (KELParser.LINK - 32)) | (1 << (KELParser.ECL - 32)) | (1 << (KELParser.RETURNS - 32)) | (1 << (KELParser.OPTION - 32)) | (1 << (KELParser.PERMITS - 32)) | (1 << (KELParser.ENTITY - 32)) | (1 << (KELParser.ASSOCIATION - 32)) | (1 << (KELParser.IMPORT - 32)) | (1 << (KELParser.FROM - 32)) | (1 << (KELParser.PACKAGE - 32)) | (1 << (KELParser.END - 32)) | (1 << (KELParser.SHELL - 32)) | (1 << (KELParser.FLAT - 32)) | (1 << (KELParser.QUERY - 32)) | (1 << (KELParser.UID - 32)) | (1 << (KELParser.FORMAT - 32)) | (1 << (KELParser.MODEL - 32)) | (1 << (KELParser.USE - 32)) | (1 << (KELParser.KELBASE - 32)) | (1 << (KELParser.KELQUERY - 32)) | (1 << (KELParser.FDC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (KELParser.FILTER - 64)) | (1 << (KELParser.HINT - 64)) | (1 << (KELParser.GLOBAL - 64)) | (1 << (KELParser.FUNCTION - 64)) | (1 << (KELParser.DATASET - 64)) | (1 << (KELParser.OF - 64)) | (1 << (KELParser.SET - 64)) | (1 << (KELParser.ASOF - 64)) | (1 << (KELParser.USING - 64)) | (1 << (KELParser.VIS - 64)) | (1 << (KELParser.ENDVIS - 64)) | (1 << (KELParser.RESOURCES - 64)) | (1 << (KELParser.DOUBLESTRING - 64)) | (1 << (KELParser.SID - 64)) | (1 << (KELParser.SINT - 64)) | (1 << (KELParser.PID - 64)) | (1 << (KELParser.PSID - 64)) | (1 << (KELParser.ID - 64)) | (1 << (KELParser.INT - 64)) | (1 << (KELParser.HEXINT - 64)) | (1 << (KELParser.BININT - 64)) | (1 << (KELParser.REAL - 64)) | (1 << (KELParser.STR - 64)) | (1 << (KELParser.TYPDCONST - 64)) | (1 << (KELParser.ESC - 64)) | (1 << (KELParser.SEP_COMMENT - 64)) | (1 << (KELParser.ML_COMMENT - 64)) | (1 << (KELParser.MLMS_COMMENT - 64)) | (1 << (KELParser.JAVADOC_OPEN - 64)) | (1 << (KELParser.EMPTY_JAVADOC - 64)) | (1 << (KELParser.NEWLINE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (KELParser.COMMENT - 96)) | (1 << (KELParser.WS - 96)) | (1 << (KELParser.BAD_BIN - 96)) | (1 << (KELParser.HEX_NO_X - 96)) | (1 << (KELParser.BAD_HEX - 96)) | (1 << (KELParser.BAD_MIX - 96)) | (1 << (KELParser.BAD_REAL_A - 96)) | (1 << (KELParser.BAD_REAL_B - 96)) | (1 << (KELParser.BAD_REAL_C - 96)) | (1 << (KELParser.ML_COMMENT_START - 96)) | (1 << (KELParser.MLMS_COMMENT_START - 96)) | (1 << (KELParser.JD_COMMENT_START - 96)))) !== 0)) {
	            this.state = 921;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===KELParser.ENDRESOURCES) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 927;
	        this.match(KELParser.ENDRESOURCES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, KELParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        localctx.be = this.booleanDisjunction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanDisjunction() {
	    let localctx = new BooleanDisjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, KELParser.RULE_booleanDisjunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 931;
	        this.booleanConjunction();
	        this.state = 936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.OR) {
	            this.state = 932;
	            localctx.op = this.match(KELParser.OR);
	            this.state = 933;
	            this.booleanConjunction();
	            this.state = 938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanConjunction() {
	    let localctx = new BooleanConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, KELParser.RULE_booleanConjunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this.booleanTerm();
	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.AND) {
	            this.state = 940;
	            localctx.op = this.match(KELParser.AND);
	            this.state = 941;
	            this.booleanTerm();
	            this.state = 946;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanTerm() {
	    let localctx = new BooleanTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, KELParser.RULE_booleanTerm);
	    try {
	        this.state = 950;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.NOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 947;
	            localctx.op = this.match(KELParser.NOT);
	            this.state = 948;
	            localctx.t = this.booleanTerm();
	            break;
	        case KELParser.LP:
	        case KELParser.LCURL:
	        case KELParser.LSQUARE:
	        case KELParser.HYPHEN:
	        case KELParser.TRUE:
	        case KELParser.FALSE:
	        case KELParser.LINK:
	        case KELParser.UID:
	        case KELParser.MODEL:
	        case KELParser.SID:
	        case KELParser.SINT:
	        case KELParser.PID:
	        case KELParser.PSID:
	        case KELParser.ID:
	        case KELParser.INT:
	        case KELParser.HEXINT:
	        case KELParser.BININT:
	        case KELParser.REAL:
	        case KELParser.STR:
	        case KELParser.TYPDCONST:
	        case KELParser.BAD_BIN:
	        case KELParser.HEX_NO_X:
	        case KELParser.BAD_HEX:
	        case KELParser.BAD_MIX:
	        case KELParser.BAD_REAL_A:
	        case KELParser.BAD_REAL_B:
	        case KELParser.BAD_REAL_C:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 949;
	            localctx.a = this.booleanAtom();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanAtom() {
	    let localctx = new BooleanAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, KELParser.RULE_booleanAtom);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        localctx.e1 = this.valueExpression();
	        this.state = 955;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (KELParser.EQ - 3)) | (1 << (KELParser.LT - 3)) | (1 << (KELParser.GT - 3)) | (1 << (KELParser.NEQ - 3)) | (1 << (KELParser.LTGT - 3)) | (1 << (KELParser.LARROW - 3)) | (1 << (KELParser.GTEQ - 3)) | (1 << (KELParser.LEQ - 3)) | (1 << (KELParser.NNEQ - 3)) | (1 << (KELParser.IN - 3)))) !== 0)) {
	            this.state = 953;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 3)) & ~0x1f) == 0 && ((1 << (_la - 3)) & ((1 << (KELParser.EQ - 3)) | (1 << (KELParser.LT - 3)) | (1 << (KELParser.GT - 3)) | (1 << (KELParser.NEQ - 3)) | (1 << (KELParser.LTGT - 3)) | (1 << (KELParser.LARROW - 3)) | (1 << (KELParser.GTEQ - 3)) | (1 << (KELParser.LEQ - 3)) | (1 << (KELParser.NNEQ - 3)) | (1 << (KELParser.IN - 3)))) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 954;
	            localctx.e2 = this.valueExpression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueExpression() {
	    let localctx = new ValueExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, KELParser.RULE_valueExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 957;
	        localctx.l = this.valueTerm();
	        this.state = 962;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.HYPHEN || _la===KELParser.PLUS) {
	            this.state = 958;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===KELParser.HYPHEN || _la===KELParser.PLUS)) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 959;
	            localctx.r = this.valueTerm();
	            this.state = 964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueTerm() {
	    let localctx = new ValueTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, KELParser.RULE_valueTerm);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 965;
	        localctx.l = this.valueFactor();
	        this.state = 970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (KELParser.STAR - 15)) | (1 << (KELParser.MOD - 15)) | (1 << (KELParser.FSLASH - 15)) | (1 << (KELParser.DIV - 15)))) !== 0)) {
	            this.state = 966;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (KELParser.STAR - 15)) | (1 << (KELParser.MOD - 15)) | (1 << (KELParser.FSLASH - 15)) | (1 << (KELParser.DIV - 15)))) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 967;
	            localctx.r = this.valueFactor();
	            this.state = 972;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueFactor() {
	    let localctx = new ValueFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, KELParser.RULE_valueFactor);
	    var _la = 0; // Token type
	    try {
	        this.state = 1000;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UnaryValueFactorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 973;
	            localctx.op = this.match(KELParser.HYPHEN);
	            this.state = 974;
	            localctx.f = this.valueFactor();
	            break;

	        case 2:
	            localctx = new PropValueFactorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 975;
	            localctx.a = this.valueAtom();
	            this.state = 978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.COLON) {
	                this.state = 976;
	                localctx.op = this.match(KELParser.COLON);
	                this.state = 977;
	                localctx.tp = this.tableProperty();
	            }

	            break;

	        case 3:
	            localctx = new ScopedValueFactorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 980;
	            localctx.ref = this.qualifiedId();
	            this.state = 981;
	            this.match(KELParser.SIGIL);
	            this.state = 982;
	            localctx.se = this.scopeExpression();
	            break;

	        case 4:
	            localctx = new ConstValueFactorContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 984;
	            localctx.c = this.constant();
	            break;

	        case 5:
	            localctx = new NestedValueFactorContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 985;
	            this.match(KELParser.LP);
	            this.state = 986;
	            localctx.e = this.expression();
	            this.state = 987;
	            this.match(KELParser.RP);
	            break;

	        case 6:
	            localctx = new SetValueFactorContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 989;
	            this.match(KELParser.LSQUARE);
	            this.state = 990;
	            this.expression();
	            this.state = 995;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 991;
	                this.match(KELParser.COMMA);
	                this.state = 992;
	                this.expression();
	                this.state = 997;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 998;
	            this.match(KELParser.RSQUARE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueAtom() {
	    let localctx = new ValueAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, KELParser.RULE_valueAtom);
	    var _la = 0; // Token type
	    try {
	        this.state = 1013;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new QueryOpValueAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1002;
	            localctx.base = this.leadingId();
	            this.state = 1004; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1003;
	                localctx.qo = this.queryFuncOp();
	                this.state = 1006; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KELParser.LP) | (1 << KELParser.DOT) | (1 << KELParser.LCURL))) !== 0));
	            break;

	        case 2:
	            localctx = new ProjValueAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1008;
	            localctx.p = this.entityProjection();
	            break;

	        case 3:
	            localctx = new PatternModelAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1009;
	            localctx.m = this.patternModel();
	            break;

	        case 4:
	            localctx = new IdValueAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1010;
	            localctx.id = this.leadingId();
	            break;

	        case 5:
	            localctx = new AutoMatchValueAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1011;
	            localctx.sid = this.match(KELParser.SID);
	            break;

	        case 6:
	            localctx = new LinkAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1012;
	            this.linkExp();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryFuncOp() {
	    let localctx = new QueryFuncOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, KELParser.RULE_queryFuncOp);
	    try {
	        this.state = 1018;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.LP:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1015;
	            localctx.f = this.funcOrFilter();
	            break;
	        case KELParser.LCURL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1016;
	            localctx.p = this.entityProjection();
	            break;
	        case KELParser.DOT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1017;
	            localctx.fs = this.fieldSelector();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcOrFilter() {
	    let localctx = new FuncOrFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, KELParser.RULE_funcOrFilter);
	    var _la = 0; // Token type
	    try {
	        this.state = 1048;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1020;
	            this.match(KELParser.LP);
	            this.state = 1021;
	            this.match(KELParser.RP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1022;
	            this.match(KELParser.LP);
	            this.state = 1023;
	            localctx.p1 = this.pair();
	            this.state = 1028;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1024;
	                    localctx.op1 = this.match(KELParser.COMMA);
	                    this.state = 1025;
	                    localctx.p2 = this.pair(); 
	                }
	                this.state = 1030;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	            }

	            this.state = 1033;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.COMMA) {
	                this.state = 1031;
	                localctx.op2 = this.match(KELParser.COMMA);
	                this.state = 1032;
	                localctx.def = this.expression();
	            }

	            this.state = 1035;
	            this.match(KELParser.RP);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1037;
	            this.match(KELParser.LP);
	            this.state = 1038;
	            localctx.e1 = this.expression();
	            this.state = 1043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 1039;
	                localctx.op = this.match(KELParser.COMMA);
	                this.state = 1040;
	                localctx.e2 = this.expression();
	                this.state = 1045;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1046;
	            this.match(KELParser.RP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pair() {
	    let localctx = new PairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, KELParser.RULE_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1050;
	        localctx.test = this.expression();
	        this.state = 1051;
	        localctx.op = this.match(KELParser.RARROW);
	        this.state = 1052;
	        localctx.value = this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linkExp() {
	    let localctx = new LinkExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, KELParser.RULE_linkExp);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1054;
	        this.match(KELParser.LINK);
	        this.state = 1055;
	        this.match(KELParser.LP);
	        this.state = 1056;
	        localctx.start = this.expression();
	        this.state = 1057;
	        this.match(KELParser.COMMA);
	        this.state = 1058;
	        localctx.body = this.valueAtom();
	        this.state = 1060;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.LSQUARE) {
	            this.state = 1059;
	            this.linkSpec();
	        }

	        this.state = 1062;
	        this.linkDegree();
	        this.state = 1063;
	        this.match(KELParser.COMMA);
	        this.state = 1064;
	        localctx.end = this.expression();
	        this.state = 1065;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linkSpec() {
	    let localctx = new LinkSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, KELParser.RULE_linkSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1067;
	        this.match(KELParser.LSQUARE);
	        this.state = 1068;
	        localctx.from = this.propertyId();
	        this.state = 1069;
	        this.match(KELParser.COMMA);
	        this.state = 1070;
	        localctx.to = this.propertyId();
	        this.state = 1071;
	        this.match(KELParser.RSQUARE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linkDegree() {
	    let localctx = new LinkDegreeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, KELParser.RULE_linkDegree);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1073;
	        this.match(KELParser.STAR);
	        this.state = 1074;
	        this.match(KELParser.INT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityProjection() {
	    let localctx = new EntityProjectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, KELParser.RULE_entityProjection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1076;
	        localctx.b = this.match(KELParser.LCURL);
	        this.state = 1077;
	        localctx.e1 = this.namedExpression();
	        this.state = 1082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 1078;
	            this.match(KELParser.COMMA);
	            this.state = 1079;
	            localctx.e2 = this.namedExpression();
	            this.state = 1084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1085;
	        this.match(KELParser.RCURL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedExpression() {
	    let localctx = new NamedExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, KELParser.RULE_namedExpression);
	    try {
	        this.state = 1091;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1087;
	            localctx.n = this.match(KELParser.ID);
	            this.state = 1088;
	            this.match(KELParser.DEFEQ);
	            this.state = 1089;
	            localctx.ex = this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1090;
	            localctx.ex = this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternModel() {
	    let localctx = new PatternModelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, KELParser.RULE_patternModel);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1093;
	        this.match(KELParser.MODEL);
	        this.state = 1094;
	        this.match(KELParser.LP);
	        this.state = 1095;
	        this.patternSubmodel();
	        this.state = 1100;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 1096;
	            this.match(KELParser.COMMA);
	            this.state = 1097;
	            this.patternSubmodel();
	            this.state = 1102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1103;
	        this.match(KELParser.RP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patternSubmodel() {
	    let localctx = new PatternSubmodelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, KELParser.RULE_patternSubmodel);
	    var _la = 0; // Token type
	    try {
	        this.state = 1119;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.PID:
	            localctx = new SingleValuedPatternSubmodelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1105;
	            this.match(KELParser.PID);
	            break;
	        case KELParser.LCURL:
	        case KELParser.PSID:
	            localctx = new MultiValuedPatternSubmodelContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1107;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.PSID) {
	                this.state = 1106;
	                localctx.n = this.match(KELParser.PSID);
	            }

	            this.state = 1109;
	            this.match(KELParser.LCURL);
	            this.state = 1110;
	            this.match(KELParser.PID);
	            this.state = 1115;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===KELParser.COMMA) {
	                this.state = 1111;
	                this.match(KELParser.COMMA);
	                this.state = 1112;
	                this.match(KELParser.PID);
	                this.state = 1117;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1118;
	            this.match(KELParser.RCURL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldSelector() {
	    let localctx = new FieldSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, KELParser.RULE_fieldSelector);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1121;
	        this.match(KELParser.DOT);
	        this.state = 1122;
	        localctx.id = this.fieldId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scopeExpression() {
	    let localctx = new ScopeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, KELParser.RULE_scopeExpression);
	    try {
	        this.state = 1131;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelfScopeExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1124;
	            localctx.p = this.tableProperty();
	            break;

	        case 2:
	            localctx = new OuterScopeExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1125;
	            this.match(KELParser.CARET);
	            this.state = 1126;
	            localctx.p = this.tableProperty();
	            break;

	        case 3:
	            localctx = new ExplicitScopeExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1127;
	            localctx.se = this.valueAtom();
	            this.state = 1128;
	            this.match(KELParser.COLON);
	            this.state = 1129;
	            localctx.p = this.tableProperty();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableProperty() {
	    let localctx = new TablePropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, KELParser.RULE_tableProperty);
	    var _la = 0; // Token type
	    try {
	        this.state = 1143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1133;
	            localctx.id = this.tablePropId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1134;
	            localctx.id = this.tablePropId();
	            this.state = 1135;
	            this.match(KELParser.LP);
	            this.state = 1136;
	            localctx.v = this.expression();
	            this.state = 1139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===KELParser.COMMA) {
	                this.state = 1137;
	                this.match(KELParser.COMMA);
	                this.state = 1138;
	                localctx.w = this.expression();
	            }

	            this.state = 1141;
	            this.match(KELParser.RP);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_id() {
	    let localctx = new Func_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, KELParser.RULE_func_id);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.match(KELParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedId() {
	    let localctx = new QualifiedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, KELParser.RULE_qualifiedId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1147;
	        localctx.id1 = this.leadingId();
	        this.state = 1152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.DOT) {
	            this.state = 1148;
	            this.match(KELParser.DOT);
	            this.state = 1149;
	            localctx.id2 = this.fieldId();
	            this.state = 1154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leadingId() {
	    let localctx = new LeadingIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, KELParser.RULE_leadingId);
	    try {
	        this.state = 1160;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1155;
	            localctx.id = this.match(KELParser.ID);
	            break;
	        case KELParser.UID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1156;
	            localctx.id = this.match(KELParser.UID);
	            break;
	        case KELParser.SINT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1157;
	            localctx.id = this.match(KELParser.SINT);
	            break;
	        case KELParser.PID:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1158;
	            localctx.pid = this.match(KELParser.PID);
	            break;
	        case KELParser.PSID:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1159;
	            localctx.psid = this.match(KELParser.PSID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldId() {
	    let localctx = new FieldIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, KELParser.RULE_fieldId);
	    try {
	        this.state = 1166;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1162;
	            localctx.id = this.match(KELParser.ID);
	            break;
	        case KELParser.UID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1163;
	            localctx.id = this.match(KELParser.UID);
	            break;
	        case KELParser.PID:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1164;
	            localctx.id = this.match(KELParser.PID);
	            break;
	        case KELParser.PSID:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1165;
	            localctx.id = this.match(KELParser.PSID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePropId() {
	    let localctx = new TablePropIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, KELParser.RULE_tablePropId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1168;
	        localctx.id = this.match(KELParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyId() {
	    let localctx = new PropertyIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, KELParser.RULE_propertyId);
	    try {
	        this.state = 1172;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1170;
	            localctx.id = this.match(KELParser.ID);
	            break;
	        case KELParser.UID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1171;
	            localctx.id = this.match(KELParser.UID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, KELParser.RULE_constant);
	    try {
	        this.state = 1177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.HYPHEN:
	        case KELParser.TRUE:
	        case KELParser.FALSE:
	        case KELParser.INT:
	        case KELParser.HEXINT:
	        case KELParser.BININT:
	        case KELParser.REAL:
	        case KELParser.STR:
	        case KELParser.TYPDCONST:
	        case KELParser.BAD_BIN:
	        case KELParser.HEX_NO_X:
	        case KELParser.BAD_HEX:
	        case KELParser.BAD_MIX:
	        case KELParser.BAD_REAL_A:
	        case KELParser.BAD_REAL_B:
	        case KELParser.BAD_REAL_C:
	            localctx = new NonSetConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1174;
	            this.simpleConstant();
	            break;
	        case KELParser.LSQUARE:
	            localctx = new EmptySetConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1175;
	            this.match(KELParser.LSQUARE);
	            this.state = 1176;
	            this.match(KELParser.RSQUARE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleConstant() {
	    let localctx = new SimpleConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, KELParser.RULE_simpleConstant);
	    try {
	        this.state = 1185;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StringConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1179;
	            localctx.s = this.match(KELParser.STR);
	            break;

	        case 2:
	            localctx = new GeneralRealConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1180;
	            localctx.r = this.realConstant();
	            break;

	        case 3:
	            localctx = new TrueConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1181;
	            localctx.b = this.match(KELParser.TRUE);
	            break;

	        case 4:
	            localctx = new FalseConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1182;
	            localctx.b = this.match(KELParser.FALSE);
	            break;

	        case 5:
	            localctx = new TypedConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1183;
	            localctx.t = this.match(KELParser.TYPDCONST);
	            break;

	        case 6:
	            localctx = new GeneralIntConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1184;
	            localctx.i = this.intConstant();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intConstant() {
	    let localctx = new IntConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, KELParser.RULE_intConstant);
	    try {
	        this.state = 1196;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.INT:
	            localctx = new DecIntConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1187;
	            localctx.i = this.match(KELParser.INT);
	            break;
	        case KELParser.HYPHEN:
	            localctx = new NegIntConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1188;
	            this.match(KELParser.HYPHEN);
	            this.state = 1189;
	            localctx.i = this.match(KELParser.INT);
	            break;
	        case KELParser.HEXINT:
	            localctx = new HexConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1190;
	            localctx.i = this.match(KELParser.HEXINT);
	            break;
	        case KELParser.BININT:
	            localctx = new BinConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1191;
	            localctx.i = this.match(KELParser.BININT);
	            break;
	        case KELParser.BAD_HEX:
	            localctx = new BadHexConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1192;
	            localctx.i = this.match(KELParser.BAD_HEX);
	            break;
	        case KELParser.BAD_BIN:
	            localctx = new BadBinConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1193;
	            localctx.i = this.match(KELParser.BAD_BIN);
	            break;
	        case KELParser.HEX_NO_X:
	            localctx = new NoFlagHexConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1194;
	            localctx.i = this.match(KELParser.HEX_NO_X);
	            break;
	        case KELParser.BAD_MIX:
	            localctx = new BadMixConstantContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1195;
	            localctx.i = this.match(KELParser.BAD_MIX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realConstant() {
	    let localctx = new RealConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, KELParser.RULE_realConstant);
	    try {
	        this.state = 1204;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.REAL:
	            localctx = new RealConstContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1198;
	            localctx.r = this.match(KELParser.REAL);
	            break;
	        case KELParser.HYPHEN:
	            localctx = new RealConstContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1199;
	            this.match(KELParser.HYPHEN);
	            this.state = 1200;
	            localctx.r = this.match(KELParser.REAL);
	            break;
	        case KELParser.BAD_REAL_A:
	            localctx = new BadRealConstContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1201;
	            localctx.r = this.match(KELParser.BAD_REAL_A);
	            break;
	        case KELParser.BAD_REAL_B:
	            localctx = new BadRealConstContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1202;
	            localctx.r = this.match(KELParser.BAD_REAL_B);
	            break;
	        case KELParser.BAD_REAL_C:
	            localctx = new BadRealConstContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1203;
	            localctx.r = this.match(KELParser.BAD_REAL_C);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclExpression() {
	    let localctx = new EclExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, KELParser.RULE_eclExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1206;
	        this.match(KELParser.ECL);
	        this.state = 1207;
	        this.match(KELParser.LP);
	        this.state = 1208;
	        this.eclBody();
	        this.state = 1209;
	        this.match(KELParser.RP);
	        this.state = 1212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===KELParser.FROM) {
	            this.state = 1210;
	            this.match(KELParser.FROM);
	            this.state = 1211;
	            this.eclImportList();
	        }

	        this.state = 1214;
	        this.match(KELParser.RETURNS);
	        this.state = 1215;
	        this.returnTypeId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclBody() {
	    let localctx = new EclBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, KELParser.RULE_eclBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1218; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1217;
	        		this.eclFragment();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1220; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,125, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclFragment() {
	    let localctx = new EclFragmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, KELParser.RULE_eclFragment);
	    var _la = 0; // Token type
	    try {
	        this.state = 1235;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1222;
	            this.match(KELParser.LP);
	            this.state = 1226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << KELParser.LP) | (1 << KELParser.EQ) | (1 << KELParser.DQUOTE) | (1 << KELParser.LT) | (1 << KELParser.GT) | (1 << KELParser.DOT) | (1 << KELParser.COMMA) | (1 << KELParser.SEMI) | (1 << KELParser.COLON) | (1 << KELParser.LCURL) | (1 << KELParser.RCURL) | (1 << KELParser.LSQUARE) | (1 << KELParser.RSQUARE) | (1 << KELParser.STAR) | (1 << KELParser.SIGIL) | (1 << KELParser.AMP) | (1 << KELParser.TILDE) | (1 << KELParser.EXCLAIM) | (1 << KELParser.HYPHEN) | (1 << KELParser.MOD) | (1 << KELParser.PLUS) | (1 << KELParser.FSLASH) | (1 << KELParser.CARET) | (1 << KELParser.PIPE) | (1 << KELParser.DEFEQ) | (1 << KELParser.NEQ) | (1 << KELParser.LTGT) | (1 << KELParser.LARROW) | (1 << KELParser.RARROW) | (1 << KELParser.GTEQ))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (KELParser.LEQ - 32)) | (1 << (KELParser.NNEQ - 32)) | (1 << (KELParser.IN - 32)) | (1 << (KELParser.OR - 32)) | (1 << (KELParser.NOT - 32)) | (1 << (KELParser.AND - 32)) | (1 << (KELParser.ERA - 32)) | (1 << (KELParser.NULL - 32)) | (1 << (KELParser.DIV - 32)) | (1 << (KELParser.TRUE - 32)) | (1 << (KELParser.FALSE - 32)) | (1 << (KELParser.LINK - 32)) | (1 << (KELParser.ECL - 32)) | (1 << (KELParser.RETURNS - 32)) | (1 << (KELParser.OPTION - 32)) | (1 << (KELParser.PERMITS - 32)) | (1 << (KELParser.ENTITY - 32)) | (1 << (KELParser.ASSOCIATION - 32)) | (1 << (KELParser.IMPORT - 32)) | (1 << (KELParser.FROM - 32)) | (1 << (KELParser.PACKAGE - 32)) | (1 << (KELParser.END - 32)) | (1 << (KELParser.SHELL - 32)) | (1 << (KELParser.FLAT - 32)) | (1 << (KELParser.QUERY - 32)) | (1 << (KELParser.UID - 32)) | (1 << (KELParser.FORMAT - 32)) | (1 << (KELParser.MODEL - 32)) | (1 << (KELParser.USE - 32)) | (1 << (KELParser.KELBASE - 32)) | (1 << (KELParser.KELQUERY - 32)) | (1 << (KELParser.FDC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (KELParser.FILTER - 64)) | (1 << (KELParser.HINT - 64)) | (1 << (KELParser.GLOBAL - 64)) | (1 << (KELParser.FUNCTION - 64)) | (1 << (KELParser.DATASET - 64)) | (1 << (KELParser.OF - 64)) | (1 << (KELParser.SET - 64)) | (1 << (KELParser.ASOF - 64)) | (1 << (KELParser.USING - 64)) | (1 << (KELParser.VIS - 64)) | (1 << (KELParser.ENDVIS - 64)) | (1 << (KELParser.RESOURCES - 64)) | (1 << (KELParser.ENDRESOURCES - 64)) | (1 << (KELParser.DOUBLESTRING - 64)) | (1 << (KELParser.SID - 64)) | (1 << (KELParser.SINT - 64)) | (1 << (KELParser.PID - 64)) | (1 << (KELParser.PSID - 64)) | (1 << (KELParser.ID - 64)) | (1 << (KELParser.INT - 64)) | (1 << (KELParser.HEXINT - 64)) | (1 << (KELParser.BININT - 64)) | (1 << (KELParser.REAL - 64)) | (1 << (KELParser.STR - 64)) | (1 << (KELParser.TYPDCONST - 64)) | (1 << (KELParser.ESC - 64)) | (1 << (KELParser.SEP_COMMENT - 64)) | (1 << (KELParser.ML_COMMENT - 64)) | (1 << (KELParser.MLMS_COMMENT - 64)) | (1 << (KELParser.JAVADOC_OPEN - 64)) | (1 << (KELParser.EMPTY_JAVADOC - 64)) | (1 << (KELParser.NEWLINE - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (KELParser.COMMENT - 96)) | (1 << (KELParser.WS - 96)) | (1 << (KELParser.BAD_BIN - 96)) | (1 << (KELParser.HEX_NO_X - 96)) | (1 << (KELParser.BAD_HEX - 96)) | (1 << (KELParser.BAD_MIX - 96)) | (1 << (KELParser.BAD_REAL_A - 96)) | (1 << (KELParser.BAD_REAL_B - 96)) | (1 << (KELParser.BAD_REAL_C - 96)) | (1 << (KELParser.ML_COMMENT_START - 96)) | (1 << (KELParser.MLMS_COMMENT_START - 96)) | (1 << (KELParser.JD_COMMENT_START - 96)))) !== 0)) {
	                this.state = 1223;
	                this.eclBody();
	                this.state = 1228;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1229;
	            this.match(KELParser.RP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1230;
	            _la = this._input.LA(1);
	            if(_la<=0 || _la===KELParser.LP || _la===KELParser.RP) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1231;
	            this.match(KELParser.EXCLAIM);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1232;
	            this.match(KELParser.TILDE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1233;
	            this.match(KELParser.AMP);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1234;
	            this.match(KELParser.PIPE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclImportList() {
	    let localctx = new EclImportListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, KELParser.RULE_eclImportList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1237;
	        this.eclImportItem();
	        this.state = 1242;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===KELParser.COMMA) {
	            this.state = 1238;
	            this.match(KELParser.COMMA);
	            this.state = 1239;
	            this.eclImportItem();
	            this.state = 1244;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclImportItem() {
	    let localctx = new EclImportItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, KELParser.RULE_eclImportItem);
	    try {
	        this.state = 1247;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1245;
	            this.dotId();
	            break;
	        case KELParser.SIGIL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1246;
	            this.match(KELParser.SIGIL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnTypeId() {
	    let localctx = new ReturnTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, KELParser.RULE_returnTypeId);
	    try {
	        this.state = 1253;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case KELParser.UID:
	        case KELParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1249;
	            localctx.simple = this.simpleTypeId();
	            break;
	        case KELParser.SET:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1250;
	            localctx.isSet = this.match(KELParser.SET);
	            this.state = 1251;
	            this.match(KELParser.OF);
	            this.state = 1252;
	            localctx.simple = this.simpleTypeId();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

KELParser.EOF = antlr4.Token.EOF;
KELParser.LP = 1;
KELParser.RP = 2;
KELParser.EQ = 3;
KELParser.DQUOTE = 4;
KELParser.LT = 5;
KELParser.GT = 6;
KELParser.DOT = 7;
KELParser.COMMA = 8;
KELParser.SEMI = 9;
KELParser.COLON = 10;
KELParser.LCURL = 11;
KELParser.RCURL = 12;
KELParser.LSQUARE = 13;
KELParser.RSQUARE = 14;
KELParser.STAR = 15;
KELParser.SIGIL = 16;
KELParser.AMP = 17;
KELParser.TILDE = 18;
KELParser.EXCLAIM = 19;
KELParser.HYPHEN = 20;
KELParser.MOD = 21;
KELParser.PLUS = 22;
KELParser.FSLASH = 23;
KELParser.CARET = 24;
KELParser.PIPE = 25;
KELParser.DEFEQ = 26;
KELParser.NEQ = 27;
KELParser.LTGT = 28;
KELParser.LARROW = 29;
KELParser.RARROW = 30;
KELParser.GTEQ = 31;
KELParser.LEQ = 32;
KELParser.NNEQ = 33;
KELParser.IN = 34;
KELParser.OR = 35;
KELParser.NOT = 36;
KELParser.AND = 37;
KELParser.ERA = 38;
KELParser.NULL = 39;
KELParser.DIV = 40;
KELParser.TRUE = 41;
KELParser.FALSE = 42;
KELParser.LINK = 43;
KELParser.ECL = 44;
KELParser.RETURNS = 45;
KELParser.OPTION = 46;
KELParser.PERMITS = 47;
KELParser.ENTITY = 48;
KELParser.ASSOCIATION = 49;
KELParser.IMPORT = 50;
KELParser.FROM = 51;
KELParser.PACKAGE = 52;
KELParser.END = 53;
KELParser.SHELL = 54;
KELParser.FLAT = 55;
KELParser.QUERY = 56;
KELParser.UID = 57;
KELParser.FORMAT = 58;
KELParser.MODEL = 59;
KELParser.USE = 60;
KELParser.KELBASE = 61;
KELParser.KELQUERY = 62;
KELParser.FDC = 63;
KELParser.FILTER = 64;
KELParser.HINT = 65;
KELParser.GLOBAL = 66;
KELParser.FUNCTION = 67;
KELParser.DATASET = 68;
KELParser.OF = 69;
KELParser.SET = 70;
KELParser.ASOF = 71;
KELParser.USING = 72;
KELParser.VIS = 73;
KELParser.ENDVIS = 74;
KELParser.RESOURCES = 75;
KELParser.ENDRESOURCES = 76;
KELParser.DOUBLESTRING = 77;
KELParser.SID = 78;
KELParser.SINT = 79;
KELParser.PID = 80;
KELParser.PSID = 81;
KELParser.ID = 82;
KELParser.INT = 83;
KELParser.HEXINT = 84;
KELParser.BININT = 85;
KELParser.REAL = 86;
KELParser.STR = 87;
KELParser.TYPDCONST = 88;
KELParser.ESC = 89;
KELParser.SEP_COMMENT = 90;
KELParser.ML_COMMENT = 91;
KELParser.MLMS_COMMENT = 92;
KELParser.JAVADOC_OPEN = 93;
KELParser.EMPTY_JAVADOC = 94;
KELParser.NEWLINE = 95;
KELParser.COMMENT = 96;
KELParser.WS = 97;
KELParser.BAD_BIN = 98;
KELParser.HEX_NO_X = 99;
KELParser.BAD_HEX = 100;
KELParser.BAD_MIX = 101;
KELParser.BAD_REAL_A = 102;
KELParser.BAD_REAL_B = 103;
KELParser.BAD_REAL_C = 104;
KELParser.ML_COMMENT_START = 105;
KELParser.MLMS_COMMENT_START = 106;
KELParser.JD_COMMENT_START = 107;

KELParser.RULE_program = 0;
KELParser.RULE_annotation = 1;
KELParser.RULE_statement = 2;
KELParser.RULE_option = 3;
KELParser.RULE_eraDeclaration = 4;
KELParser.RULE_epoch = 5;
KELParser.RULE_permitsDeclaration = 6;
KELParser.RULE_permit = 7;
KELParser.RULE_importStatement = 8;
KELParser.RULE_inlinePackage = 9;
KELParser.RULE_outoflinePackage = 10;
KELParser.RULE_packageDeclaration = 11;
KELParser.RULE_packageStatement = 12;
KELParser.RULE_packageExportDeclaration = 13;
KELParser.RULE_entityDeclaration = 14;
KELParser.RULE_entityProperty = 15;
KELParser.RULE_fieldMapping = 16;
KELParser.RULE_fileType = 17;
KELParser.RULE_mappingElement = 18;
KELParser.RULE_nullSpec = 19;
KELParser.RULE_formatSpec = 20;
KELParser.RULE_compositeIdSpec = 21;
KELParser.RULE_modelDeclaration = 22;
KELParser.RULE_submodelDeclaration = 23;
KELParser.RULE_submodelId = 24;
KELParser.RULE_useDeclaration = 25;
KELParser.RULE_useKelBaseDeclaration = 26;
KELParser.RULE_useKelQueryDeclaration = 27;
KELParser.RULE_useElement = 28;
KELParser.RULE_useFileType = 29;
KELParser.RULE_useClause = 30;
KELParser.RULE_useClauseElement = 31;
KELParser.RULE_useClauseFileType = 32;
KELParser.RULE_nestedEntityMapping = 33;
KELParser.RULE_entityMapping = 34;
KELParser.RULE_useMappingOverride = 35;
KELParser.RULE_dotId = 36;
KELParser.RULE_permitsClause = 37;
KELParser.RULE_permitsSpec = 38;
KELParser.RULE_hintsClause = 39;
KELParser.RULE_logicStatement = 40;
KELParser.RULE_logicPredicate = 41;
KELParser.RULE_logicProductions = 42;
KELParser.RULE_logicProduction = 43;
KELParser.RULE_entityProductions = 44;
KELParser.RULE_entityProduction = 45;
KELParser.RULE_functionStatement = 46;
KELParser.RULE_fparams = 47;
KELParser.RULE_fparam = 48;
KELParser.RULE_functionBody = 49;
KELParser.RULE_queryDeclaration = 50;
KELParser.RULE_qparams = 51;
KELParser.RULE_qparam = 52;
KELParser.RULE_paramTypeId = 53;
KELParser.RULE_simpleTypeId = 54;
KELParser.RULE_asof = 55;
KELParser.RULE_using = 56;
KELParser.RULE_shellDeclaration = 57;
KELParser.RULE_visual_section = 58;
KELParser.RULE_resource_section = 59;
KELParser.RULE_expression = 60;
KELParser.RULE_booleanDisjunction = 61;
KELParser.RULE_booleanConjunction = 62;
KELParser.RULE_booleanTerm = 63;
KELParser.RULE_booleanAtom = 64;
KELParser.RULE_valueExpression = 65;
KELParser.RULE_valueTerm = 66;
KELParser.RULE_valueFactor = 67;
KELParser.RULE_valueAtom = 68;
KELParser.RULE_queryFuncOp = 69;
KELParser.RULE_funcOrFilter = 70;
KELParser.RULE_pair = 71;
KELParser.RULE_linkExp = 72;
KELParser.RULE_linkSpec = 73;
KELParser.RULE_linkDegree = 74;
KELParser.RULE_entityProjection = 75;
KELParser.RULE_namedExpression = 76;
KELParser.RULE_patternModel = 77;
KELParser.RULE_patternSubmodel = 78;
KELParser.RULE_fieldSelector = 79;
KELParser.RULE_scopeExpression = 80;
KELParser.RULE_tableProperty = 81;
KELParser.RULE_func_id = 82;
KELParser.RULE_qualifiedId = 83;
KELParser.RULE_leadingId = 84;
KELParser.RULE_fieldId = 85;
KELParser.RULE_tablePropId = 86;
KELParser.RULE_propertyId = 87;
KELParser.RULE_constant = 88;
KELParser.RULE_simpleConstant = 89;
KELParser.RULE_intConstant = 90;
KELParser.RULE_realConstant = 91;
KELParser.RULE_eclExpression = 92;
KELParser.RULE_eclBody = 93;
KELParser.RULE_eclFragment = 94;
KELParser.RULE_eclImportList = 95;
KELParser.RULE_eclImportItem = 96;
KELParser.RULE_returnTypeId = 97;

class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_program;
    }

	EOF() {
	    return this.getToken(KELParser.EOF, 0);
	};

	option = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OptionContext);
	    } else {
	        return this.getTypedRuleContext(OptionContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.SEMI);
	    } else {
	        return this.getToken(KELParser.SEMI, i);
	    }
	};


	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	visual_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Visual_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Visual_sectionContext,i);
	    }
	};

	resource_section = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Resource_sectionContext);
	    } else {
	        return this.getTypedRuleContext(Resource_sectionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_annotation;
    }

	eraDeclaration() {
	    return this.getTypedRuleContext(EraDeclarationContext,0);
	};

	permitsDeclaration() {
	    return this.getTypedRuleContext(PermitsDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_statement;
    }

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	inlinePackage() {
	    return this.getTypedRuleContext(InlinePackageContext,0);
	};

	entityDeclaration() {
	    return this.getTypedRuleContext(EntityDeclarationContext,0);
	};

	useDeclaration() {
	    return this.getTypedRuleContext(UseDeclarationContext,0);
	};

	useKelBaseDeclaration() {
	    return this.getTypedRuleContext(UseKelBaseDeclarationContext,0);
	};

	useKelQueryDeclaration() {
	    return this.getTypedRuleContext(UseKelQueryDeclarationContext,0);
	};

	logicStatement() {
	    return this.getTypedRuleContext(LogicStatementContext,0);
	};

	functionStatement() {
	    return this.getTypedRuleContext(FunctionStatementContext,0);
	};

	queryDeclaration() {
	    return this.getTypedRuleContext(QueryDeclarationContext,0);
	};

	shellDeclaration() {
	    return this.getTypedRuleContext(ShellDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_option;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OptionStrContext extends OptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        this.value = null; // Token;
        super.copyFrom(ctx);
    }

	OPTION() {
	    return this.getToken(KELParser.OPTION, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	COMMA() {
	    return this.getToken(KELParser.COMMA, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	STR() {
	    return this.getToken(KELParser.STR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterOptionStr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitOptionStr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitOptionStr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.OptionStrContext = OptionStrContext;

class OptionIntContext extends OptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        this.value = null; // Token;
        super.copyFrom(ctx);
    }

	OPTION() {
	    return this.getToken(KELParser.OPTION, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	COMMA() {
	    return this.getToken(KELParser.COMMA, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	INT() {
	    return this.getToken(KELParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterOptionInt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitOptionInt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitOptionInt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.OptionIntContext = OptionIntContext;

class OptionBoolContext extends OptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	OPTION() {
	    return this.getToken(KELParser.OPTION, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterOptionBool(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitOptionBool(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitOptionBool(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.OptionBoolContext = OptionBoolContext;

class EraDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_eraDeclaration;
        this.name = null; // Token
        this.type = null; // Token
    }

	ERA() {
	    return this.getToken(KELParser.ERA, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	epoch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EpochContext);
	    } else {
	        return this.getTypedRuleContext(EpochContext,i);
	    }
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEraDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEraDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEraDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EpochContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_epoch;
        this.name = null; // Token
        this.nulltype = null; // Token
        this.sw = null; // Token
    }

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	EQ() {
	    return this.getToken(KELParser.EQ, 0);
	};

	NULL() {
	    return this.getToken(KELParser.NULL, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEpoch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEpoch(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEpoch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PermitsDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_permitsDeclaration;
    }

	PERMITS() {
	    return this.getToken(KELParser.PERMITS, 0);
	};

	permit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PermitContext);
	    } else {
	        return this.getTypedRuleContext(PermitContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPermitsDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPermitsDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPermitsDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PermitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_permit;
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPermit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPermit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPermit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_importStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PackageImportContext extends ImportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMPORT() {
	    return this.getToken(KELParser.IMPORT, 0);
	};

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	FROM() {
	    return this.getToken(KELParser.FROM, 0);
	};

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPackageImport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPackageImport(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPackageImport(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.PackageImportContext = PackageImportContext;

class SimpleImportContext extends ImportStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMPORT() {
	    return this.getToken(KELParser.IMPORT, 0);
	};

	dotId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DotIdContext);
	    } else {
	        return this.getTypedRuleContext(DotIdContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterSimpleImport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitSimpleImport(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitSimpleImport(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.SimpleImportContext = SimpleImportContext;

class InlinePackageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_inlinePackage;
    }

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterInlinePackage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitInlinePackage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitInlinePackage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OutoflinePackageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_outoflinePackage;
    }

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(KELParser.SEMI, 0);
	};

	EOF() {
	    return this.getToken(KELParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterOutoflinePackage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitOutoflinePackage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitOutoflinePackage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_packageDeclaration;
    }

	PACKAGE() {
	    return this.getToken(KELParser.PACKAGE, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.SEMI);
	    } else {
	        return this.getToken(KELParser.SEMI, i);
	    }
	};


	END() {
	    return this.getToken(KELParser.END, 0);
	};

	packageStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PackageStatementContext);
	    } else {
	        return this.getTypedRuleContext(PackageStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPackageDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPackageDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_packageStatement;
    }

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	entityDeclaration() {
	    return this.getTypedRuleContext(EntityDeclarationContext,0);
	};

	useDeclaration() {
	    return this.getTypedRuleContext(UseDeclarationContext,0);
	};

	logicStatement() {
	    return this.getTypedRuleContext(LogicStatementContext,0);
	};

	functionStatement() {
	    return this.getTypedRuleContext(FunctionStatementContext,0);
	};

	packageExportDeclaration() {
	    return this.getTypedRuleContext(PackageExportDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPackageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPackageStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPackageStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageExportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_packageExportDeclaration;
        this.name = null; // Token
    }

	SHELL() {
	    return this.getToken(KELParser.SHELL, 0);
	};

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	LARROW() {
	    return this.getToken(KELParser.LARROW, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPackageExportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPackageExportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPackageExportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_entityDeclaration;
        this.t = null; // Token
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	DEFEQ() {
	    return this.getToken(KELParser.DEFEQ, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	entityProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityPropertyContext);
	    } else {
	        return this.getTypedRuleContext(EntityPropertyContext,i);
	    }
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ENTITY() {
	    return this.getToken(KELParser.ENTITY, 0);
	};

	ASSOCIATION() {
	    return this.getToken(KELParser.ASSOCIATION, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEntityDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEntityDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEntityDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_entityProperty;
        this.fm = null; // FieldMappingContext
        this.m = null; // ModelDeclarationContext
    }

	fieldMapping() {
	    return this.getTypedRuleContext(FieldMappingContext,0);
	};

	modelDeclaration() {
	    return this.getTypedRuleContext(ModelDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEntityProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEntityProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEntityProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldMappingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_fieldMapping;
        this.m = null; // MappingElementContext
    }

	fileType() {
	    return this.getTypedRuleContext(FileTypeContext,0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	mappingElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MappingElementContext);
	    } else {
	        return this.getTypedRuleContext(MappingElementContext,i);
	    }
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFieldMapping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFieldMapping(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFieldMapping(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_fileType;
    }

	FLAT() {
	    return this.getToken(KELParser.FLAT, 0);
	};

	QUERY() {
	    return this.getToken(KELParser.QUERY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFileType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFileType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFileType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MappingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_mappingElement;
        this.t = null; // Token
        this.i = null; // Token
        this.nspec = null; // NullSpecContext
        this.fspec = null; // FormatSpecContext
        this.from = null; // DotIdContext
        this.c = null; // CompositeIdSpecContext
        this.u = null; // Token
    }

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	EQ() {
	    return this.getToken(KELParser.EQ, 0);
	};

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	nullSpec() {
	    return this.getTypedRuleContext(NullSpecContext,0);
	};

	formatSpec() {
	    return this.getTypedRuleContext(FormatSpecContext,0);
	};

	UID() {
	    return this.getToken(KELParser.UID, 0);
	};

	compositeIdSpec() {
	    return this.getTypedRuleContext(CompositeIdSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterMappingElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitMappingElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitMappingElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_nullSpec;
        this.c = null; // SimpleConstantContext
    }

	NULL() {
	    return this.getToken(KELParser.NULL, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	simpleConstant() {
	    return this.getTypedRuleContext(SimpleConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterNullSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitNullSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitNullSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormatSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_formatSpec;
    }

	FORMAT() {
	    return this.getToken(KELParser.FORMAT, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	simpleConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleConstantContext);
	    } else {
	        return this.getTypedRuleContext(SimpleConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFormatSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFormatSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFormatSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompositeIdSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_compositeIdSpec;
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	dotId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DotIdContext);
	    } else {
	        return this.getTypedRuleContext(DotIdContext,i);
	    }
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterCompositeIdSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitCompositeIdSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitCompositeIdSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModelDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_modelDeclaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ComplexModelContext extends ModelDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.md = null; // Token;
        super.copyFrom(ctx);
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	submodelDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubmodelDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(SubmodelDeclarationContext,i);
	    }
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	MODEL() {
	    return this.getToken(KELParser.MODEL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterComplexModel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitComplexModel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitComplexModel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ComplexModelContext = ComplexModelContext;

class SingleRowModelContext extends ModelDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.md = null; // Token;
        super.copyFrom(ctx);
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	STAR() {
	    return this.getToken(KELParser.STAR, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	MODEL() {
	    return this.getToken(KELParser.MODEL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterSingleRowModel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitSingleRowModel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitSingleRowModel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.SingleRowModelContext = SingleRowModelContext;

class SubmodelDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_submodelDeclaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplicitSubModelContext extends SubmodelDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.n = null; // Token;
        this.b = null; // Token;
        super.copyFrom(ctx);
    }

	submodelId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubmodelIdContext);
	    } else {
	        return this.getTypedRuleContext(SubmodelIdContext,i);
	    }
	};

	RCURL() {
	    return this.getToken(KELParser.RCURL, 0);
	};

	LCURL() {
	    return this.getToken(KELParser.LCURL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterExplicitSubModel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitExplicitSubModel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitExplicitSubModel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ExplicitSubModelContext = ExplicitSubModelContext;

class SingleValueSubModelContext extends SubmodelDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	UID() {
	    return this.getToken(KELParser.UID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterSingleValueSubModel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitSingleValueSubModel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitSingleValueSubModel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.SingleValueSubModelContext = SingleValueSubModelContext;

class RemainderSubModelContext extends SubmodelDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        this.b = null; // Token;
        super.copyFrom(ctx);
    }

	STAR() {
	    return this.getToken(KELParser.STAR, 0);
	};

	RCURL() {
	    return this.getToken(KELParser.RCURL, 0);
	};

	LCURL() {
	    return this.getToken(KELParser.LCURL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterRemainderSubModel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitRemainderSubModel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitRemainderSubModel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.RemainderSubModelContext = RemainderSubModelContext;

class SubmodelIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_submodelId;
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	UID() {
	    return this.getToken(KELParser.UID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterSubmodelId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitSubmodelId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitSubmodelId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useDeclaration;
    }

	USE() {
	    return this.getToken(KELParser.USE, 0);
	};

	useElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UseElementContext);
	    } else {
	        return this.getTypedRuleContext(UseElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUseDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUseDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUseDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseKelBaseDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useKelBaseDeclaration;
        this.attr = null; // DotIdContext
    }

	USE() {
	    return this.getToken(KELParser.USE, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	KELBASE() {
	    return this.getToken(KELParser.KELBASE, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUseKelBaseDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUseKelBaseDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUseKelBaseDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseKelQueryDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useKelQueryDeclaration;
        this.attr = null; // DotIdContext
    }

	USE() {
	    return this.getToken(KELParser.USE, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	KELQUERY() {
	    return this.getToken(KELParser.KELQUERY, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUseKelQueryDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUseKelQueryDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUseKelQueryDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useElement;
        this.attr = null; // DotIdContext
        this.t = null; // UseFileTypeContext
        this.ne = null; // NestedEntityMappingContext
        this.e = null; // EntityMappingContext
        this.p = null; // PermitsClauseContext
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	useFileType() {
	    return this.getTypedRuleContext(UseFileTypeContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	hintsClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HintsClauseContext);
	    } else {
	        return this.getTypedRuleContext(HintsClauseContext,i);
	    }
	};

	nestedEntityMapping = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NestedEntityMappingContext);
	    } else {
	        return this.getTypedRuleContext(NestedEntityMappingContext,i);
	    }
	};

	entityMapping = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityMappingContext);
	    } else {
	        return this.getTypedRuleContext(EntityMappingContext,i);
	    }
	};

	permitsClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PermitsClauseContext);
	    } else {
	        return this.getTypedRuleContext(PermitsClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUseElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUseElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUseElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseFileTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useFileType;
    }

	FLAT() {
	    return this.getToken(KELParser.FLAT, 0);
	};

	FDC() {
	    return this.getToken(KELParser.FDC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUseFileType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUseFileType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUseFileType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useClause;
    }

	USE() {
	    return this.getToken(KELParser.USE, 0);
	};

	useClauseElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UseClauseElementContext);
	    } else {
	        return this.getTypedRuleContext(UseClauseElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseClauseElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useClauseElement;
        this.attr = null; // Token
        this.t = null; // UseClauseFileTypeContext
        this.e = null; // EntityMappingContext
        this.p = null; // PermitsClauseContext
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	useClauseFileType() {
	    return this.getTypedRuleContext(UseClauseFileTypeContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	entityMapping = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityMappingContext);
	    } else {
	        return this.getTypedRuleContext(EntityMappingContext,i);
	    }
	};

	permitsClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PermitsClauseContext);
	    } else {
	        return this.getTypedRuleContext(PermitsClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUseClauseElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUseClauseElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUseClauseElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseClauseFileTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useClauseFileType;
    }

	FLAT() {
	    return this.getToken(KELParser.FLAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUseClauseFileType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUseClauseFileType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUseClauseFileType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedEntityMappingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_nestedEntityMapping;
        this.child = null; // Token
        this.e1 = null; // EntityMappingContext
        this.p1 = null; // PermitsClauseContext
        this.e2 = null; // EntityMappingContext
        this.p2 = null; // PermitsClauseContext
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	entityMapping = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityMappingContext);
	    } else {
	        return this.getTypedRuleContext(EntityMappingContext,i);
	    }
	};

	permitsClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PermitsClauseContext);
	    } else {
	        return this.getTypedRuleContext(PermitsClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterNestedEntityMapping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitNestedEntityMapping(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitNestedEntityMapping(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityMappingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_entityMapping;
        this.e = null; // Token
        this.p = null; // Token
        this.f = null; // EclBodyContext
    }

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	LP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.LP);
	    } else {
	        return this.getToken(KELParser.LP, i);
	    }
	};


	useMappingOverride = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UseMappingOverrideContext);
	    } else {
	        return this.getTypedRuleContext(UseMappingOverrideContext,i);
	    }
	};

	RP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.RP);
	    } else {
	        return this.getToken(KELParser.RP, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(KELParser.STAR, 0);
	};

	FILTER() {
	    return this.getToken(KELParser.FILTER, 0);
	};

	eclBody() {
	    return this.getTypedRuleContext(EclBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEntityMapping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEntityMapping(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEntityMapping(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseMappingOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_useMappingOverride;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NormalMappingOverrideContext extends UseMappingOverrideContext {

    constructor(parser, ctx) {
        super(parser);
        this.ef = null; // Token;
        this.from = null; // DotIdContext;
        this.nspec = null; // NullSpecContext;
        this.fspec = null; // FormatSpecContext;
        super.copyFrom(ctx);
    }

	EQ() {
	    return this.getToken(KELParser.EQ, 0);
	};

	UID() {
	    return this.getToken(KELParser.UID, 0);
	};

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	nullSpec() {
	    return this.getTypedRuleContext(NullSpecContext,0);
	};

	formatSpec() {
	    return this.getTypedRuleContext(FormatSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterNormalMappingOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitNormalMappingOverride(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitNormalMappingOverride(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.NormalMappingOverrideContext = NormalMappingOverrideContext;

class ConstantMappingOverrideContext extends UseMappingOverrideContext {

    constructor(parser, ctx) {
        super(parser);
        this.ef = null; // Token;
        this.c = null; // SimpleConstantContext;
        super.copyFrom(ctx);
    }

	EQ() {
	    return this.getToken(KELParser.EQ, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	simpleConstant() {
	    return this.getTypedRuleContext(SimpleConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterConstantMappingOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitConstantMappingOverride(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitConstantMappingOverride(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ConstantMappingOverrideContext = ConstantMappingOverrideContext;

class DotIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_dotId;
    }

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.DOT);
	    } else {
	        return this.getToken(KELParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterDotId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitDotId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitDotId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PermitsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_permitsClause;
    }

	PERMITS() {
	    return this.getToken(KELParser.PERMITS, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	permitsSpec() {
	    return this.getTypedRuleContext(PermitsSpecContext,0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPermitsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPermitsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPermitsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PermitsSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_permitsSpec;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConstantPermitsContext extends PermitsSpecContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LSQUARE() {
	    return this.getToken(KELParser.LSQUARE, 0);
	};

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	RSQUARE() {
	    return this.getToken(KELParser.RSQUARE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterConstantPermits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitConstantPermits(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitConstantPermits(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ConstantPermitsContext = ConstantPermitsContext;

class VariablePermitsContext extends PermitsSpecContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterVariablePermits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitVariablePermits(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitVariablePermits(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.VariablePermitsContext = VariablePermitsContext;

class HintsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_hintsClause;
    }

	HINT() {
	    return this.getToken(KELParser.HINT, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterHintsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitHintsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitHintsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_logicStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConstantDeclStatementContext extends LogicStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // Token;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	logicProductions() {
	    return this.getTypedRuleContext(LogicProductionsContext,0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterConstantDeclStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitConstantDeclStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitConstantDeclStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ConstantDeclStatementContext = ConstantDeclStatementContext;

class LogicPropertyStatementContext extends LogicStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // Token;
        this.p = null; // LogicPredicateContext;
        this.mvp = null; // Token;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	RARROW() {
	    return this.getToken(KELParser.RARROW, 0);
	};

	logicProductions() {
	    return this.getTypedRuleContext(LogicProductionsContext,0);
	};

	ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ID);
	    } else {
	        return this.getToken(KELParser.ID, i);
	    }
	};


	logicPredicate() {
	    return this.getTypedRuleContext(LogicPredicateContext,0);
	};

	DOT() {
	    return this.getToken(KELParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLogicPropertyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLogicPropertyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLogicPropertyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.LogicPropertyStatementContext = LogicPropertyStatementContext;

class EntityGeneratorStatementContext extends LogicStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // LogicPredicateContext;
        super.copyFrom(ctx);
    }

	GLOBAL() {
	    return this.getToken(KELParser.GLOBAL, 0);
	};

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	RARROW() {
	    return this.getToken(KELParser.RARROW, 0);
	};

	entityProductions() {
	    return this.getTypedRuleContext(EntityProductionsContext,0);
	};

	logicPredicate() {
	    return this.getTypedRuleContext(LogicPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEntityGeneratorStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEntityGeneratorStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEntityGeneratorStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.EntityGeneratorStatementContext = EntityGeneratorStatementContext;

class LogicPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_logicPredicate;
        this.ex1 = null; // ExpressionContext
        this.ex2 = null; // ExpressionContext
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLogicPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLogicPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLogicPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicProductionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_logicProductions;
    }

	logicProduction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicProductionContext);
	    } else {
	        return this.getTypedRuleContext(LogicProductionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLogicProductions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLogicProductions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLogicProductions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_logicProduction;
        this.name = null; // Token
        this.ex = null; // ExpressionContext
    }

	DEFEQ() {
	    return this.getToken(KELParser.DEFEQ, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLogicProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLogicProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLogicProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityProductionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_entityProductions;
    }

	entityProduction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityProductionContext);
	    } else {
	        return this.getTypedRuleContext(EntityProductionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEntityProductions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEntityProductions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEntityProductions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_entityProduction;
        this.name = null; // Token
        this.e1 = null; // ExpressionContext
        this.op = null; // Token
        this.e2 = null; // ExpressionContext
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEntityProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEntityProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEntityProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_functionStatement;
        this.name = null; // Token
        this.ps = null; // FparamsContext
    }

	FUNCTION() {
	    return this.getToken(KELParser.FUNCTION, 0);
	};

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	LARROW() {
	    return this.getToken(KELParser.LARROW, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	fparams() {
	    return this.getTypedRuleContext(FparamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFunctionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFunctionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FparamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_fparams;
        this.q1 = null; // FparamContext
        this.q2 = null; // FparamContext
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	fparam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FparamContext);
	    } else {
	        return this.getTypedRuleContext(FparamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFparams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFparams(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFparams(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FparamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_fparam;
        this.pt = null; // ParamTypeIdContext
        this.id = null; // Token
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	paramTypeId() {
	    return this.getTypedRuleContext(ParamTypeIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFparam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFparam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFparam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_functionBody;
        this.kel = null; // ExpressionContext
        this.ecl = null; // EclExpressionContext
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	eclExpression() {
	    return this.getTypedRuleContext(EclExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_queryDeclaration;
        this.name = null; // Token
        this.ps = null; // QparamsContext
    }

	QUERY() {
	    return this.getToken(KELParser.QUERY, 0);
	};

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	LARROW() {
	    return this.getToken(KELParser.LARROW, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	asof = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AsofContext);
	    } else {
	        return this.getTypedRuleContext(AsofContext,i);
	    }
	};

	using() {
	    return this.getTypedRuleContext(UsingContext,0);
	};

	useClause() {
	    return this.getTypedRuleContext(UseClauseContext,0);
	};

	qparams() {
	    return this.getTypedRuleContext(QparamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterQueryDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitQueryDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitQueryDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QparamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_qparams;
        this.q1 = null; // QparamContext
        this.q2 = null; // QparamContext
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	qparam = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QparamContext);
	    } else {
	        return this.getTypedRuleContext(QparamContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterQparams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitQparams(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitQparams(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QparamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_qparam;
        this.pt = null; // ParamTypeIdContext
        this.id = null; // Token
        this.at = null; // SimpleTypeIdContext
        this.sid = null; // Token
        this.pid = null; // Token
        this.dstype = null; // DotIdContext
        this.dsid = null; // Token
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	paramTypeId() {
	    return this.getTypedRuleContext(ParamTypeIdContext,0);
	};

	SID() {
	    return this.getToken(KELParser.SID, 0);
	};

	simpleTypeId() {
	    return this.getTypedRuleContext(SimpleTypeIdContext,0);
	};

	PERMITS() {
	    return this.getToken(KELParser.PERMITS, 0);
	};

	DATASET() {
	    return this.getToken(KELParser.DATASET, 0);
	};

	OF() {
	    return this.getToken(KELParser.OF, 0);
	};

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterQparam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitQparam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitQparam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_paramTypeId;
        this.simple = null; // SimpleTypeIdContext
        this.isSet = null; // Token
    }

	simpleTypeId() {
	    return this.getTypedRuleContext(SimpleTypeIdContext,0);
	};

	OF() {
	    return this.getToken(KELParser.OF, 0);
	};

	SET() {
	    return this.getToken(KELParser.SET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterParamTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitParamTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitParamTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_simpleTypeId;
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	UID() {
	    return this.getToken(KELParser.UID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterSimpleTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitSimpleTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitSimpleTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AsofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_asof;
        this.eraname = null; // Token
    }

	ASOF() {
	    return this.getToken(KELParser.ASOF, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	COMMA() {
	    return this.getToken(KELParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterAsof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitAsof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitAsof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_using;
    }

	USING() {
	    return this.getToken(KELParser.USING, 0);
	};

	permitsSpec() {
	    return this.getTypedRuleContext(PermitsSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUsing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUsing(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUsing(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShellDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_shellDeclaration;
        this.name = null; // Token
        this.ps = null; // QparamsContext
        this.ex = null; // ExpressionContext
    }

	SHELL() {
	    return this.getToken(KELParser.SHELL, 0);
	};

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	LARROW() {
	    return this.getToken(KELParser.LARROW, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	asof = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AsofContext);
	    } else {
	        return this.getTypedRuleContext(AsofContext,i);
	    }
	};

	using() {
	    return this.getTypedRuleContext(UsingContext,0);
	};

	useClause() {
	    return this.getTypedRuleContext(UseClauseContext,0);
	};

	qparams() {
	    return this.getTypedRuleContext(QparamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterShellDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitShellDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitShellDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Visual_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_visual_section;
    }

	VIS() {
	    return this.getToken(KELParser.VIS, 0);
	};

	ENDVIS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ENDVIS);
	    } else {
	        return this.getToken(KELParser.ENDVIS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterVisual_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitVisual_section(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitVisual_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Resource_sectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_resource_section;
    }

	RESOURCES() {
	    return this.getToken(KELParser.RESOURCES, 0);
	};

	ENDRESOURCES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.ENDRESOURCES);
	    } else {
	        return this.getToken(KELParser.ENDRESOURCES, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterResource_section(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitResource_section(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitResource_section(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_expression;
        this.be = null; // BooleanDisjunctionContext
    }

	booleanDisjunction() {
	    return this.getTypedRuleContext(BooleanDisjunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanDisjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_booleanDisjunction;
        this.op = null; // Token
    }

	booleanConjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanConjunctionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanConjunctionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.OR);
	    } else {
	        return this.getToken(KELParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBooleanDisjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBooleanDisjunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBooleanDisjunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_booleanConjunction;
        this.op = null; // Token
    }

	booleanTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanTermContext);
	    } else {
	        return this.getTypedRuleContext(BooleanTermContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.AND);
	    } else {
	        return this.getToken(KELParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBooleanConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBooleanConjunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBooleanConjunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_booleanTerm;
        this.op = null; // Token
        this.t = null; // BooleanTermContext
        this.a = null; // BooleanAtomContext
    }

	NOT() {
	    return this.getToken(KELParser.NOT, 0);
	};

	booleanTerm() {
	    return this.getTypedRuleContext(BooleanTermContext,0);
	};

	booleanAtom() {
	    return this.getTypedRuleContext(BooleanAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBooleanTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBooleanTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBooleanTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_booleanAtom;
        this.e1 = null; // ValueExpressionContext
        this.op = null; // Token
        this.e2 = null; // ValueExpressionContext
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	EQ() {
	    return this.getToken(KELParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(KELParser.NEQ, 0);
	};

	LTGT() {
	    return this.getToken(KELParser.LTGT, 0);
	};

	GTEQ() {
	    return this.getToken(KELParser.GTEQ, 0);
	};

	GT() {
	    return this.getToken(KELParser.GT, 0);
	};

	LT() {
	    return this.getToken(KELParser.LT, 0);
	};

	LARROW() {
	    return this.getToken(KELParser.LARROW, 0);
	};

	LEQ() {
	    return this.getToken(KELParser.LEQ, 0);
	};

	NNEQ() {
	    return this.getToken(KELParser.NNEQ, 0);
	};

	IN() {
	    return this.getToken(KELParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBooleanAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBooleanAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBooleanAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_valueExpression;
        this.l = null; // ValueTermContext
        this.op = null; // Token
        this.r = null; // ValueTermContext
    }

	valueTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueTermContext);
	    } else {
	        return this.getTypedRuleContext(ValueTermContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.PLUS);
	    } else {
	        return this.getToken(KELParser.PLUS, i);
	    }
	};


	HYPHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.HYPHEN);
	    } else {
	        return this.getToken(KELParser.HYPHEN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitValueExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitValueExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_valueTerm;
        this.l = null; // ValueFactorContext
        this.op = null; // Token
        this.r = null; // ValueFactorContext
    }

	valueFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueFactorContext);
	    } else {
	        return this.getTypedRuleContext(ValueFactorContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.STAR);
	    } else {
	        return this.getToken(KELParser.STAR, i);
	    }
	};


	FSLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.FSLASH);
	    } else {
	        return this.getToken(KELParser.FSLASH, i);
	    }
	};


	DIV = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.DIV);
	    } else {
	        return this.getToken(KELParser.DIV, i);
	    }
	};


	MOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.MOD);
	    } else {
	        return this.getToken(KELParser.MOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterValueTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitValueTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitValueTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_valueFactor;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PropValueFactorContext extends ValueFactorContext {

    constructor(parser, ctx) {
        super(parser);
        this.a = null; // ValueAtomContext;
        this.op = null; // Token;
        this.tp = null; // TablePropertyContext;
        super.copyFrom(ctx);
    }

	valueAtom() {
	    return this.getTypedRuleContext(ValueAtomContext,0);
	};

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	tableProperty() {
	    return this.getTypedRuleContext(TablePropertyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPropValueFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPropValueFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPropValueFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.PropValueFactorContext = PropValueFactorContext;

class ScopedValueFactorContext extends ValueFactorContext {

    constructor(parser, ctx) {
        super(parser);
        this.ref = null; // QualifiedIdContext;
        this.se = null; // ScopeExpressionContext;
        super.copyFrom(ctx);
    }

	SIGIL() {
	    return this.getToken(KELParser.SIGIL, 0);
	};

	qualifiedId() {
	    return this.getTypedRuleContext(QualifiedIdContext,0);
	};

	scopeExpression() {
	    return this.getTypedRuleContext(ScopeExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterScopedValueFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitScopedValueFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitScopedValueFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ScopedValueFactorContext = ScopedValueFactorContext;

class NestedValueFactorContext extends ValueFactorContext {

    constructor(parser, ctx) {
        super(parser);
        this.e = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterNestedValueFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitNestedValueFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitNestedValueFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.NestedValueFactorContext = NestedValueFactorContext;

class UnaryValueFactorContext extends ValueFactorContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        this.f = null; // ValueFactorContext;
        super.copyFrom(ctx);
    }

	HYPHEN() {
	    return this.getToken(KELParser.HYPHEN, 0);
	};

	valueFactor() {
	    return this.getTypedRuleContext(ValueFactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterUnaryValueFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitUnaryValueFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitUnaryValueFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.UnaryValueFactorContext = UnaryValueFactorContext;

class ConstValueFactorContext extends ValueFactorContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // ConstantContext;
        super.copyFrom(ctx);
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterConstValueFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitConstValueFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitConstValueFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ConstValueFactorContext = ConstValueFactorContext;

class SetValueFactorContext extends ValueFactorContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LSQUARE() {
	    return this.getToken(KELParser.LSQUARE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RSQUARE() {
	    return this.getToken(KELParser.RSQUARE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterSetValueFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitSetValueFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitSetValueFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.SetValueFactorContext = SetValueFactorContext;

class ValueAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_valueAtom;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ProjValueAtomContext extends ValueAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // EntityProjectionContext;
        super.copyFrom(ctx);
    }

	entityProjection() {
	    return this.getTypedRuleContext(EntityProjectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterProjValueAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitProjValueAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitProjValueAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ProjValueAtomContext = ProjValueAtomContext;

class IdValueAtomContext extends ValueAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.id = null; // LeadingIdContext;
        super.copyFrom(ctx);
    }

	leadingId() {
	    return this.getTypedRuleContext(LeadingIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterIdValueAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitIdValueAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitIdValueAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.IdValueAtomContext = IdValueAtomContext;

class AutoMatchValueAtomContext extends ValueAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.sid = null; // Token;
        super.copyFrom(ctx);
    }

	SID() {
	    return this.getToken(KELParser.SID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterAutoMatchValueAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitAutoMatchValueAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitAutoMatchValueAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.AutoMatchValueAtomContext = AutoMatchValueAtomContext;

class PatternModelAtomContext extends ValueAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.m = null; // PatternModelContext;
        super.copyFrom(ctx);
    }

	patternModel() {
	    return this.getTypedRuleContext(PatternModelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPatternModelAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPatternModelAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPatternModelAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.PatternModelAtomContext = PatternModelAtomContext;

class QueryOpValueAtomContext extends ValueAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.base = null; // LeadingIdContext;
        this.qo = null; // QueryFuncOpContext;
        super.copyFrom(ctx);
    }

	leadingId() {
	    return this.getTypedRuleContext(LeadingIdContext,0);
	};

	queryFuncOp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryFuncOpContext);
	    } else {
	        return this.getTypedRuleContext(QueryFuncOpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterQueryOpValueAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitQueryOpValueAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitQueryOpValueAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.QueryOpValueAtomContext = QueryOpValueAtomContext;

class LinkAtomContext extends ValueAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	linkExp() {
	    return this.getTypedRuleContext(LinkExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLinkAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLinkAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLinkAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.LinkAtomContext = LinkAtomContext;

class QueryFuncOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_queryFuncOp;
        this.f = null; // FuncOrFilterContext
        this.p = null; // EntityProjectionContext
        this.fs = null; // FieldSelectorContext
    }

	funcOrFilter() {
	    return this.getTypedRuleContext(FuncOrFilterContext,0);
	};

	entityProjection() {
	    return this.getTypedRuleContext(EntityProjectionContext,0);
	};

	fieldSelector() {
	    return this.getTypedRuleContext(FieldSelectorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterQueryFuncOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitQueryFuncOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitQueryFuncOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FuncOrFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_funcOrFilter;
        this.p1 = null; // PairContext
        this.op1 = null; // Token
        this.p2 = null; // PairContext
        this.op2 = null; // Token
        this.def = null; // ExpressionContext
        this.e1 = null; // ExpressionContext
        this.op = null; // Token
        this.e2 = null; // ExpressionContext
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PairContext);
	    } else {
	        return this.getTypedRuleContext(PairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFuncOrFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFuncOrFilter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFuncOrFilter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_pair;
        this.test = null; // ExpressionContext
        this.op = null; // Token
        this.value = null; // ExpressionContext
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RARROW() {
	    return this.getToken(KELParser.RARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LinkExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_linkExp;
        this.start = null; // ExpressionContext
        this.body = null; // ValueAtomContext
        this.end = null; // ExpressionContext
    }

	LINK() {
	    return this.getToken(KELParser.LINK, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	linkDegree() {
	    return this.getTypedRuleContext(LinkDegreeContext,0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	valueAtom() {
	    return this.getTypedRuleContext(ValueAtomContext,0);
	};

	linkSpec() {
	    return this.getTypedRuleContext(LinkSpecContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLinkExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLinkExp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLinkExp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LinkSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_linkSpec;
        this.from = null; // PropertyIdContext
        this.to = null; // PropertyIdContext
    }

	LSQUARE() {
	    return this.getToken(KELParser.LSQUARE, 0);
	};

	COMMA() {
	    return this.getToken(KELParser.COMMA, 0);
	};

	RSQUARE() {
	    return this.getToken(KELParser.RSQUARE, 0);
	};

	propertyId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyIdContext);
	    } else {
	        return this.getTypedRuleContext(PropertyIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLinkSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLinkSpec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLinkSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LinkDegreeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_linkDegree;
    }

	STAR() {
	    return this.getToken(KELParser.STAR, 0);
	};

	INT() {
	    return this.getToken(KELParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLinkDegree(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLinkDegree(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLinkDegree(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityProjectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_entityProjection;
        this.b = null; // Token
        this.e1 = null; // NamedExpressionContext
        this.e2 = null; // NamedExpressionContext
    }

	RCURL() {
	    return this.getToken(KELParser.RCURL, 0);
	};

	LCURL() {
	    return this.getToken(KELParser.LCURL, 0);
	};

	namedExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NamedExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEntityProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEntityProjection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEntityProjection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_namedExpression;
        this.n = null; // Token
        this.ex = null; // ExpressionContext
    }

	DEFEQ() {
	    return this.getToken(KELParser.DEFEQ, 0);
	};

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterNamedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitNamedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitNamedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternModelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_patternModel;
    }

	MODEL() {
	    return this.getToken(KELParser.MODEL, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	patternSubmodel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternSubmodelContext);
	    } else {
	        return this.getTypedRuleContext(PatternSubmodelContext,i);
	    }
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPatternModel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPatternModel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPatternModel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternSubmodelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_patternSubmodel;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SingleValuedPatternSubmodelContext extends PatternSubmodelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PID() {
	    return this.getToken(KELParser.PID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterSingleValuedPatternSubmodel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitSingleValuedPatternSubmodel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitSingleValuedPatternSubmodel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.SingleValuedPatternSubmodelContext = SingleValuedPatternSubmodelContext;

class MultiValuedPatternSubmodelContext extends PatternSubmodelContext {

    constructor(parser, ctx) {
        super(parser);
        this.n = null; // Token;
        super.copyFrom(ctx);
    }

	LCURL() {
	    return this.getToken(KELParser.LCURL, 0);
	};

	PID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.PID);
	    } else {
	        return this.getToken(KELParser.PID, i);
	    }
	};


	RCURL() {
	    return this.getToken(KELParser.RCURL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	PSID() {
	    return this.getToken(KELParser.PSID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterMultiValuedPatternSubmodel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitMultiValuedPatternSubmodel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitMultiValuedPatternSubmodel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.MultiValuedPatternSubmodelContext = MultiValuedPatternSubmodelContext;

class FieldSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_fieldSelector;
        this.id = null; // FieldIdContext
    }

	DOT() {
	    return this.getToken(KELParser.DOT, 0);
	};

	fieldId() {
	    return this.getTypedRuleContext(FieldIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFieldSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFieldSelector(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFieldSelector(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScopeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_scopeExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplicitScopeExpressionContext extends ScopeExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.se = null; // ValueAtomContext;
        this.p = null; // TablePropertyContext;
        super.copyFrom(ctx);
    }

	COLON() {
	    return this.getToken(KELParser.COLON, 0);
	};

	valueAtom() {
	    return this.getTypedRuleContext(ValueAtomContext,0);
	};

	tableProperty() {
	    return this.getTypedRuleContext(TablePropertyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterExplicitScopeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitExplicitScopeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitExplicitScopeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.ExplicitScopeExpressionContext = ExplicitScopeExpressionContext;

class OuterScopeExpressionContext extends ScopeExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // TablePropertyContext;
        super.copyFrom(ctx);
    }

	CARET() {
	    return this.getToken(KELParser.CARET, 0);
	};

	tableProperty() {
	    return this.getTypedRuleContext(TablePropertyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterOuterScopeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitOuterScopeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitOuterScopeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.OuterScopeExpressionContext = OuterScopeExpressionContext;

class SelfScopeExpressionContext extends ScopeExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // TablePropertyContext;
        super.copyFrom(ctx);
    }

	tableProperty() {
	    return this.getTypedRuleContext(TablePropertyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterSelfScopeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitSelfScopeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitSelfScopeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.SelfScopeExpressionContext = SelfScopeExpressionContext;

class TablePropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_tableProperty;
        this.id = null; // TablePropIdContext
        this.v = null; // ExpressionContext
        this.w = null; // ExpressionContext
    }

	tablePropId() {
	    return this.getTypedRuleContext(TablePropIdContext,0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(KELParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterTableProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitTableProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitTableProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_func_id;
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFunc_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFunc_id(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFunc_id(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_qualifiedId;
        this.id1 = null; // LeadingIdContext
        this.id2 = null; // FieldIdContext
    }

	leadingId() {
	    return this.getTypedRuleContext(LeadingIdContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.DOT);
	    } else {
	        return this.getToken(KELParser.DOT, i);
	    }
	};


	fieldId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldIdContext);
	    } else {
	        return this.getTypedRuleContext(FieldIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterQualifiedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitQualifiedId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitQualifiedId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LeadingIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_leadingId;
        this.id = null; // Token
        this.pid = null; // Token
        this.psid = null; // Token
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	UID() {
	    return this.getToken(KELParser.UID, 0);
	};

	SINT() {
	    return this.getToken(KELParser.SINT, 0);
	};

	PID() {
	    return this.getToken(KELParser.PID, 0);
	};

	PSID() {
	    return this.getToken(KELParser.PSID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterLeadingId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitLeadingId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitLeadingId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_fieldId;
        this.id = null; // Token
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	UID() {
	    return this.getToken(KELParser.UID, 0);
	};

	PID() {
	    return this.getToken(KELParser.PID, 0);
	};

	PSID() {
	    return this.getToken(KELParser.PSID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFieldId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFieldId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFieldId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_tablePropId;
        this.id = null; // Token
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterTablePropId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitTablePropId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitTablePropId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_propertyId;
        this.id = null; // Token
    }

	ID() {
	    return this.getToken(KELParser.ID, 0);
	};

	UID() {
	    return this.getToken(KELParser.UID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterPropertyId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitPropertyId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitPropertyId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_constant;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class EmptySetConstantContext extends ConstantContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LSQUARE() {
	    return this.getToken(KELParser.LSQUARE, 0);
	};

	RSQUARE() {
	    return this.getToken(KELParser.RSQUARE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEmptySetConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEmptySetConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEmptySetConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.EmptySetConstantContext = EmptySetConstantContext;

class NonSetConstantContext extends ConstantContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simpleConstant() {
	    return this.getTypedRuleContext(SimpleConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterNonSetConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitNonSetConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitNonSetConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.NonSetConstantContext = NonSetConstantContext;

class SimpleConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_simpleConstant;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GeneralIntConstantContext extends SimpleConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // IntConstantContext;
        super.copyFrom(ctx);
    }

	intConstant() {
	    return this.getTypedRuleContext(IntConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterGeneralIntConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitGeneralIntConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitGeneralIntConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.GeneralIntConstantContext = GeneralIntConstantContext;

class TypedConstantContext extends SimpleConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // Token;
        super.copyFrom(ctx);
    }

	TYPDCONST() {
	    return this.getToken(KELParser.TYPDCONST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterTypedConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitTypedConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitTypedConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.TypedConstantContext = TypedConstantContext;

class StringConstantContext extends SimpleConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.s = null; // Token;
        super.copyFrom(ctx);
    }

	STR() {
	    return this.getToken(KELParser.STR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterStringConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitStringConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitStringConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.StringConstantContext = StringConstantContext;

class FalseConstantContext extends SimpleConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.b = null; // Token;
        super.copyFrom(ctx);
    }

	FALSE() {
	    return this.getToken(KELParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterFalseConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitFalseConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitFalseConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.FalseConstantContext = FalseConstantContext;

class GeneralRealConstantContext extends SimpleConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.r = null; // RealConstantContext;
        super.copyFrom(ctx);
    }

	realConstant() {
	    return this.getTypedRuleContext(RealConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterGeneralRealConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitGeneralRealConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitGeneralRealConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.GeneralRealConstantContext = GeneralRealConstantContext;

class TrueConstantContext extends SimpleConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.b = null; // Token;
        super.copyFrom(ctx);
    }

	TRUE() {
	    return this.getToken(KELParser.TRUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterTrueConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitTrueConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitTrueConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.TrueConstantContext = TrueConstantContext;

class IntConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_intConstant;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DecIntConstantContext extends IntConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	INT() {
	    return this.getToken(KELParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterDecIntConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitDecIntConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitDecIntConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.DecIntConstantContext = DecIntConstantContext;

class NegIntConstantContext extends IntConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	HYPHEN() {
	    return this.getToken(KELParser.HYPHEN, 0);
	};

	INT() {
	    return this.getToken(KELParser.INT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterNegIntConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitNegIntConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitNegIntConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.NegIntConstantContext = NegIntConstantContext;

class BadBinConstantContext extends IntConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	BAD_BIN() {
	    return this.getToken(KELParser.BAD_BIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBadBinConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBadBinConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBadBinConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.BadBinConstantContext = BadBinConstantContext;

class HexConstantContext extends IntConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	HEXINT() {
	    return this.getToken(KELParser.HEXINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterHexConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitHexConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitHexConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.HexConstantContext = HexConstantContext;

class BadHexConstantContext extends IntConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	BAD_HEX() {
	    return this.getToken(KELParser.BAD_HEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBadHexConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBadHexConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBadHexConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.BadHexConstantContext = BadHexConstantContext;

class BadMixConstantContext extends IntConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	BAD_MIX() {
	    return this.getToken(KELParser.BAD_MIX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBadMixConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBadMixConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBadMixConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.BadMixConstantContext = BadMixConstantContext;

class BinConstantContext extends IntConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	BININT() {
	    return this.getToken(KELParser.BININT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBinConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBinConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBinConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.BinConstantContext = BinConstantContext;

class NoFlagHexConstantContext extends IntConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        super.copyFrom(ctx);
    }

	HEX_NO_X() {
	    return this.getToken(KELParser.HEX_NO_X, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterNoFlagHexConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitNoFlagHexConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitNoFlagHexConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.NoFlagHexConstantContext = NoFlagHexConstantContext;

class RealConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_realConstant;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BadRealConstContext extends RealConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.r = null; // Token;
        super.copyFrom(ctx);
    }

	BAD_REAL_A() {
	    return this.getToken(KELParser.BAD_REAL_A, 0);
	};

	BAD_REAL_B() {
	    return this.getToken(KELParser.BAD_REAL_B, 0);
	};

	BAD_REAL_C() {
	    return this.getToken(KELParser.BAD_REAL_C, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterBadRealConst(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitBadRealConst(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitBadRealConst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.BadRealConstContext = BadRealConstContext;

class RealConstContext extends RealConstantContext {

    constructor(parser, ctx) {
        super(parser);
        this.r = null; // Token;
        super.copyFrom(ctx);
    }

	REAL() {
	    return this.getToken(KELParser.REAL, 0);
	};

	HYPHEN() {
	    return this.getToken(KELParser.HYPHEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterRealConst(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitRealConst(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitRealConst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

KELParser.RealConstContext = RealConstContext;

class EclExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_eclExpression;
    }

	ECL() {
	    return this.getToken(KELParser.ECL, 0);
	};

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	eclBody() {
	    return this.getTypedRuleContext(EclBodyContext,0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	RETURNS() {
	    return this.getToken(KELParser.RETURNS, 0);
	};

	returnTypeId() {
	    return this.getTypedRuleContext(ReturnTypeIdContext,0);
	};

	FROM() {
	    return this.getToken(KELParser.FROM, 0);
	};

	eclImportList() {
	    return this.getTypedRuleContext(EclImportListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEclExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEclExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEclExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_eclBody;
    }

	eclFragment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EclFragmentContext);
	    } else {
	        return this.getTypedRuleContext(EclFragmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEclBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEclBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEclBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclFragmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_eclFragment;
    }

	LP() {
	    return this.getToken(KELParser.LP, 0);
	};

	RP() {
	    return this.getToken(KELParser.RP, 0);
	};

	eclBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EclBodyContext);
	    } else {
	        return this.getTypedRuleContext(EclBodyContext,i);
	    }
	};

	EXCLAIM() {
	    return this.getToken(KELParser.EXCLAIM, 0);
	};

	TILDE() {
	    return this.getToken(KELParser.TILDE, 0);
	};

	AMP() {
	    return this.getToken(KELParser.AMP, 0);
	};

	PIPE() {
	    return this.getToken(KELParser.PIPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEclFragment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEclFragment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEclFragment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclImportListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_eclImportList;
    }

	eclImportItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EclImportItemContext);
	    } else {
	        return this.getTypedRuleContext(EclImportItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(KELParser.COMMA);
	    } else {
	        return this.getToken(KELParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEclImportList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEclImportList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEclImportList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclImportItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_eclImportItem;
    }

	dotId() {
	    return this.getTypedRuleContext(DotIdContext,0);
	};

	SIGIL() {
	    return this.getToken(KELParser.SIGIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterEclImportItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitEclImportItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitEclImportItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = KELParser.RULE_returnTypeId;
        this.simple = null; // SimpleTypeIdContext
        this.isSet = null; // Token
    }

	simpleTypeId() {
	    return this.getTypedRuleContext(SimpleTypeIdContext,0);
	};

	OF() {
	    return this.getToken(KELParser.OF, 0);
	};

	SET() {
	    return this.getToken(KELParser.SET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.enterReturnTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof KELParserListener ) {
	        listener.exitReturnTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof KELParserVisitor ) {
	        return visitor.visitReturnTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




KELParser.ProgramContext = ProgramContext; 
KELParser.AnnotationContext = AnnotationContext; 
KELParser.StatementContext = StatementContext; 
KELParser.OptionContext = OptionContext; 
KELParser.EraDeclarationContext = EraDeclarationContext; 
KELParser.EpochContext = EpochContext; 
KELParser.PermitsDeclarationContext = PermitsDeclarationContext; 
KELParser.PermitContext = PermitContext; 
KELParser.ImportStatementContext = ImportStatementContext; 
KELParser.InlinePackageContext = InlinePackageContext; 
KELParser.OutoflinePackageContext = OutoflinePackageContext; 
KELParser.PackageDeclarationContext = PackageDeclarationContext; 
KELParser.PackageStatementContext = PackageStatementContext; 
KELParser.PackageExportDeclarationContext = PackageExportDeclarationContext; 
KELParser.EntityDeclarationContext = EntityDeclarationContext; 
KELParser.EntityPropertyContext = EntityPropertyContext; 
KELParser.FieldMappingContext = FieldMappingContext; 
KELParser.FileTypeContext = FileTypeContext; 
KELParser.MappingElementContext = MappingElementContext; 
KELParser.NullSpecContext = NullSpecContext; 
KELParser.FormatSpecContext = FormatSpecContext; 
KELParser.CompositeIdSpecContext = CompositeIdSpecContext; 
KELParser.ModelDeclarationContext = ModelDeclarationContext; 
KELParser.SubmodelDeclarationContext = SubmodelDeclarationContext; 
KELParser.SubmodelIdContext = SubmodelIdContext; 
KELParser.UseDeclarationContext = UseDeclarationContext; 
KELParser.UseKelBaseDeclarationContext = UseKelBaseDeclarationContext; 
KELParser.UseKelQueryDeclarationContext = UseKelQueryDeclarationContext; 
KELParser.UseElementContext = UseElementContext; 
KELParser.UseFileTypeContext = UseFileTypeContext; 
KELParser.UseClauseContext = UseClauseContext; 
KELParser.UseClauseElementContext = UseClauseElementContext; 
KELParser.UseClauseFileTypeContext = UseClauseFileTypeContext; 
KELParser.NestedEntityMappingContext = NestedEntityMappingContext; 
KELParser.EntityMappingContext = EntityMappingContext; 
KELParser.UseMappingOverrideContext = UseMappingOverrideContext; 
KELParser.DotIdContext = DotIdContext; 
KELParser.PermitsClauseContext = PermitsClauseContext; 
KELParser.PermitsSpecContext = PermitsSpecContext; 
KELParser.HintsClauseContext = HintsClauseContext; 
KELParser.LogicStatementContext = LogicStatementContext; 
KELParser.LogicPredicateContext = LogicPredicateContext; 
KELParser.LogicProductionsContext = LogicProductionsContext; 
KELParser.LogicProductionContext = LogicProductionContext; 
KELParser.EntityProductionsContext = EntityProductionsContext; 
KELParser.EntityProductionContext = EntityProductionContext; 
KELParser.FunctionStatementContext = FunctionStatementContext; 
KELParser.FparamsContext = FparamsContext; 
KELParser.FparamContext = FparamContext; 
KELParser.FunctionBodyContext = FunctionBodyContext; 
KELParser.QueryDeclarationContext = QueryDeclarationContext; 
KELParser.QparamsContext = QparamsContext; 
KELParser.QparamContext = QparamContext; 
KELParser.ParamTypeIdContext = ParamTypeIdContext; 
KELParser.SimpleTypeIdContext = SimpleTypeIdContext; 
KELParser.AsofContext = AsofContext; 
KELParser.UsingContext = UsingContext; 
KELParser.ShellDeclarationContext = ShellDeclarationContext; 
KELParser.Visual_sectionContext = Visual_sectionContext; 
KELParser.Resource_sectionContext = Resource_sectionContext; 
KELParser.ExpressionContext = ExpressionContext; 
KELParser.BooleanDisjunctionContext = BooleanDisjunctionContext; 
KELParser.BooleanConjunctionContext = BooleanConjunctionContext; 
KELParser.BooleanTermContext = BooleanTermContext; 
KELParser.BooleanAtomContext = BooleanAtomContext; 
KELParser.ValueExpressionContext = ValueExpressionContext; 
KELParser.ValueTermContext = ValueTermContext; 
KELParser.ValueFactorContext = ValueFactorContext; 
KELParser.ValueAtomContext = ValueAtomContext; 
KELParser.QueryFuncOpContext = QueryFuncOpContext; 
KELParser.FuncOrFilterContext = FuncOrFilterContext; 
KELParser.PairContext = PairContext; 
KELParser.LinkExpContext = LinkExpContext; 
KELParser.LinkSpecContext = LinkSpecContext; 
KELParser.LinkDegreeContext = LinkDegreeContext; 
KELParser.EntityProjectionContext = EntityProjectionContext; 
KELParser.NamedExpressionContext = NamedExpressionContext; 
KELParser.PatternModelContext = PatternModelContext; 
KELParser.PatternSubmodelContext = PatternSubmodelContext; 
KELParser.FieldSelectorContext = FieldSelectorContext; 
KELParser.ScopeExpressionContext = ScopeExpressionContext; 
KELParser.TablePropertyContext = TablePropertyContext; 
KELParser.Func_idContext = Func_idContext; 
KELParser.QualifiedIdContext = QualifiedIdContext; 
KELParser.LeadingIdContext = LeadingIdContext; 
KELParser.FieldIdContext = FieldIdContext; 
KELParser.TablePropIdContext = TablePropIdContext; 
KELParser.PropertyIdContext = PropertyIdContext; 
KELParser.ConstantContext = ConstantContext; 
KELParser.SimpleConstantContext = SimpleConstantContext; 
KELParser.IntConstantContext = IntConstantContext; 
KELParser.RealConstantContext = RealConstantContext; 
KELParser.EclExpressionContext = EclExpressionContext; 
KELParser.EclBodyContext = EclBodyContext; 
KELParser.EclFragmentContext = EclFragmentContext; 
KELParser.EclImportListContext = EclImportListContext; 
KELParser.EclImportItemContext = EclImportItemContext; 
KELParser.ReturnTypeIdContext = ReturnTypeIdContext; 
