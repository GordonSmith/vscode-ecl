// Generated from ./Salt.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SaltListener = require('./SaltListener').SaltListener;
var SaltVisitor = require('./SaltVisitor').SaltVisitor;

var grammarFileName = "Salt.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0164\u0a15\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0003\u0002\u0006",
    "\u0002\u0120\n\u0002\r\u0002\u000e\u0002\u0121\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u012a\n",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u012f\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u0137\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0141",
    "\n\u0003\u0003\u0003\u0005\u0003\u0144\n\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u014c\n",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0151\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u0159\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003\u0163",
    "\n\u0003\r\u0003\u000e\u0003\u0164\u0003\u0003\u0005\u0003\u0168\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0006\u0003\u0172\n\u0003\r\u0003\u000e\u0003",
    "\u0173\u0003\u0003\u0005\u0003\u0177\n\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0006\u0003\u0181\n\u0003\r\u0003\u000e\u0003\u0182\u0003\u0003\u0005",
    "\u0003\u0186\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003\u0190\n",
    "\u0003\r\u0003\u000e\u0003\u0191\u0003\u0003\u0005\u0003\u0195\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0007\u0003\u019f\n\u0003\f\u0003\u000e\u0003",
    "\u01a2\u000b\u0003\u0003\u0003\u0005\u0003\u01a5\n\u0003\u0003\u0003",
    "\u0005\u0003\u01a8\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u01b2",
    "\n\u0003\f\u0003\u000e\u0003\u01b5\u000b\u0003\u0003\u0003\u0005\u0003",
    "\u01b8\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0006\u0003\u01c0\n\u0003\r\u0003\u000e\u0003\u01c1",
    "\u0003\u0003\u0005\u0003\u01c5\n\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006",
    "\u0003\u01cf\n\u0003\r\u0003\u000e\u0003\u01d0\u0003\u0003\u0005\u0003",
    "\u01d4\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003\u01de\n\u0003",
    "\r\u0003\u000e\u0003\u01df\u0003\u0003\u0005\u0003\u01e3\n\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u01f0",
    "\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0007\u0003\u01f8\n\u0003\f\u0003\u000e\u0003\u01fb\u000b",
    "\u0003\u0003\u0003\u0005\u0003\u01fe\n\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0205\n\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005",
    "\u0003\u020d\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0217\n",
    "\u0003\u0003\u0003\u0005\u0003\u021a\n\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0227\n\u0003\u0003",
    "\u0003\u0005\u0003\u022a\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0007\u0003\u0236\n\u0003\f\u0003\u000e\u0003\u0239\u000b",
    "\u0003\u0003\u0003\u0005\u0003\u023c\n\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0244\n",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u024e\n\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003",
    "\u0256\n\u0003\r\u0003\u000e\u0003\u0257\u0003\u0003\u0005\u0003\u025b",
    "\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003\u0265\n\u0003\r\u0003",
    "\u000e\u0003\u0266\u0003\u0003\u0005\u0003\u026a\n\u0003\u0003\u0003",
    "\u0005\u0003\u026d\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003\u0277",
    "\n\u0003\r\u0003\u000e\u0003\u0278\u0003\u0003\u0005\u0003\u027c\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0006\u0003\u0286\n\u0003\r\u0003\u000e\u0003",
    "\u0287\u0003\u0003\u0005\u0003\u028b\n\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u0295\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u029d\n\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
    "\u02a5\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003\u02af\n\u0003",
    "\r\u0003\u000e\u0003\u02b0\u0003\u0003\u0005\u0003\u02b4\n\u0003\u0003",
    "\u0003\u0003\u0003\u0006\u0003\u02b8\n\u0003\r\u0003\u000e\u0003\u02b9",
    "\u0003\u0003\u0003\u0003\u0005\u0003\u02be\n\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u02c2\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003\u02cb\n",
    "\u0003\r\u0003\u000e\u0003\u02cc\u0003\u0003\u0005\u0003\u02d0\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u02d8\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0006\u0003\u02e2",
    "\n\u0003\r\u0003\u000e\u0003\u02e3\u0003\u0003\u0005\u0003\u02e7\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0006\u0003\u02f1\n\u0003\r\u0003\u000e\u0003",
    "\u02f2\u0003\u0003\u0005\u0003\u02f6\n\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u02fa\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u0304",
    "\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0007\u0005\u030c\n\u0005\f\u0005\u000e\u0005\u030f\u000b",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u0315",
    "\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u031c\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\b\u0003\b\u0005\b\u0325\n\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0005\b\u032b\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u0332\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0341",
    "\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0347\n\n\f\n\u000e\n\u034a",
    "\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u0357\n\f\f",
    "\f\u000e\f\u035a\u000b\f\u0003\f\u0005\f\u035d\n\f\u0003\f\u0003\f\u0005",
    "\f\u0361\n\f\u0003\f\u0006\f\u0364\n\f\r\f\u000e\f\u0365\u0003\f\u0005",
    "\f\u0369\n\f\u0003\f\u0003\f\u0005\f\u036d\n\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u0377\n\f\f\f\u000e",
    "\f\u037a\u000b\f\u0003\f\u0005\f\u037d\n\f\u0003\f\u0005\f\u0380\n\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007",
    "\f\u038a\n\f\f\f\u000e\f\u038d\u000b\f\u0003\f\u0005\f\u0390\n\f\u0003",
    "\f\u0005\f\u0393\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0007\f\u039d\n\f\f\f\u000e\f\u03a0\u000b\f\u0003\f",
    "\u0005\f\u03a3\n\f\u0003\f\u0005\f\u03a6\n\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u03b0\n\f\f\f\u000e",
    "\f\u03b3\u000b\f\u0003\f\u0005\f\u03b6\n\f\u0003\f\u0005\f\u03b9\n\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0006",
    "\f\u03c3\n\f\r\f\u000e\f\u03c4\u0003\f\u0005\f\u03c8\n\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0006\f\u03d2\n\f",
    "\r\f\u000e\f\u03d3\u0003\f\u0005\f\u03d7\n\f\u0003\f\u0003\f\u0003\f",
    "\u0005\f\u03dc\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u03e2\n\r",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0007\u000e\u03ea\n\u000e\f\u000e\u000e\u000e\u03ed\u000b\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u03f2\n\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u03fe\n\u0010\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u040d\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0416\n",
    "\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u041a\n\u0012\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u041e\n\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0426\n\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u042d\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0431\n\u0014\u0003",
    "\u0015\u0005\u0015\u0434\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0007\u0015\u043a\n\u0015\f\u0015\u000e\u0015\u043d\u000b",
    "\u0015\u0003\u0015\u0005\u0015\u0440\n\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0005\u0016\u044a\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u0450\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019",
    "\u045a\n\u0019\f\u0019\u000e\u0019\u045d\u000b\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u047f\n\u001b\u0005\u001b\u0481\n\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u0490\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007",
    "\u001d\u049b\n\u001d\f\u001d\u000e\u001d\u049e\u000b\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u04b5\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u04bf\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u04d0\n \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u04e5\n \f",
    " \u000e \u04e8\u000b \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0005 \u04f2\n \u0003 \u0003 \u0005 \u04f6\n \u0005 \u04f8",
    "\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0005#\u0506\n#\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0005$\u0517\n$\u0003%\u0005%\u051a\n%\u0003%\u0003%\u0005",
    "%\u051e\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u052e\n&\f&\u000e&\u0531",
    "\u000b&\u0003&\u0003&\u0005&\u0535\n&\u0003&\u0005&\u0538\n&\u0003\'",
    "\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0007",
    "(\u0544\n(\f(\u000e(\u0547\u000b(\u0003(\u0005(\u054a\n(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0005(\u0566\n(\u0003)\u0003)\u0003)\u0007",
    ")\u056b\n)\f)\u000e)\u056e\u000b)\u0003*\u0003*\u0003*\u0003+\u0003",
    "+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u057d",
    "\n+\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003",
    "-\u0003-\u0005-\u058a\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u059a\n.\u0005",
    ".\u059c\n.\u0003.\u0003.\u0003.\u0005.\u05a1\n.\u0005.\u05a3\n.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0007.\u05b3\n.\f.\u000e.\u05b6\u000b.\u0003",
    ".\u0003.\u0005.\u05ba\n.\u0003/\u0005/\u05bd\n/\u0003/\u0003/\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00050\u05c7\n0\u00031\u00031\u0003",
    "2\u00032\u00033\u00033\u00033\u00033\u00033\u00053\u05d2\n3\u00033\u0005",
    "3\u05d5\n3\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00054\u05e5\n4\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00055\u05f0\n5\u00036\u0003",
    "6\u00036\u00056\u05f5\n6\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00057\u0602\n7\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u060f\n7\u0003",
    "7\u00037\u00037\u00057\u0614\n7\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00058\u061e\n8\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00058\u0627\n8\u00058\u0629\n8\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u063f\n9\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u0649\n9\u0003:\u0003",
    ":\u0005:\u064d\n:\u0003:\u0003:\u0005:\u0651\n:\u0005:\u0653\n:\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u0665\n;\u0003;\u0005;\u0668",
    "\n;\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u0670\n<\u0003",
    "<\u0003<\u0003<\u0005<\u0675\n<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u067e\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u0688\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u068f",
    "\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u0697\n=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u06a1\n=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0005=\u06a8\n=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0005=\u06b1\n=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0005=\u06b8\n=\u0003=\u0005=\u06bb\n=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u06c2\n=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0005=\u06d0\n=\u0003=\u0005=\u06d3",
    "\n=\u0003=\u0003=\u0005=\u06d7\n=\u0003=\u0003=\u0005=\u06db\n=\u0003",
    ">\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0005?\u06e8\n?\u0003?\u0003?\u0005?\u06ec\n?\u0003@\u0003@\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003D\u0003D\u0003",
    "D\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0005F\u0701\nF\u0003G\u0003",
    "G\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003",
    "I\u0003I\u0003J\u0003J\u0003J\u0005J\u0713\nJ\u0003K\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0005K\u071b\nK\u0003K\u0003K\u0003L\u0007L\u0720\n",
    "L\fL\u000eL\u0723\u000bL\u0003M\u0003M\u0003M\u0007M\u0728\nM\fM\u000e",
    "M\u072b\u000bM\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u0732\nN\u0003",
    "O\u0003O\u0003O\u0003O\u0007O\u0738\nO\fO\u000eO\u073b\u000bO\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0007P\u0744\nP\fP\u000e",
    "P\u0747\u000bP\u0003P\u0003P\u0005P\u074b\nP\u0003Q\u0005Q\u074e\nQ",
    "\u0003Q\u0005Q\u0751\nQ\u0003Q\u0003Q\u0005Q\u0755\nQ\u0003Q\u0003Q",
    "\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0007Q\u075e\nQ\fQ\u000eQ\u0761",
    "\u000bQ\u0003Q\u0003Q\u0005Q\u0765\nQ\u0003R\u0003R\u0003S\u0003S\u0003",
    "T\u0003T\u0003T\u0003T\u0005T\u076f\nT\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003U\u0003U\u0003U\u0005U\u0779\nU\u0003U\u0003U\u0003U\u0003U\u0005",
    "U\u077f\nU\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0005U\u0787\n",
    "U\u0003U\u0003U\u0003U\u0003U\u0005U\u078d\nU\u0003U\u0003U\u0005U\u0791",
    "\nU\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0005V\u079e\nV\u0003V\u0003V\u0003V\u0005V\u07a3\nV\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u07ab\nW\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005",
    "W\u07b9\nW\u0003W\u0003W\u0003W\u0005W\u07be\nW\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u07c8\nW\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0005W\u07d9\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0005W\u07e1\nW\u0003W\u0003W\u0005W\u07e5\nW\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0005W\u07f4\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0005W\u0801\nW\u0003W\u0003W\u0003W\u0005W\u0806",
    "\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u080e\nW\u0003",
    "W\u0003W\u0003W\u0005W\u0813\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0005W\u081b\nW\u0003W\u0003W\u0005W\u081f\nW\u0003W\u0003W\u0003",
    "W\u0005W\u0824\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u082b\n",
    "W\u0003W\u0003W\u0003W\u0007W\u0830\nW\fW\u000eW\u0833\u000bW\u0003",
    "W\u0003W\u0003W\u0003W\u0005W\u0839\nW\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0005X\u084a\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u0852",
    "\nY\fY\u000eY\u0855\u000bY\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u085b",
    "\nY\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003[\u0003[\u0003\\\u0003\\",
    "\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u086a\n\\\u0003\\\u0003\\\u0003",
    "\\\u0003\\\u0003\\\u0005\\\u0871\n\\\u0003\\\u0003\\\u0005\\\u0875\n",
    "\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0005]\u087c\n]\u0005]\u087e\n",
    "]\u0003^\u0005^\u0881\n^\u0003^\u0003^\u0003_\u0003_\u0005_\u0887\n",
    "_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u088f\n`\u0003`\u0003",
    "`\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0007b\u08a1\nb\fb\u000eb\u08a4\u000b",
    "b\u0003b\u0003b\u0003c\u0005c\u08a9\nc\u0003c\u0003c\u0005c\u08ad\n",
    "c\u0003d\u0003d\u0003d\u0003d\u0003e\u0003e\u0003e\u0003e\u0007e\u08b7",
    "\ne\fe\u000ee\u08ba\u000be\u0003f\u0003f\u0003f\u0003f\u0005f\u08c0",
    "\nf\u0005f\u08c2\nf\u0003g\u0003g\u0003g\u0003h\u0003h\u0003h\u0003",
    "h\u0003i\u0003i\u0003i\u0003i\u0003j\u0003j\u0003j\u0003j\u0003k\u0003",
    "k\u0003k\u0003k\u0005k\u08d7\nk\u0003k\u0003k\u0003k\u0007k\u08dc\n",
    "k\fk\u000ek\u08df\u000bk\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0005",
    "l\u08e7\nl\u0003l\u0005l\u08ea\nl\u0003l\u0003l\u0005l\u08ee\nl\u0003",
    "l\u0003l\u0005l\u08f2\nl\u0003l\u0003l\u0005l\u08f6\nl\u0003l\u0003",
    "l\u0007l\u08fa\nl\fl\u000el\u08fd\u000bl\u0003l\u0003l\u0003l\u0005",
    "l\u0902\nl\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0005m\u090a\n",
    "m\u0003m\u0003m\u0005m\u090e\nm\u0003m\u0003m\u0007m\u0912\nm\fm\u000e",
    "m\u0915\u000bm\u0003m\u0003m\u0003m\u0005m\u091a\nm\u0003m\u0003m\u0003",
    "n\u0003n\u0003n\u0003o\u0003o\u0005o\u0923\no\u0003p\u0003p\u0003q\u0003",
    "q\u0003r\u0003r\u0003s\u0003s\u0003s\u0007s\u092e\ns\fs\u000es\u0931",
    "\u000bs\u0003t\u0003t\u0003t\u0003t\u0007t\u0937\nt\ft\u000et\u093a",
    "\u000bt\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003v\u0003v\u0007",
    "v\u0944\nv\fv\u000ev\u0947\u000bv\u0003w\u0003w\u0003w\u0003w\u0007",
    "w\u094d\nw\fw\u000ew\u0950\u000bw\u0003x\u0003x\u0003x\u0003x\u0003",
    "x\u0003y\u0003y\u0003y\u0003y\u0007y\u095b\ny\fy\u000ey\u095e\u000b",
    "y\u0003z\u0003z\u0003z\u0003z\u0003z\u0003z\u0007z\u0966\nz\fz\u000e",
    "z\u0969\u000bz\u0003z\u0003z\u0005z\u096d\nz\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0005z\u0974\nz\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003",
    "{\u0003{\u0003{\u0005{\u097f\n{\u0003|\u0005|\u0982\n|\u0003|\u0003",
    "|\u0005|\u0986\n|\u0003}\u0003}\u0003}\u0007}\u098b\n}\f}\u000e}\u098e",
    "\u000b}\u0003~\u0003~\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u007f",
    "\u0007\u007f\u0997\n\u007f\f\u007f\u000e\u007f\u099a\u000b\u007f\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0006\u0081\u09a3\n\u0081\r\u0081\u000e\u0081\u09a4\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0007\u0082\u09ab\n\u0082\f\u0082",
    "\u000e\u0082\u09ae\u000b\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u09b6\n\u0083\u0003\u0083",
    "\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084",
    "\u0003\u0084\u0007\u0084\u09c0\n\u0084\f\u0084\u000e\u0084\u09c3\u000b",
    "\u0084\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0003\u0085\u0003\u0085\u0005\u0085\u09cd\n\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0086\u0006\u0086\u09d2\n\u0086\r\u0086\u000e\u0086",
    "\u09d3\u0003\u0087\u0006\u0087\u09d7\n\u0087\r\u0087\u000e\u0087\u09d8",
    "\u0003\u0088\u0006\u0088\u09dc\n\u0088\r\u0088\u000e\u0088\u09dd\u0003",
    "\u0089\u0003\u0089\u0006\u0089\u09e2\n\u0089\r\u0089\u000e\u0089\u09e3",
    "\u0003\u0089\u0003\u0089\u0003\u008a\u0005\u008a\u09e9\n\u008a\u0003",
    "\u008a\u0006\u008a\u09ec\n\u008a\r\u008a\u000e\u008a\u09ed\u0003\u008b",
    "\u0005\u008b\u09f1\n\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u09f5",
    "\n\u008b\u0003\u008c\u0005\u008c\u09f8\n\u008c\u0003\u008c\u0003\u008c",
    "\u0005\u008c\u09fc\n\u008c\u0003\u008d\u0005\u008d\u09ff\n\u008d\u0003",
    "\u008d\u0003\u008d\u0005\u008d\u0a03\n\u008d\u0003\u008e\u0005\u008e",
    "\u0a06\n\u008e\u0003\u008e\u0003\u008e\u0005\u008e\u0a0a\n\u008e\u0003",
    "\u008f\u0003\u008f\u0007\u008f\u0a0e\n\u008f\f\u008f\u000e\u008f\u0a11",
    "\u000b\u008f\u0003\u008f\u0003\u008f\u0003\u008f\b\u0998\u09a4\u09d3",
    "\u09d8\u09dd\u09e3\u0002\u0090\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be",
    "\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6",
    "\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee",
    "\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106",
    "\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u0002",
    "K\u0003\u0002\u0005\n\u0003\u0002\f\u000e\u0003\u0002\u0011\u0015\u0004",
    "\u0002\u0019\u0019\u0160\u0160\u0003\u0002#$\u0003\u0002%&\u0003\u0002",
    "\r\u000e\u0003\u0002*,\u0003\u0002>?\u0003\u0002DE\u0003\u0002FG\u0003",
    "\u0002HI\u0003\u0002MN\u0003\u0002XY\u0003\u0002Z[\u0003\u0002\u0081",
    "\u0085\u0003\u0002\u0086\u0087\u0003\u0002\u0088\u008b\u0003\u0002\u008c",
    "\u008d\u0003\u0002\u0090\u0091\u0004\u0002\u0014\u0014\u0095\u0095\u0004",
    "\u0002+,\u0097\u009b\u0004\u0002]]\u009e\u009f\u0003\u0002\u00ad\u00af",
    "\u0004\u0002!!\u00b8\u00b9\u0004\u0002\u0093\u0093\u00bf\u00bf\u0003",
    "\u0002\u00c4\u00c5\u0004\u0002\u00b3\u00b3\u00c6\u00c6\u0004\u0002\u0014",
    "\u0015\u00c8\u00c9\u0004\u0002\u00b2\u00b2\u00cb\u00cd\u0003\u0002\u00ce",
    "\u00d0\u0004\u0002\u0017\u0017\u00d1\u00d2\u0005\u0002\u0014\u0014:",
    ":\u00d3\u00d4\u0005\u0002\u00b2\u00b2\u00cb\u00cb\u00d6\u00d7\u0003",
    "\u0002\u00db\u00dc\u0003\u0002\u00df\u00e0\u0005\u0002**,,\u00d5\u00d5",
    "\u0003\u0002\u00e8\u00e9\u0004\u0002\u0095\u0095\u00ea\u00ea\u0004\u0002",
    "\u00ec\u00ed\u015f\u015f\u0006\u0002\u00d9\u00da\u00e4\u00e4\u00e6\u00e7",
    "\u00ef\u00f6\u0003\u0002\u00f8\u00f9\u0003\u0002\u00fd\u0101\u0004\u0002",
    "\u00b1\u00b1\u0102\u0103\u0005\u0002\u00b2\u00b2\u00d6\u00d6\u0107\u0109",
    "\u0003\u0002\u010a\u010c\u0005\u0002\u00b2\u00b2\u00d6\u00d6\u0107\u0108",
    "\u0003\u0002\u0112\u0113\u0004\u0002\u010e\u010e\u0116\u0116\u0004\u0002",
    "KK\u0117\u0117\u0004\u0002aa\u011d\u011d\u0003\u0002\u015b\u015c\u0006",
    "\u0002\u0017\u0017\u00d2\u00d2\u00e6\u00e6\u0120\u0123\u0003\u0002\u0124",
    "\u0125\u0004\u0002\u0099\u0099\u0126\u0126\u0004\u0002\u001b\u001b\u0129",
    "\u012a\u0004\u0002\\\\\u012c\u012c\u0003\u0002\u012d\u012e\u0004\u0002",
    "\u0093\u0093\u012f\u012f\u0004\u0002\u0010\u0010\u0130\u0131\u0003\u0002",
    "\u0134\u0135\u0006\u0002\u0090\u0090\u0093\u0093\u00bf\u00bf\u010d\u010d",
    "\u0003\u0002`a\u0003\u0002\u0143\u0145\u0004\u0002\u015b\u015b\u0160",
    "\u0160\u0003\u0002\u015b\u015e\u0004\u0002\u015b\u015b\u015d\u015d\u0003",
    "\u0002JK\u0003\u0002\u0159\u0159\u0004\u0002\u0159\u0159\u0161\u0161",
    "\u0005\u0002KK\u0157\u0157\u0159\u0159\u0004\u0002\u0159\u0159\u0162",
    "\u0163\u0003\u0002\u013a\u013a\u0002\u0b78\u0002\u011f\u0003\u0002\u0002",
    "\u0002\u0004\u02f9\u0003\u0002\u0002\u0002\u0006\u0303\u0003\u0002\u0002",
    "\u0002\b\u0305\u0003\u0002\u0002\u0002\n\u0312\u0003\u0002\u0002\u0002",
    "\f\u031d\u0003\u0002\u0002\u0002\u000e\u0322\u0003\u0002\u0002\u0002",
    "\u0010\u0340\u0003\u0002\u0002\u0002\u0012\u0342\u0003\u0002\u0002\u0002",
    "\u0014\u034b\u0003\u0002\u0002\u0002\u0016\u03db\u0003\u0002\u0002\u0002",
    "\u0018\u03e1\u0003\u0002\u0002\u0002\u001a\u03e3\u0003\u0002\u0002\u0002",
    "\u001c\u03f5\u0003\u0002\u0002\u0002\u001e\u03f8\u0003\u0002\u0002\u0002",
    " \u03ff\u0003\u0002\u0002\u0002\"\u0419\u0003\u0002\u0002\u0002$\u041d",
    "\u0003\u0002\u0002\u0002&\u0430\u0003\u0002\u0002\u0002(\u0433\u0003",
    "\u0002\u0002\u0002*\u0449\u0003\u0002\u0002\u0002,\u044f\u0003\u0002",
    "\u0002\u0002.\u0451\u0003\u0002\u0002\u00020\u0456\u0003\u0002\u0002",
    "\u00022\u045e\u0003\u0002\u0002\u00024\u048f\u0003\u0002\u0002\u0002",
    "6\u0491\u0003\u0002\u0002\u00028\u0494\u0003\u0002\u0002\u0002:\u04a1",
    "\u0003\u0002\u0002\u0002<\u04a8\u0003\u0002\u0002\u0002>\u04f7\u0003",
    "\u0002\u0002\u0002@\u04f9\u0003\u0002\u0002\u0002B\u04fe\u0003\u0002",
    "\u0002\u0002D\u0505\u0003\u0002\u0002\u0002F\u0516\u0003\u0002\u0002",
    "\u0002H\u0519\u0003\u0002\u0002\u0002J\u0537\u0003\u0002\u0002\u0002",
    "L\u0539\u0003\u0002\u0002\u0002N\u0565\u0003\u0002\u0002\u0002P\u0567",
    "\u0003\u0002\u0002\u0002R\u056f\u0003\u0002\u0002\u0002T\u057c\u0003",
    "\u0002\u0002\u0002V\u057e\u0003\u0002\u0002\u0002X\u0585\u0003\u0002",
    "\u0002\u0002Z\u05b9\u0003\u0002\u0002\u0002\\\u05bc\u0003\u0002\u0002",
    "\u0002^\u05c6\u0003\u0002\u0002\u0002`\u05c8\u0003\u0002\u0002\u0002",
    "b\u05ca\u0003\u0002\u0002\u0002d\u05d4\u0003\u0002\u0002\u0002f\u05e4",
    "\u0003\u0002\u0002\u0002h\u05ef\u0003\u0002\u0002\u0002j\u05f4\u0003",
    "\u0002\u0002\u0002l\u0613\u0003\u0002\u0002\u0002n\u0628\u0003\u0002",
    "\u0002\u0002p\u0648\u0003\u0002\u0002\u0002r\u0652\u0003\u0002\u0002",
    "\u0002t\u0667\u0003\u0002\u0002\u0002v\u0674\u0003\u0002\u0002\u0002",
    "x\u06da\u0003\u0002\u0002\u0002z\u06dc\u0003\u0002\u0002\u0002|\u06df",
    "\u0003\u0002\u0002\u0002~\u06ed\u0003\u0002\u0002\u0002\u0080\u06ef",
    "\u0003\u0002\u0002\u0002\u0082\u06f1\u0003\u0002\u0002\u0002\u0084\u06f4",
    "\u0003\u0002\u0002\u0002\u0086\u06f7\u0003\u0002\u0002\u0002\u0088\u06fa",
    "\u0003\u0002\u0002\u0002\u008a\u0700\u0003\u0002\u0002\u0002\u008c\u0702",
    "\u0003\u0002\u0002\u0002\u008e\u0707\u0003\u0002\u0002\u0002\u0090\u070c",
    "\u0003\u0002\u0002\u0002\u0092\u070f\u0003\u0002\u0002\u0002\u0094\u0714",
    "\u0003\u0002\u0002\u0002\u0096\u0721\u0003\u0002\u0002\u0002\u0098\u0724",
    "\u0003\u0002\u0002\u0002\u009a\u0731\u0003\u0002\u0002\u0002\u009c\u0733",
    "\u0003\u0002\u0002\u0002\u009e\u073c\u0003\u0002\u0002\u0002\u00a0\u0764",
    "\u0003\u0002\u0002\u0002\u00a2\u0766\u0003\u0002\u0002\u0002\u00a4\u0768",
    "\u0003\u0002\u0002\u0002\u00a6\u076a\u0003\u0002\u0002\u0002\u00a8\u0790",
    "\u0003\u0002\u0002\u0002\u00aa\u07a2\u0003\u0002\u0002\u0002\u00ac\u0838",
    "\u0003\u0002\u0002\u0002\u00ae\u0849\u0003\u0002\u0002\u0002\u00b0\u085a",
    "\u0003\u0002\u0002\u0002\u00b2\u085c\u0003\u0002\u0002\u0002\u00b4\u085e",
    "\u0003\u0002\u0002\u0002\u00b6\u0863\u0003\u0002\u0002\u0002\u00b8\u087d",
    "\u0003\u0002\u0002\u0002\u00ba\u0880\u0003\u0002\u0002\u0002\u00bc\u0884",
    "\u0003\u0002\u0002\u0002\u00be\u0888\u0003\u0002\u0002\u0002\u00c0\u0892",
    "\u0003\u0002\u0002\u0002\u00c2\u0895\u0003\u0002\u0002\u0002\u00c4\u08a8",
    "\u0003\u0002\u0002\u0002\u00c6\u08ae\u0003\u0002\u0002\u0002\u00c8\u08b2",
    "\u0003\u0002\u0002\u0002\u00ca\u08c1\u0003\u0002\u0002\u0002\u00cc\u08c3",
    "\u0003\u0002\u0002\u0002\u00ce\u08c6\u0003\u0002\u0002\u0002\u00d0\u08ca",
    "\u0003\u0002\u0002\u0002\u00d2\u08ce\u0003\u0002\u0002\u0002\u00d4\u08d2",
    "\u0003\u0002\u0002\u0002\u00d6\u08e2\u0003\u0002\u0002\u0002\u00d8\u0905",
    "\u0003\u0002\u0002\u0002\u00da\u091d\u0003\u0002\u0002\u0002\u00dc\u0922",
    "\u0003\u0002\u0002\u0002\u00de\u0924\u0003\u0002\u0002\u0002\u00e0\u0926",
    "\u0003\u0002\u0002\u0002\u00e2\u0928\u0003\u0002\u0002\u0002\u00e4\u092a",
    "\u0003\u0002\u0002\u0002\u00e6\u0932\u0003\u0002\u0002\u0002\u00e8\u093b",
    "\u0003\u0002\u0002\u0002\u00ea\u093f\u0003\u0002\u0002\u0002\u00ec\u0948",
    "\u0003\u0002\u0002\u0002\u00ee\u0951\u0003\u0002\u0002\u0002\u00f0\u0956",
    "\u0003\u0002\u0002\u0002\u00f2\u0973\u0003\u0002\u0002\u0002\u00f4\u097e",
    "\u0003\u0002\u0002\u0002\u00f6\u0985\u0003\u0002\u0002\u0002\u00f8\u0987",
    "\u0003\u0002\u0002\u0002\u00fa\u098f\u0003\u0002\u0002\u0002\u00fc\u0998",
    "\u0003\u0002\u0002\u0002\u00fe\u099b\u0003\u0002\u0002\u0002\u0100\u09a2",
    "\u0003\u0002\u0002\u0002\u0102\u09a6\u0003\u0002\u0002\u0002\u0104\u09af",
    "\u0003\u0002\u0002\u0002\u0106\u09b9\u0003\u0002\u0002\u0002\u0108\u09c6",
    "\u0003\u0002\u0002\u0002\u010a\u09d1\u0003\u0002\u0002\u0002\u010c\u09d6",
    "\u0003\u0002\u0002\u0002\u010e\u09db\u0003\u0002\u0002\u0002\u0110\u09df",
    "\u0003\u0002\u0002\u0002\u0112\u09e8\u0003\u0002\u0002\u0002\u0114\u09f0",
    "\u0003\u0002\u0002\u0002\u0116\u09f7\u0003\u0002\u0002\u0002\u0118\u09fe",
    "\u0003\u0002\u0002\u0002\u011a\u0a05\u0003\u0002\u0002\u0002\u011c\u0a0b",
    "\u0003\u0002\u0002\u0002\u011e\u0120\u0005\u0004\u0003\u0002\u011f\u011e",
    "\u0003\u0002\u0002\u0002\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u011f",
    "\u0003\u0002\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002\u0122\u0123",
    "\u0003\u0002\u0002\u0002\u0123\u0124\u0007\u0002\u0002\u0003\u0124\u0003",
    "\u0003\u0002\u0002\u0002\u0125\u0129\u0007\u0003\u0002\u0002\u0126\u0127",
    "\u0005\u0118\u008d\u0002\u0127\u0128\u0007\u0004\u0002\u0002\u0128\u012a",
    "\u0003\u0002\u0002\u0002\u0129\u0126\u0003\u0002\u0002\u0002\u0129\u012a",
    "\u0003\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012c",
    "\u0005\u0118\u008d\u0002\u012c\u012e\u0005\u00f8}\u0002\u012d\u012f",
    "\u0005\u0118\u008d\u0002\u012e\u012d\u0003\u0002\u0002\u0002\u012e\u012f",
    "\u0003\u0002\u0002\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130\u0131",
    "\u0005\u0112\u008a\u0002\u0131\u02fa\u0003\u0002\u0002\u0002\u0132\u0133",
    "\t\u0002\u0002\u0002\u0133\u0134\u0005\u0118\u008d\u0002\u0134\u0136",
    "\u0007\u0160\u0002\u0002\u0135\u0137\u0005\u0118\u008d\u0002\u0136\u0135",
    "\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0138",
    "\u0003\u0002\u0002\u0002\u0138\u0139\u0005\u0112\u008a\u0002\u0139\u02fa",
    "\u0003\u0002\u0002\u0002\u013a\u013b\u0007\u000b\u0002\u0002\u013b\u013c",
    "\u0005\u0118\u008d\u0002\u013c\u0140\u0007\u0160\u0002\u0002\u013d\u013e",
    "\u0005\u0118\u008d\u0002\u013e\u013f\t\u0003\u0002\u0002\u013f\u0141",
    "\u0003\u0002\u0002\u0002\u0140\u013d\u0003\u0002\u0002\u0002\u0140\u0141",
    "\u0003\u0002\u0002\u0002\u0141\u0143\u0003\u0002\u0002\u0002\u0142\u0144",
    "\u0005\u0118\u008d\u0002\u0143\u0142\u0003\u0002\u0002\u0002\u0143\u0144",
    "\u0003\u0002\u0002\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0146",
    "\u0005\u0112\u008a\u0002\u0146\u02fa\u0003\u0002\u0002\u0002\u0147\u014b",
    "\u0007\u000f\u0002\u0002\u0148\u0149\u0005\u0118\u008d\u0002\u0149\u014a",
    "\u0007\u0010\u0002\u0002\u014a\u014c\u0003\u0002\u0002\u0002\u014b\u0148",
    "\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u014d",
    "\u0003\u0002\u0002\u0002\u014d\u014e\u0005\u0118\u008d\u0002\u014e\u0150",
    "\u0007\u0160\u0002\u0002\u014f\u0151\u0005\u0118\u008d\u0002\u0150\u014f",
    "\u0003\u0002\u0002\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151\u0152",
    "\u0003\u0002\u0002\u0002\u0152\u0153\u0005\u0112\u008a\u0002\u0153\u02fa",
    "\u0003\u0002\u0002\u0002\u0154\u0155\t\u0004\u0002\u0002\u0155\u0156",
    "\u0005\u0118\u008d\u0002\u0156\u0158\u0007\u015b\u0002\u0002\u0157\u0159",
    "\u0005\u0118\u008d\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u0158\u0159",
    "\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015b",
    "\u0005\u0112\u008a\u0002\u015b\u02fa\u0003\u0002\u0002\u0002\u015c\u015d",
    "\u0007\u0016\u0002\u0002\u015d\u015e\u0005\u0118\u008d\u0002\u015e\u0162",
    "\u0007\u0160\u0002\u0002\u015f\u0160\u0005\u0118\u008d\u0002\u0160\u0161",
    "\u0005\u00a8U\u0002\u0161\u0163\u0003\u0002\u0002\u0002\u0162\u015f",
    "\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0162",
    "\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002\u0002\u0002\u0165\u0167",
    "\u0003\u0002\u0002\u0002\u0166\u0168\u0005\u0118\u008d\u0002\u0167\u0166",
    "\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168\u0169",
    "\u0003\u0002\u0002\u0002\u0169\u016a\u0005\u0112\u008a\u0002\u016a\u02fa",
    "\u0003\u0002\u0002\u0002\u016b\u016c\u0007\u0017\u0002\u0002\u016c\u016d",
    "\u0005\u0118\u008d\u0002\u016d\u0171\u0007\u0160\u0002\u0002\u016e\u016f",
    "\u0005\u0118\u008d\u0002\u016f\u0170\u0005\u00aaV\u0002\u0170\u0172",
    "\u0003\u0002\u0002\u0002\u0171\u016e\u0003\u0002\u0002\u0002\u0172\u0173",
    "\u0003\u0002\u0002\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0173\u0174",
    "\u0003\u0002\u0002\u0002\u0174\u0176\u0003\u0002\u0002\u0002\u0175\u0177",
    "\u0005\u0118\u008d\u0002\u0176\u0175\u0003\u0002\u0002\u0002\u0176\u0177",
    "\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u0179",
    "\u0005\u0112\u008a\u0002\u0179\u02fa\u0003\u0002\u0002\u0002\u017a\u017b",
    "\u0007\u0018\u0002\u0002\u017b\u017c\u0005\u0118\u008d\u0002\u017c\u0180",
    "\t\u0005\u0002\u0002\u017d\u017e\u0005\u0118\u008d\u0002\u017e\u017f",
    "\u0005\u00acW\u0002\u017f\u0181\u0003\u0002\u0002\u0002\u0180\u017d",
    "\u0003\u0002\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0180",
    "\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002\u0002\u0002\u0183\u0185",
    "\u0003\u0002\u0002\u0002\u0184\u0186\u0005\u0118\u008d\u0002\u0185\u0184",
    "\u0003\u0002\u0002\u0002\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187",
    "\u0003\u0002\u0002\u0002\u0187\u0188\u0005\u0112\u008a\u0002\u0188\u02fa",
    "\u0003\u0002\u0002\u0002\u0189\u018a\u0007\u001a\u0002\u0002\u018a\u018b",
    "\u0005\u0118\u008d\u0002\u018b\u018f\u0007\u0160\u0002\u0002\u018c\u018d",
    "\u0005\u0118\u008d\u0002\u018d\u018e\u0005\u00b0Y\u0002\u018e\u0190",
    "\u0003\u0002\u0002\u0002\u018f\u018c\u0003\u0002\u0002\u0002\u0190\u0191",
    "\u0003\u0002\u0002\u0002\u0191\u018f\u0003\u0002\u0002\u0002\u0191\u0192",
    "\u0003\u0002\u0002\u0002\u0192\u0194\u0003\u0002\u0002\u0002\u0193\u0195",
    "\u0005\u0118\u008d\u0002\u0194\u0193\u0003\u0002\u0002\u0002\u0194\u0195",
    "\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0197",
    "\u0005\u0112\u008a\u0002\u0197\u02fa\u0003\u0002\u0002\u0002\u0198\u0199",
    "\u0007\u001b\u0002\u0002\u0199\u019a\u0005\u0118\u008d\u0002\u019a\u01a0",
    "\u0005\u00e4s\u0002\u019b\u019c\u0005\u0118\u008d\u0002\u019c\u019d",
    "\u0005p9\u0002\u019d\u019f\u0003\u0002\u0002\u0002\u019e\u019b\u0003",
    "\u0002\u0002\u0002\u019f\u01a2\u0003\u0002\u0002\u0002\u01a0\u019e\u0003",
    "\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a4\u0003",
    "\u0002\u0002\u0002\u01a2\u01a0\u0003\u0002\u0002\u0002\u01a3\u01a5\u0005",
    ".\u0018\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003",
    "\u0002\u0002\u0002\u01a5\u01a7\u0003\u0002\u0002\u0002\u01a6\u01a8\u0005",
    "\u0118\u008d\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002\u01a7\u01a8\u0003",
    "\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01aa\u0005",
    "\u0112\u008a\u0002\u01aa\u02fa\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007",
    "\u001c\u0002\u0002\u01ac\u01ad\u0005\u0118\u008d\u0002\u01ad\u01b3\u0007",
    "\u0160\u0002\u0002\u01ae\u01af\u0005\u0118\u008d\u0002\u01af\u01b0\u0005",
    "n8\u0002\u01b0\u01b2\u0003\u0002\u0002\u0002\u01b1\u01ae\u0003\u0002",
    "\u0002\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002\u01b3\u01b1\u0003\u0002",
    "\u0002\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4\u01b7\u0003\u0002",
    "\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b6\u01b8\u0005\u0118",
    "\u008d\u0002\u01b7\u01b6\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002",
    "\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9\u01ba\u0005\u0112",
    "\u008a\u0002\u01ba\u02fa\u0003\u0002\u0002\u0002\u01bb\u01bf\u0007\u001d",
    "\u0002\u0002\u01bc\u01bd\u0005\u0118\u008d\u0002\u01bd\u01be\u0005j",
    "6\u0002\u01be\u01c0\u0003\u0002\u0002\u0002\u01bf\u01bc\u0003\u0002",
    "\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1\u01bf\u0003\u0002",
    "\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c4\u0003\u0002",
    "\u0002\u0002\u01c3\u01c5\u0005\u0118\u008d\u0002\u01c4\u01c3\u0003\u0002",
    "\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002",
    "\u0002\u0002\u01c6\u01c7\u0005\u0112\u008a\u0002\u01c7\u02fa\u0003\u0002",
    "\u0002\u0002\u01c8\u01c9\u0007\u001e\u0002\u0002\u01c9\u01ca\u0005\u0118",
    "\u008d\u0002\u01ca\u01ce\u0007\u0160\u0002\u0002\u01cb\u01cc\u0005\u0118",
    "\u008d\u0002\u01cc\u01cd\u0005h5\u0002\u01cd\u01cf\u0003\u0002\u0002",
    "\u0002\u01ce\u01cb\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002",
    "\u0002\u01d0\u01ce\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002",
    "\u0002\u01d1\u01d3\u0003\u0002\u0002\u0002\u01d2\u01d4\u0005\u0118\u008d",
    "\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002",
    "\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d6\u0005\u0112\u008a",
    "\u0002\u01d6\u02fa\u0003\u0002\u0002\u0002\u01d7\u01d8\u0007\u001f\u0002",
    "\u0002\u01d8\u01d9\u0005\u0118\u008d\u0002\u01d9\u01dd\u0007\u0160\u0002",
    "\u0002\u01da\u01db\u0005\u0118\u008d\u0002\u01db\u01dc\u0005f4\u0002",
    "\u01dc\u01de\u0003\u0002\u0002\u0002\u01dd\u01da\u0003\u0002\u0002\u0002",
    "\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u01dd\u0003\u0002\u0002\u0002",
    "\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e2\u0003\u0002\u0002\u0002",
    "\u01e1\u01e3\u0005\u0118\u008d\u0002\u01e2\u01e1\u0003\u0002\u0002\u0002",
    "\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002\u0002\u0002",
    "\u01e4\u01e5\u0005\u0112\u008a\u0002\u01e5\u02fa\u0003\u0002\u0002\u0002",
    "\u01e6\u01e7\u0007 \u0002\u0002\u01e7\u01e8\u0005\u0118\u008d\u0002",
    "\u01e8\u01e9\u0007!\u0002\u0002\u01e9\u01ea\u0005\u0114\u008b\u0002",
    "\u01ea\u01eb\u0007\u0160\u0002\u0002\u01eb\u01ec\u0005\u011a\u008e\u0002",
    "\u01ec\u01ed\u0007\u0160\u0002\u0002\u01ed\u01ef\u0005\u0116\u008c\u0002",
    "\u01ee\u01f0\u0005\u0118\u008d\u0002\u01ef\u01ee\u0003\u0002\u0002\u0002",
    "\u01ef\u01f0\u0003\u0002\u0002\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002",
    "\u01f1\u01f2\u0005\u0112\u008a\u0002\u01f2\u02fa\u0003\u0002\u0002\u0002",
    "\u01f3\u01f9\u0007\"\u0002\u0002\u01f4\u01f5\u0005\u0118\u008d\u0002",
    "\u01f5\u01f6\u0005\u0010\t\u0002\u01f6\u01f8\u0003\u0002\u0002\u0002",
    "\u01f7\u01f4\u0003\u0002\u0002\u0002\u01f8\u01fb\u0003\u0002\u0002\u0002",
    "\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002",
    "\u01fa\u01fd\u0003\u0002\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002",
    "\u01fc\u01fe\u0005\u0118\u008d\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002",
    "\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe\u01ff\u0003\u0002\u0002\u0002",
    "\u01ff\u02fa\u0005\u0112\u008a\u0002\u0200\u0201\t\u0006\u0002\u0002",
    "\u0201\u0202\u0005\u0118\u008d\u0002\u0202\u0204\u0005\u00f8}\u0002",
    "\u0203\u0205\u0005\u0118\u008d\u0002\u0204\u0203\u0003\u0002\u0002\u0002",
    "\u0204\u0205\u0003\u0002\u0002\u0002\u0205\u0206\u0003\u0002\u0002\u0002",
    "\u0206\u0207\u0005\u0112\u008a\u0002\u0207\u02fa\u0003\u0002\u0002\u0002",
    "\u0208\u0209\t\u0007\u0002\u0002\u0209\u020a\u0005\u0118\u008d\u0002",
    "\u020a\u020c\u0005\u00eav\u0002\u020b\u020d\u0005\u0118\u008d\u0002",
    "\u020c\u020b\u0003\u0002\u0002\u0002\u020c\u020d\u0003\u0002\u0002\u0002",
    "\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f\u0005\u0112\u008a\u0002",
    "\u020f\u02fa\u0003\u0002\u0002\u0002\u0210\u0211\u0007\'\u0002\u0002",
    "\u0211\u0212\u0005\u0118\u008d\u0002\u0212\u0216\u0007\u0160\u0002\u0002",
    "\u0213\u0214\u0005\u0118\u008d\u0002\u0214\u0215\t\b\u0002\u0002\u0215",
    "\u0217\u0003\u0002\u0002\u0002\u0216\u0213\u0003\u0002\u0002\u0002\u0216",
    "\u0217\u0003\u0002\u0002\u0002\u0217\u0219\u0003\u0002\u0002\u0002\u0218",
    "\u021a\u0005\u0118\u008d\u0002\u0219\u0218\u0003\u0002\u0002\u0002\u0219",
    "\u021a\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b",
    "\u021c\u0005\u0112\u008a\u0002\u021c\u02fa\u0003\u0002\u0002\u0002\u021d",
    "\u021e\u0007(\u0002\u0002\u021e\u021f\u0005\u0118\u008d\u0002\u021f",
    "\u0226\u0007\u0160\u0002\u0002\u0220\u0221\u0005\u0118\u008d\u0002\u0221",
    "\u0222\u0007)\u0002\u0002\u0222\u0223\u0005\u0114\u008b\u0002\u0223",
    "\u0224\t\t\u0002\u0002\u0224\u0225\u0005\u0116\u008c\u0002\u0225\u0227",
    "\u0003\u0002\u0002\u0002\u0226\u0220\u0003\u0002\u0002\u0002\u0226\u0227",
    "\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002\u0002\u0228\u022a",
    "\u0005\u0118\u008d\u0002\u0229\u0228\u0003\u0002\u0002\u0002\u0229\u022a",
    "\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022c",
    "\u0005\u0112\u008a\u0002\u022c\u02fa\u0003\u0002\u0002\u0002\u022d\u022e",
    "\u0007-\u0002\u0002\u022e\u022f\u0005\u0118\u008d\u0002\u022f\u0230",
    "\u0007\u0160\u0002\u0002\u0230\u0231\u0005\u0118\u008d\u0002\u0231\u0237",
    "\u0005\u00f0y\u0002\u0232\u0233\u0005\u0118\u008d\u0002\u0233\u0234",
    "\u0005d3\u0002\u0234\u0236\u0003\u0002\u0002\u0002\u0235\u0232\u0003",
    "\u0002\u0002\u0002\u0236\u0239\u0003\u0002\u0002\u0002\u0237\u0235\u0003",
    "\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u023b\u0003",
    "\u0002\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002\u023a\u023c\u0005",
    "\u0118\u008d\u0002\u023b\u023a\u0003\u0002\u0002\u0002\u023b\u023c\u0003",
    "\u0002\u0002\u0002\u023c\u023d\u0003\u0002\u0002\u0002\u023d\u023e\u0005",
    "\u0112\u008a\u0002\u023e\u02fa\u0003\u0002\u0002\u0002\u023f\u0240\u0007",
    ".\u0002\u0002\u0240\u0241\u0005\u0118\u008d\u0002\u0241\u0243\u0005",
    "\u0012\n\u0002\u0242\u0244\u0005\u0118\u008d\u0002\u0243\u0242\u0003",
    "\u0002\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244\u0245\u0003",
    "\u0002\u0002\u0002\u0245\u0246\u0005\u0112\u008a\u0002\u0246\u02fa\u0003",
    "\u0002\u0002\u0002\u0247\u0248\u0007/\u0002\u0002\u0248\u0249\u0005",
    "\u0118\u008d\u0002\u0249\u024a\u0007\u0160\u0002\u0002\u024a\u024b\u0005",
    "\u0118\u008d\u0002\u024b\u024d\u0005X-\u0002\u024c\u024e\u0005\u0118",
    "\u008d\u0002\u024d\u024c\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002",
    "\u0002\u0002\u024e\u024f\u0003\u0002\u0002\u0002\u024f\u0250\u0005\u0112",
    "\u008a\u0002\u0250\u02fa\u0003\u0002\u0002\u0002\u0251\u0255\u00070",
    "\u0002\u0002\u0252\u0253\u0005\u0118\u008d\u0002\u0253\u0254\u0005T",
    "+\u0002\u0254\u0256\u0003\u0002\u0002\u0002\u0255\u0252\u0003\u0002",
    "\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0255\u0003\u0002",
    "\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258\u025a\u0003\u0002",
    "\u0002\u0002\u0259\u025b\u0005\u0118\u008d\u0002\u025a\u0259\u0003\u0002",
    "\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002",
    "\u0002\u0002\u025c\u025d\u0005\u0112\u008a\u0002\u025d\u02fa\u0003\u0002",
    "\u0002\u0002\u025e\u025f\u00071\u0002\u0002\u025f\u0260\u0005\u0118",
    "\u008d\u0002\u0260\u0264\u0007\u0160\u0002\u0002\u0261\u0262\u0005\u0118",
    "\u008d\u0002\u0262\u0263\u0005N(\u0002\u0263\u0265\u0003\u0002\u0002",
    "\u0002\u0264\u0261\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002",
    "\u0002\u0266\u0264\u0003\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002",
    "\u0002\u0267\u0269\u0003\u0002\u0002\u0002\u0268\u026a\u0005.\u0018",
    "\u0002\u0269\u0268\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002",
    "\u0002\u026a\u026c\u0003\u0002\u0002\u0002\u026b\u026d\u0005\u0118\u008d",
    "\u0002\u026c\u026b\u0003\u0002\u0002\u0002\u026c\u026d\u0003\u0002\u0002",
    "\u0002\u026d\u026e\u0003\u0002\u0002\u0002\u026e\u026f\u0005\u0112\u008a",
    "\u0002\u026f\u02fa\u0003\u0002\u0002\u0002\u0270\u0271\u00072\u0002",
    "\u0002\u0271\u0272\u0005\u0118\u008d\u0002\u0272\u0276\u0007\u0160\u0002",
    "\u0002\u0273\u0274\u0005\u0118\u008d\u0002\u0274\u0275\u0005J&\u0002",
    "\u0275\u0277\u0003\u0002\u0002\u0002\u0276\u0273\u0003\u0002\u0002\u0002",
    "\u0277\u0278\u0003\u0002\u0002\u0002\u0278\u0276\u0003\u0002\u0002\u0002",
    "\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027b\u0003\u0002\u0002\u0002",
    "\u027a\u027c\u0005\u0118\u008d\u0002\u027b\u027a\u0003\u0002\u0002\u0002",
    "\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027d\u0003\u0002\u0002\u0002",
    "\u027d\u027e\u0005\u0112\u008a\u0002\u027e\u02fa\u0003\u0002\u0002\u0002",
    "\u027f\u0280\u00073\u0002\u0002\u0280\u0281\u0005\u0118\u008d\u0002",
    "\u0281\u0285\u0007\u0160\u0002\u0002\u0282\u0283\u0005\u0118\u008d\u0002",
    "\u0283\u0284\u0005> \u0002\u0284\u0286\u0003\u0002\u0002\u0002\u0285",
    "\u0282\u0003\u0002\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287",
    "\u0285\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288",
    "\u028a\u0003\u0002\u0002\u0002\u0289\u028b\u0005\u0118\u008d\u0002\u028a",
    "\u0289\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028b",
    "\u028c\u0003\u0002\u0002\u0002\u028c\u028d\u0005\u0112\u008a\u0002\u028d",
    "\u02fa\u0003\u0002\u0002\u0002\u028e\u028f\u00074\u0002\u0002\u028f",
    "\u0290\u0005\u0118\u008d\u0002\u0290\u0291\u0007\u0160\u0002\u0002\u0291",
    "\u0292\u0005\u0118\u008d\u0002\u0292\u0294\u00058\u001d\u0002\u0293",
    "\u0295\u0005\u0118\u008d\u0002\u0294\u0293\u0003\u0002\u0002\u0002\u0294",
    "\u0295\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002\u0296",
    "\u0297\u0005\u0112\u008a\u0002\u0297\u02fa\u0003\u0002\u0002\u0002\u0298",
    "\u0299\u00075\u0002\u0002\u0299\u029a\u0005\u0118\u008d\u0002\u029a",
    "\u029c\u00050\u0019\u0002\u029b\u029d\u0005\u0118\u008d\u0002\u029c",
    "\u029b\u0003\u0002\u0002\u0002\u029c\u029d\u0003\u0002\u0002\u0002\u029d",
    "\u029e\u0003\u0002\u0002\u0002\u029e\u029f\u0005\u0112\u008a\u0002\u029f",
    "\u02fa\u0003\u0002\u0002\u0002\u02a0\u02a1\u00076\u0002\u0002\u02a1",
    "\u02a2\u0005\u0118\u008d\u0002\u02a2\u02a4\u00054\u001b\u0002\u02a3",
    "\u02a5\u0005\u0118\u008d\u0002\u02a4\u02a3\u0003\u0002\u0002\u0002\u02a4",
    "\u02a5\u0003\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6",
    "\u02a7\u0005\u0112\u008a\u0002\u02a7\u02fa\u0003\u0002\u0002\u0002\u02a8",
    "\u02a9\u00077\u0002\u0002\u02a9\u02aa\u0005\u0118\u008d\u0002\u02aa",
    "\u02ae\u0007\u0160\u0002\u0002\u02ab\u02ac\u0005\u0118\u008d\u0002\u02ac",
    "\u02ad\u0005&\u0014\u0002\u02ad\u02af\u0003\u0002\u0002\u0002\u02ae",
    "\u02ab\u0003\u0002\u0002\u0002\u02af\u02b0\u0003\u0002\u0002\u0002\u02b0",
    "\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1",
    "\u02b3\u0003\u0002\u0002\u0002\u02b2\u02b4\u0005\u0118\u008d\u0002\u02b3",
    "\u02b2\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4",
    "\u02b5\u0003\u0002\u0002\u0002\u02b5\u02c1\u0005\u0112\u008a\u0002\u02b6",
    "\u02b8\u0005(\u0015\u0002\u02b7\u02b6\u0003\u0002\u0002\u0002\u02b8",
    "\u02b9\u0003\u0002\u0002\u0002\u02b9\u02b7\u0003\u0002\u0002\u0002\u02b9",
    "\u02ba\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb",
    "\u02bd\u00078\u0002\u0002\u02bc\u02be\u0005\u0118\u008d\u0002\u02bd",
    "\u02bc\u0003\u0002\u0002\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02be",
    "\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c0\u0005\u0112\u008a\u0002\u02c0",
    "\u02c2\u0003\u0002\u0002\u0002\u02c1\u02b7\u0003\u0002\u0002\u0002\u02c1",
    "\u02c2\u0003\u0002\u0002\u0002\u02c2\u02fa\u0003\u0002\u0002\u0002\u02c3",
    "\u02fa\u0005\u0016\f\u0002\u02c4\u02c5\u00079\u0002\u0002\u02c5\u02c6",
    "\u0005\u0118\u008d\u0002\u02c6\u02ca\u0007\u0160\u0002\u0002\u02c7\u02c8",
    "\u0005\u0118\u008d\u0002\u02c8\u02c9\u0005\"\u0012\u0002\u02c9\u02cb",
    "\u0003\u0002\u0002\u0002\u02ca\u02c7\u0003\u0002\u0002\u0002\u02cb\u02cc",
    "\u0003\u0002\u0002\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd",
    "\u0003\u0002\u0002\u0002\u02cd\u02cf\u0003\u0002\u0002\u0002\u02ce\u02d0",
    "\u0005\u0118\u008d\u0002\u02cf\u02ce\u0003\u0002\u0002\u0002\u02cf\u02d0",
    "\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002\u02d1\u02d2",
    "\u0005\u0112\u008a\u0002\u02d2\u02fa\u0003\u0002\u0002\u0002\u02d3\u02d4",
    "\u0007:\u0002\u0002\u02d4\u02d5\u0005\u0118\u008d\u0002\u02d5\u02d7",
    "\u0007\u0160\u0002\u0002\u02d6\u02d8\u0005\u0118\u008d\u0002\u02d7\u02d6",
    "\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003\u0002\u0002\u0002\u02d8\u02d9",
    "\u0003\u0002\u0002\u0002\u02d9\u02da\u0005\u0112\u008a\u0002\u02da\u02fa",
    "\u0003\u0002\u0002\u0002\u02db\u02dc\u0007;\u0002\u0002\u02dc\u02dd",
    "\u0005\u0118\u008d\u0002\u02dd\u02e1\u0007\u0160\u0002\u0002\u02de\u02df",
    "\u0005\u0118\u008d\u0002\u02df\u02e0\u0005\u0014\u000b\u0002\u02e0\u02e2",
    "\u0003\u0002\u0002\u0002\u02e1\u02de\u0003\u0002\u0002\u0002\u02e2\u02e3",
    "\u0003\u0002\u0002\u0002\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e3\u02e4",
    "\u0003\u0002\u0002\u0002\u02e4\u02e6\u0003\u0002\u0002\u0002\u02e5\u02e7",
    "\u0005\u0118\u008d\u0002\u02e6\u02e5\u0003\u0002\u0002\u0002\u02e6\u02e7",
    "\u0003\u0002\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u02e9",
    "\u0005\u0112\u008a\u0002\u02e9\u02fa\u0003\u0002\u0002\u0002\u02ea\u02eb",
    "\u0007<\u0002\u0002\u02eb\u02ec\u0005\u0118\u008d\u0002\u02ec\u02f0",
    "\u0007\u0160\u0002\u0002\u02ed\u02ee\u0005\u0118\u008d\u0002\u02ee\u02ef",
    "\u0005\u0006\u0004\u0002\u02ef\u02f1\u0003\u0002\u0002\u0002\u02f0\u02ed",
    "\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2\u02f0",
    "\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f5",
    "\u0003\u0002\u0002\u0002\u02f4\u02f6\u0005\u0118\u008d\u0002\u02f5\u02f4",
    "\u0003\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f7",
    "\u0003\u0002\u0002\u0002\u02f7\u02f8\u0005\u0112\u008a\u0002\u02f8\u02fa",
    "\u0003\u0002\u0002\u0002\u02f9\u0125\u0003\u0002\u0002\u0002\u02f9\u0132",
    "\u0003\u0002\u0002\u0002\u02f9\u013a\u0003\u0002\u0002\u0002\u02f9\u0147",
    "\u0003\u0002\u0002\u0002\u02f9\u0154\u0003\u0002\u0002\u0002\u02f9\u015c",
    "\u0003\u0002\u0002\u0002\u02f9\u016b\u0003\u0002\u0002\u0002\u02f9\u017a",
    "\u0003\u0002\u0002\u0002\u02f9\u0189\u0003\u0002\u0002\u0002\u02f9\u0198",
    "\u0003\u0002\u0002\u0002\u02f9\u01ab\u0003\u0002\u0002\u0002\u02f9\u01bb",
    "\u0003\u0002\u0002\u0002\u02f9\u01c8\u0003\u0002\u0002\u0002\u02f9\u01d7",
    "\u0003\u0002\u0002\u0002\u02f9\u01e6\u0003\u0002\u0002\u0002\u02f9\u01f3",
    "\u0003\u0002\u0002\u0002\u02f9\u0200\u0003\u0002\u0002\u0002\u02f9\u0208",
    "\u0003\u0002\u0002\u0002\u02f9\u0210\u0003\u0002\u0002\u0002\u02f9\u021d",
    "\u0003\u0002\u0002\u0002\u02f9\u022d\u0003\u0002\u0002\u0002\u02f9\u023f",
    "\u0003\u0002\u0002\u0002\u02f9\u0247\u0003\u0002\u0002\u0002\u02f9\u0251",
    "\u0003\u0002\u0002\u0002\u02f9\u025e\u0003\u0002\u0002\u0002\u02f9\u0270",
    "\u0003\u0002\u0002\u0002\u02f9\u027f\u0003\u0002\u0002\u0002\u02f9\u028e",
    "\u0003\u0002\u0002\u0002\u02f9\u0298\u0003\u0002\u0002\u0002\u02f9\u02a0",
    "\u0003\u0002\u0002\u0002\u02f9\u02a8\u0003\u0002\u0002\u0002\u02f9\u02c3",
    "\u0003\u0002\u0002\u0002\u02f9\u02c4\u0003\u0002\u0002\u0002\u02f9\u02d3",
    "\u0003\u0002\u0002\u0002\u02f9\u02db\u0003\u0002\u0002\u0002\u02f9\u02ea",
    "\u0003\u0002\u0002\u0002\u02fa\u0005\u0003\u0002\u0002\u0002\u02fb\u0304",
    "\u0007=\u0002\u0002\u02fc\u02fd\t\n\u0002\u0002\u02fd\u02fe\u0005\u0114",
    "\u008b\u0002\u02fe\u02ff\u0005\u00e0q\u0002\u02ff\u0300\u0005\u0116",
    "\u008c\u0002\u0300\u0304\u0003\u0002\u0002\u0002\u0301\u0304\u0005\b",
    "\u0005\u0002\u0302\u0304\u0005\f\u0007\u0002\u0303\u02fb\u0003\u0002",
    "\u0002\u0002\u0303\u02fc\u0003\u0002\u0002\u0002\u0303\u0301\u0003\u0002",
    "\u0002\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0304\u0007\u0003\u0002",
    "\u0002\u0002\u0305\u0306\u0007@\u0002\u0002\u0306\u0307\u0005\u0114",
    "\u008b\u0002\u0307\u030d\u0005\n\u0006\u0002\u0308\u0309\u0005\u011a",
    "\u008e\u0002\u0309\u030a\u0005\n\u0006\u0002\u030a\u030c\u0003\u0002",
    "\u0002\u0002\u030b\u0308\u0003\u0002\u0002\u0002\u030c\u030f\u0003\u0002",
    "\u0002\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030d\u030e\u0003\u0002",
    "\u0002\u0002\u030e\u0310\u0003\u0002\u0002\u0002\u030f\u030d\u0003\u0002",
    "\u0002\u0002\u0310\u0311\u0005\u0116\u008c\u0002\u0311\t\u0003\u0002",
    "\u0002\u0002\u0312\u0314\u0005b2\u0002\u0313\u0315\u0007\u0161\u0002",
    "\u0002\u0314\u0313\u0003\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002",
    "\u0002\u0315\u0316\u0003\u0002\u0002\u0002\u0316\u031b\u0005\u00e0q",
    "\u0002\u0317\u0318\u0005\u00c4c\u0002\u0318\u0319\u0005\u00e2r\u0002",
    "\u0319\u031a\u0007A\u0002\u0002\u031a\u031c\u0003\u0002\u0002\u0002",
    "\u031b\u0317\u0003\u0002\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002",
    "\u031c\u000b\u0003\u0002\u0002\u0002\u031d\u031e\u0007B\u0002\u0002",
    "\u031e\u031f\u0005\u0114\u008b\u0002\u031f\u0320\u0005\u000e\b\u0002",
    "\u0320\u0321\u0005\u0116\u008c\u0002\u0321\r\u0003\u0002\u0002\u0002",
    "\u0322\u0324\u0005`1\u0002\u0323\u0325\u0007\u0161\u0002\u0002\u0324",
    "\u0323\u0003\u0002\u0002\u0002\u0324\u0325\u0003\u0002\u0002\u0002\u0325",
    "\u0326\u0003\u0002\u0002\u0002\u0326\u0327\u0005\u00e0q\u0002\u0327",
    "\u0328\u0005\u011a\u008e\u0002\u0328\u032a\u0005b2\u0002\u0329\u032b",
    "\u0007\u0161\u0002\u0002\u032a\u0329\u0003\u0002\u0002\u0002\u032a\u032b",
    "\u0003\u0002\u0002\u0002\u032b\u032c\u0003\u0002\u0002\u0002\u032c\u0331",
    "\u0005\u00e0q\u0002\u032d\u032e\u0005\u011a\u008e\u0002\u032e\u032f",
    "\u0005\u00e2r\u0002\u032f\u0330\u0007A\u0002\u0002\u0330\u0332\u0003",
    "\u0002\u0002\u0002\u0331\u032d\u0003\u0002\u0002\u0002\u0331\u0332\u0003",
    "\u0002\u0002\u0002\u0332\u000f\u0003\u0002\u0002\u0002\u0333\u0334\u0007",
    "C\u0002\u0002\u0334\u0335\u0005\u0114\u008b\u0002\u0335\u0336\u0007",
    "\u0160\u0002\u0002\u0336\u0337\u0005\u011a\u008e\u0002\u0337\u0338\u0007",
    "\u0160\u0002\u0002\u0338\u0339\u0005\u0116\u008c\u0002\u0339\u0341\u0003",
    "\u0002\u0002\u0002\u033a\u0341\u0007 \u0002\u0002\u033b\u033c\t\u000b",
    "\u0002\u0002\u033c\u033d\u0005\u0114\u008b\u0002\u033d\u033e\u0007\u0160",
    "\u0002\u0002\u033e\u033f\u0005\u0116\u008c\u0002\u033f\u0341\u0003\u0002",
    "\u0002\u0002\u0340\u0333\u0003\u0002\u0002\u0002\u0340\u033a\u0003\u0002",
    "\u0002\u0002\u0340\u033b\u0003\u0002\u0002\u0002\u0341\u0011\u0003\u0002",
    "\u0002\u0002\u0342\u0348\t\f\u0002\u0002\u0343\u0344\u0005\u0118\u008d",
    "\u0002\u0344\u0345\u0007\u0160\u0002\u0002\u0345\u0347\u0003\u0002\u0002",
    "\u0002\u0346\u0343\u0003\u0002\u0002\u0002\u0347\u034a\u0003\u0002\u0002",
    "\u0002\u0348\u0346\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002",
    "\u0002\u0349\u0013\u0003\u0002\u0002\u0002\u034a\u0348\u0003\u0002\u0002",
    "\u0002\u034b\u034c\t\r\u0002\u0002\u034c\u034d\u0007J\u0002\u0002\u034d",
    "\u034e\u0005\u0100\u0081\u0002\u034e\u034f\u0007K\u0002\u0002\u034f",
    "\u0015\u0003\u0002\u0002\u0002\u0350\u0351\u0007L\u0002\u0002\u0351",
    "\u0352\u0005\u0118\u008d\u0002\u0352\u0358\u0007\u0160\u0002\u0002\u0353",
    "\u0354\u0005\u0118\u008d\u0002\u0354\u0355\u0005$\u0013\u0002\u0355",
    "\u0357\u0003\u0002\u0002\u0002\u0356\u0353\u0003\u0002\u0002\u0002\u0357",
    "\u035a\u0003\u0002\u0002\u0002\u0358\u0356\u0003\u0002\u0002\u0002\u0358",
    "\u0359\u0003\u0002\u0002\u0002\u0359\u035c\u0003\u0002\u0002\u0002\u035a",
    "\u0358\u0003\u0002\u0002\u0002\u035b\u035d\u0005\u0118\u008d\u0002\u035c",
    "\u035b\u0003\u0002\u0002\u0002\u035c\u035d\u0003\u0002\u0002\u0002\u035d",
    "\u035e\u0003\u0002\u0002\u0002\u035e\u0363\u0005\u0112\u008a\u0002\u035f",
    "\u0361\u0007\u0161\u0002\u0002\u0360\u035f\u0003\u0002\u0002\u0002\u0360",
    "\u0361\u0003\u0002\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002\u0362",
    "\u0364\u0005\u0016\f\u0002\u0363\u0360\u0003\u0002\u0002\u0002\u0364",
    "\u0365\u0003\u0002\u0002\u0002\u0365\u0363\u0003\u0002\u0002\u0002\u0365",
    "\u0366\u0003\u0002\u0002\u0002\u0366\u0368\u0003\u0002\u0002\u0002\u0367",
    "\u0369\u0007\u0161\u0002\u0002\u0368\u0367\u0003\u0002\u0002\u0002\u0368",
    "\u0369\u0003\u0002\u0002\u0002\u0369\u036a\u0003\u0002\u0002\u0002\u036a",
    "\u036c\u00078\u0002\u0002\u036b\u036d\u0005\u0118\u008d\u0002\u036c",
    "\u036b\u0003\u0002\u0002\u0002\u036c\u036d\u0003\u0002\u0002\u0002\u036d",
    "\u036e\u0003\u0002\u0002\u0002\u036e\u036f\u0005\u0112\u008a\u0002\u036f",
    "\u03dc\u0003\u0002\u0002\u0002\u0370\u0371\t\u000e\u0002\u0002\u0371",
    "\u0372\u0005\u0118\u008d\u0002\u0372\u0378\u0007\u0160\u0002\u0002\u0373",
    "\u0374\u0005\u0118\u008d\u0002\u0374\u0375\u0005x=\u0002\u0375\u0377",
    "\u0003\u0002\u0002\u0002\u0376\u0373\u0003\u0002\u0002\u0002\u0377\u037a",
    "\u0003\u0002\u0002\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0378\u0379",
    "\u0003\u0002\u0002\u0002\u0379\u037c\u0003\u0002\u0002\u0002\u037a\u0378",
    "\u0003\u0002\u0002\u0002\u037b\u037d\u0005.\u0018\u0002\u037c\u037b",
    "\u0003\u0002\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037d\u037f",
    "\u0003\u0002\u0002\u0002\u037e\u0380\u0005\u0118\u008d\u0002\u037f\u037e",
    "\u0003\u0002\u0002\u0002\u037f\u0380\u0003\u0002\u0002\u0002\u0380\u0381",
    "\u0003\u0002\u0002\u0002\u0381\u0382\u0005\u0112\u008a\u0002\u0382\u03dc",
    "\u0003\u0002\u0002\u0002\u0383\u0384\u0007O\u0002\u0002\u0384\u0385",
    "\u0005\u0118\u008d\u0002\u0385\u038b\u0007\u0160\u0002\u0002\u0386\u0387",
    "\u0005\u0118\u008d\u0002\u0387\u0388\u0005v<\u0002\u0388\u038a\u0003",
    "\u0002\u0002\u0002\u0389\u0386\u0003\u0002\u0002\u0002\u038a\u038d\u0003",
    "\u0002\u0002\u0002\u038b\u0389\u0003\u0002\u0002\u0002\u038b\u038c\u0003",
    "\u0002\u0002\u0002\u038c\u038f\u0003\u0002\u0002\u0002\u038d\u038b\u0003",
    "\u0002\u0002\u0002\u038e\u0390\u0005.\u0018\u0002\u038f\u038e\u0003",
    "\u0002\u0002\u0002\u038f\u0390\u0003\u0002\u0002\u0002\u0390\u0392\u0003",
    "\u0002\u0002\u0002\u0391\u0393\u0005\u0118\u008d\u0002\u0392\u0391\u0003",
    "\u0002\u0002\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0394\u0003",
    "\u0002\u0002\u0002\u0394\u0395\u0005\u0112\u008a\u0002\u0395\u03dc\u0003",
    "\u0002\u0002\u0002\u0396\u0397\u0007P\u0002\u0002\u0397\u0398\u0005",
    "\u0118\u008d\u0002\u0398\u039e\u0007\u0160\u0002\u0002\u0399\u039a\u0005",
    "\u0118\u008d\u0002\u039a\u039b\u0005t;\u0002\u039b\u039d\u0003\u0002",
    "\u0002\u0002\u039c\u0399\u0003\u0002\u0002\u0002\u039d\u03a0\u0003\u0002",
    "\u0002\u0002\u039e\u039c\u0003\u0002\u0002\u0002\u039e\u039f\u0003\u0002",
    "\u0002\u0002\u039f\u03a2\u0003\u0002\u0002\u0002\u03a0\u039e\u0003\u0002",
    "\u0002\u0002\u03a1\u03a3\u0005.\u0018\u0002\u03a2\u03a1\u0003\u0002",
    "\u0002\u0002\u03a2\u03a3\u0003\u0002\u0002\u0002\u03a3\u03a5\u0003\u0002",
    "\u0002\u0002\u03a4\u03a6\u0005\u0118\u008d\u0002\u03a5\u03a4\u0003\u0002",
    "\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6\u03a7\u0003\u0002",
    "\u0002\u0002\u03a7\u03a8\u0005\u0112\u008a\u0002\u03a8\u03dc\u0003\u0002",
    "\u0002\u0002\u03a9\u03aa\u0007Q\u0002\u0002\u03aa\u03ab\u0005\u0118",
    "\u008d\u0002\u03ab\u03b1\u0007\u0160\u0002\u0002\u03ac\u03ad\u0005\u0118",
    "\u008d\u0002\u03ad\u03ae\u0005l7\u0002\u03ae\u03b0\u0003\u0002\u0002",
    "\u0002\u03af\u03ac\u0003\u0002\u0002\u0002\u03b0\u03b3\u0003\u0002\u0002",
    "\u0002\u03b1\u03af\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003\u0002\u0002",
    "\u0002\u03b2\u03b5\u0003\u0002\u0002\u0002\u03b3\u03b1\u0003\u0002\u0002",
    "\u0002\u03b4\u03b6\u0005.\u0018\u0002\u03b5\u03b4\u0003\u0002\u0002",
    "\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b8\u0003\u0002\u0002",
    "\u0002\u03b7\u03b9\u0005\u0118\u008d\u0002\u03b8\u03b7\u0003\u0002\u0002",
    "\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002",
    "\u0002\u03ba\u03bb\u0005\u0112\u008a\u0002\u03bb\u03dc\u0003\u0002\u0002",
    "\u0002\u03bc\u03bd\u0007R\u0002\u0002\u03bd\u03be\u0005\u0118\u008d",
    "\u0002\u03be\u03c2\u0007\u0160\u0002\u0002\u03bf\u03c0\u0005\u0118\u008d",
    "\u0002\u03c0\u03c1\u0005Z.\u0002\u03c1\u03c3\u0003\u0002\u0002\u0002",
    "\u03c2\u03bf\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002\u0002\u0002",
    "\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c4\u03c5\u0003\u0002\u0002\u0002",
    "\u03c5\u03c7\u0003\u0002\u0002\u0002\u03c6\u03c8\u0005\u0118\u008d\u0002",
    "\u03c7\u03c6\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002",
    "\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9\u03ca\u0005\u0112\u008a\u0002",
    "\u03ca\u03dc\u0003\u0002\u0002\u0002\u03cb\u03cc\u0007S\u0002\u0002",
    "\u03cc\u03cd\u0005\u0118\u008d\u0002\u03cd\u03d1\u0007\u0160\u0002\u0002",
    "\u03ce\u03cf\u0005\u0118\u008d\u0002\u03cf\u03d0\u0005\u0018\r\u0002",
    "\u03d0\u03d2\u0003\u0002\u0002\u0002\u03d1\u03ce\u0003\u0002\u0002\u0002",
    "\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3\u03d1\u0003\u0002\u0002\u0002",
    "\u03d3\u03d4\u0003\u0002\u0002\u0002\u03d4\u03d6\u0003\u0002\u0002\u0002",
    "\u03d5\u03d7\u0005\u0118\u008d\u0002\u03d6\u03d5\u0003\u0002\u0002\u0002",
    "\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7\u03d8\u0003\u0002\u0002\u0002",
    "\u03d8\u03d9\u0005\u0112\u008a\u0002\u03d9\u03dc\u0003\u0002\u0002\u0002",
    "\u03da\u03dc\u0005\u0112\u008a\u0002\u03db\u0350\u0003\u0002\u0002\u0002",
    "\u03db\u0370\u0003\u0002\u0002\u0002\u03db\u0383\u0003\u0002\u0002\u0002",
    "\u03db\u0396\u0003\u0002\u0002\u0002\u03db\u03a9\u0003\u0002\u0002\u0002",
    "\u03db\u03bc\u0003\u0002\u0002\u0002\u03db\u03cb\u0003\u0002\u0002\u0002",
    "\u03db\u03da\u0003\u0002\u0002\u0002\u03dc\u0017\u0003\u0002\u0002\u0002",
    "\u03dd\u03de\u0007T\u0002\u0002\u03de\u03e2\u0005\u00ceh\u0002\u03df",
    "\u03e2\u0005\u0092J\u0002\u03e0\u03e2\u0005\u001a\u000e\u0002\u03e1",
    "\u03dd\u0003\u0002\u0002\u0002\u03e1\u03df\u0003\u0002\u0002\u0002\u03e1",
    "\u03e0\u0003\u0002\u0002\u0002\u03e2\u0019\u0003\u0002\u0002\u0002\u03e3",
    "\u03e4\u0007U\u0002\u0002\u03e4\u03e5\u0005\u0114\u008b\u0002\u03e5",
    "\u03eb\u0005\u001e\u0010\u0002\u03e6\u03e7\u0005\u011a\u008e\u0002\u03e7",
    "\u03e8\u0005\u001e\u0010\u0002\u03e8\u03ea\u0003\u0002\u0002\u0002\u03e9",
    "\u03e6\u0003\u0002\u0002\u0002\u03ea\u03ed\u0003\u0002\u0002\u0002\u03eb",
    "\u03e9\u0003\u0002\u0002\u0002\u03eb\u03ec\u0003\u0002\u0002\u0002\u03ec",
    "\u03f1\u0003\u0002\u0002\u0002\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ee",
    "\u03ef\u0005\u011a\u008e\u0002\u03ef\u03f0\u0005\u001c\u000f\u0002\u03f0",
    "\u03f2\u0003\u0002\u0002\u0002\u03f1\u03ee\u0003\u0002\u0002\u0002\u03f1",
    "\u03f2\u0003\u0002\u0002\u0002\u03f2\u03f3\u0003\u0002\u0002\u0002\u03f3",
    "\u03f4\u0005\u0116\u008c\u0002\u03f4\u001b\u0003\u0002\u0002\u0002\u03f5",
    "\u03f6\u0007V\u0002\u0002\u03f6\u03f7\u0005\u00fe\u0080\u0002\u03f7",
    "\u001d\u0003\u0002\u0002\u0002\u03f8\u03fd\u0007\u0160\u0002\u0002\u03f9",
    "\u03fa\u0005\u0114\u008b\u0002\u03fa\u03fb\u0005 \u0011\u0002\u03fb",
    "\u03fc\u0005\u0116\u008c\u0002\u03fc\u03fe\u0003\u0002\u0002\u0002\u03fd",
    "\u03f9\u0003\u0002\u0002\u0002\u03fd\u03fe\u0003\u0002\u0002\u0002\u03fe",
    "\u001f\u0003\u0002\u0002\u0002\u03ff\u0400\u0007W\u0002\u0002\u0400",
    "\u0401\u0005\u0114\u008b\u0002\u0401\u0402\u0005\u010a\u0086\u0002\u0402",
    "\u0403\u0005\u011a\u008e\u0002\u0403\u0404\u0007\u015b\u0002\u0002\u0404",
    "\u0405\u0005\u0116\u008c\u0002\u0405!\u0003\u0002\u0002\u0002\u0406",
    "\u0407\t\u000f\u0002\u0002\u0407\u0408\u0005\u0114\u008b\u0002\u0408",
    "\u040c\u0007\u015b\u0002\u0002\u0409\u040a\u0005\u011a\u008e\u0002\u040a",
    "\u040b\u0005\u0102\u0082\u0002\u040b\u040d\u0003\u0002\u0002\u0002\u040c",
    "\u0409\u0003\u0002\u0002\u0002\u040c\u040d\u0003\u0002\u0002\u0002\u040d",
    "\u040e\u0003\u0002\u0002\u0002\u040e\u040f\u0005\u0116\u008c\u0002\u040f",
    "\u041a\u0003\u0002\u0002\u0002\u0410\u0415\u0007\u0010\u0002\u0002\u0411",
    "\u0412\u0005\u0114\u008b\u0002\u0412\u0413\u0005\u0102\u0082\u0002\u0413",
    "\u0414\u0005\u0116\u008c\u0002\u0414\u0416\u0003\u0002\u0002\u0002\u0415",
    "\u0411\u0003\u0002\u0002\u0002\u0415\u0416\u0003\u0002\u0002\u0002\u0416",
    "\u041a\u0003\u0002\u0002\u0002\u0417\u041a\u0005\u00d6l\u0002\u0418",
    "\u041a\u0005\u0106\u0084\u0002\u0419\u0406\u0003\u0002\u0002\u0002\u0419",
    "\u0410\u0003\u0002\u0002\u0002\u0419\u0417\u0003\u0002\u0002\u0002\u0419",
    "\u0418\u0003\u0002\u0002\u0002\u041a#\u0003\u0002\u0002\u0002\u041b",
    "\u041e\t\u0010\u0002\u0002\u041c\u041e\u0005\u0092J\u0002\u041d\u041b",
    "\u0003\u0002\u0002\u0002\u041d\u041c\u0003\u0002\u0002\u0002\u041e%",
    "\u0003\u0002\u0002\u0002\u041f\u0431\u0007\\\u0002\u0002\u0420\u0425",
    "\u0007\u0019\u0002\u0002\u0421\u0422\u0005\u0114\u008b\u0002\u0422\u0423",
    "\u0007]\u0002\u0002\u0423\u0424\u0005\u0116\u008c\u0002\u0424\u0426",
    "\u0003\u0002\u0002\u0002\u0425\u0421\u0003\u0002\u0002\u0002\u0425\u0426",
    "\u0003\u0002\u0002\u0002\u0426\u0431\u0003\u0002\u0002\u0002\u0427\u0431",
    "\u0007^\u0002\u0002\u0428\u0429\u0007_\u0002\u0002\u0429\u042c\u0005",
    "\u0114\u008b\u0002\u042a\u042d\u0005\u00eav\u0002\u042b\u042d\u0007",
    "\u015b\u0002\u0002\u042c\u042a\u0003\u0002\u0002\u0002\u042c\u042b\u0003",
    "\u0002\u0002\u0002\u042d\u042e\u0003\u0002\u0002\u0002\u042e\u042f\u0005",
    "\u0116\u008c\u0002\u042f\u0431\u0003\u0002\u0002\u0002\u0430\u041f\u0003",
    "\u0002\u0002\u0002\u0430\u0420\u0003\u0002\u0002\u0002\u0430\u0427\u0003",
    "\u0002\u0002\u0002\u0430\u0428\u0003\u0002\u0002\u0002\u0431\'\u0003",
    "\u0002\u0002\u0002\u0432\u0434\u0007\u0161\u0002\u0002\u0433\u0432\u0003",
    "\u0002\u0002\u0002\u0433\u0434\u0003\u0002\u0002\u0002\u0434\u0435\u0003",
    "\u0002\u0002\u0002\u0435\u043b\u0005*\u0016\u0002\u0436\u0437\u0005",
    "\u0118\u008d\u0002\u0437\u0438\u0005*\u0016\u0002\u0438\u043a\u0003",
    "\u0002\u0002\u0002\u0439\u0436\u0003\u0002\u0002\u0002\u043a\u043d\u0003",
    "\u0002\u0002\u0002\u043b\u0439\u0003\u0002\u0002\u0002\u043b\u043c\u0003",
    "\u0002\u0002\u0002\u043c\u043f\u0003\u0002\u0002\u0002\u043d\u043b\u0003",
    "\u0002\u0002\u0002\u043e\u0440\u0005\u0118\u008d\u0002\u043f\u043e\u0003",
    "\u0002\u0002\u0002\u043f\u0440\u0003\u0002\u0002\u0002\u0440\u0441\u0003",
    "\u0002\u0002\u0002\u0441\u0442\u0005\u0112\u008a\u0002\u0442)\u0003",
    "\u0002\u0002\u0002\u0443\u044a\u0007`\u0002\u0002\u0444\u044a\u0007",
    "a\u0002\u0002\u0445\u0446\u0005,\u0017\u0002\u0446\u0447\u0005H%\u0002",
    "\u0447\u0448\u0005,\u0017\u0002\u0448\u044a\u0003\u0002\u0002\u0002",
    "\u0449\u0443\u0003\u0002\u0002\u0002\u0449\u0444\u0003\u0002\u0002\u0002",
    "\u0449\u0445\u0003\u0002\u0002\u0002\u044a+\u0003\u0002\u0002\u0002",
    "\u044b\u044c\u0007b\u0002\u0002\u044c\u0450\u0005\u00f2z\u0002\u044d",
    "\u044e\u0007c\u0002\u0002\u044e\u0450\u0005\u00f2z\u0002\u044f\u044b",
    "\u0003\u0002\u0002\u0002\u044f\u044d\u0003\u0002\u0002\u0002\u0450-",
    "\u0003\u0002\u0002\u0002\u0451\u0452\u0005\u0118\u008d\u0002\u0452\u0453",
    "\u0005\u00e2r\u0002\u0453\u0454\u0005\u011a\u008e\u0002\u0454\u0455",
    "\u0005\u00e2r\u0002\u0455/\u0003\u0002\u0002\u0002\u0456\u045b\u0005",
    "2\u001a\u0002\u0457\u0458\u0007\u0161\u0002\u0002\u0458\u045a\u0005",
    "2\u001a\u0002\u0459\u0457\u0003\u0002\u0002\u0002\u045a\u045d\u0003",
    "\u0002\u0002\u0002\u045b\u0459\u0003\u0002\u0002\u0002\u045b\u045c\u0003",
    "\u0002\u0002\u0002\u045c1\u0003\u0002\u0002\u0002\u045d\u045b\u0003",
    "\u0002\u0002\u0002\u045e\u045f\u0007d\u0002\u0002\u045f\u0460\u0005",
    "\u010c\u0087\u0002\u04603\u0003\u0002\u0002\u0002\u0461\u0481\u0007",
    "e\u0002\u0002\u0462\u0481\u0007f\u0002\u0002\u0463\u0481\u0007g\u0002",
    "\u0002\u0464\u0481\u0007h\u0002\u0002\u0465\u0481\u0007i\u0002\u0002",
    "\u0466\u0481\u0007j\u0002\u0002\u0467\u0481\u0007k\u0002\u0002\u0468",
    "\u0481\u0007l\u0002\u0002\u0469\u0481\u0007m\u0002\u0002\u046a\u0481",
    "\u0007n\u0002\u0002\u046b\u0481\u0007o\u0002\u0002\u046c\u0481\u0007",
    "p\u0002\u0002\u046d\u0481\u0007q\u0002\u0002\u046e\u0481\u0007r\u0002",
    "\u0002\u046f\u0481\u0007s\u0002\u0002\u0470\u0481\u0007t\u0002\u0002",
    "\u0471\u0481\u0007u\u0002\u0002\u0472\u0481\u0007v\u0002\u0002\u0473",
    "\u0481\u0007w\u0002\u0002\u0474\u0481\u0007x\u0002\u0002\u0475\u0481",
    "\u0007y\u0002\u0002\u0476\u0481\u0007z\u0002\u0002\u0477\u0481\u0007",
    "{\u0002\u0002\u0478\u0481\u0007|\u0002\u0002\u0479\u0481\u0007}\u0002",
    "\u0002\u047a\u0481\u0007~\u0002\u0002\u047b\u0481\u0007\u007f\u0002",
    "\u0002\u047c\u047e\u0007\u0080\u0002\u0002\u047d\u047f\u00056\u001c",
    "\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002\u0002",
    "\u0002\u047f\u0481\u0003\u0002\u0002\u0002\u0480\u0461\u0003\u0002\u0002",
    "\u0002\u0480\u0462\u0003\u0002\u0002\u0002\u0480\u0463\u0003\u0002\u0002",
    "\u0002\u0480\u0464\u0003\u0002\u0002\u0002\u0480\u0465\u0003\u0002\u0002",
    "\u0002\u0480\u0466\u0003\u0002\u0002\u0002\u0480\u0467\u0003\u0002\u0002",
    "\u0002\u0480\u0468\u0003\u0002\u0002\u0002\u0480\u0469\u0003\u0002\u0002",
    "\u0002\u0480\u046a\u0003\u0002\u0002\u0002\u0480\u046b\u0003\u0002\u0002",
    "\u0002\u0480\u046c\u0003\u0002\u0002\u0002\u0480\u046d\u0003\u0002\u0002",
    "\u0002\u0480\u046e\u0003\u0002\u0002\u0002\u0480\u046f\u0003\u0002\u0002",
    "\u0002\u0480\u0470\u0003\u0002\u0002\u0002\u0480\u0471\u0003\u0002\u0002",
    "\u0002\u0480\u0472\u0003\u0002\u0002\u0002\u0480\u0473\u0003\u0002\u0002",
    "\u0002\u0480\u0474\u0003\u0002\u0002\u0002\u0480\u0475\u0003\u0002\u0002",
    "\u0002\u0480\u0476\u0003\u0002\u0002\u0002\u0480\u0477\u0003\u0002\u0002",
    "\u0002\u0480\u0478\u0003\u0002\u0002\u0002\u0480\u0479\u0003\u0002\u0002",
    "\u0002\u0480\u047a\u0003\u0002\u0002\u0002\u0480\u047b\u0003\u0002\u0002",
    "\u0002\u0480\u047c\u0003\u0002\u0002\u0002\u0481\u0490\u0003\u0002\u0002",
    "\u0002\u0482\u0483\t\u0011\u0002\u0002\u0483\u0484\u0005\u0118\u008d",
    "\u0002\u0484\u0485\u0007\u015b\u0002\u0002\u0485\u0490\u0003\u0002\u0002",
    "\u0002\u0486\u0490\u0005\u00b6\\\u0002\u0487\u0488\t\u0012\u0002\u0002",
    "\u0488\u0489\u0005\u0118\u008d\u0002\u0489\u048a\u0007\u0160\u0002\u0002",
    "\u048a\u0490\u0003\u0002\u0002\u0002\u048b\u048c\t\u0013\u0002\u0002",
    "\u048c\u048d\u0005\u0118\u008d\u0002\u048d\u048e\u0005\u00f8}\u0002",
    "\u048e\u0490\u0003\u0002\u0002\u0002\u048f\u0480\u0003\u0002\u0002\u0002",
    "\u048f\u0482\u0003\u0002\u0002\u0002\u048f\u0486\u0003\u0002\u0002\u0002",
    "\u048f\u0487\u0003\u0002\u0002\u0002\u048f\u048b\u0003\u0002\u0002\u0002",
    "\u04905\u0003\u0002\u0002\u0002\u0491\u0492\u0005\u0118\u008d\u0002",
    "\u0492\u0493\t\u0014\u0002\u0002\u04937\u0003\u0002\u0002\u0002\u0494",
    "\u0495\u0007\u008e\u0002\u0002\u0495\u0496\u0005\u0114\u008b\u0002\u0496",
    "\u049c\u0005:\u001e\u0002\u0497\u0498\u0005\u0118\u008d\u0002\u0498",
    "\u0499\u0005:\u001e\u0002\u0499\u049b\u0003\u0002\u0002\u0002\u049a",
    "\u0497\u0003\u0002\u0002\u0002\u049b\u049e\u0003\u0002\u0002\u0002\u049c",
    "\u049a\u0003\u0002\u0002\u0002\u049c\u049d\u0003\u0002\u0002\u0002\u049d",
    "\u049f\u0003\u0002\u0002\u0002\u049e\u049c\u0003\u0002\u0002\u0002\u049f",
    "\u04a0\u0005\u0116\u008c\u0002\u04a09\u0003\u0002\u0002\u0002\u04a1",
    "\u04a2\u0007\u0160\u0002\u0002\u04a2\u04a3\u0005\u0114\u008b\u0002\u04a3",
    "\u04a4\u0007\u015b\u0002\u0002\u04a4\u04a5\u0005\u011a\u008e\u0002\u04a5",
    "\u04a6\u0007\u0160\u0002\u0002\u04a6\u04a7\u0005\u0116\u008c\u0002\u04a7",
    ";\u0003\u0002\u0002\u0002\u04a8\u04a9\u0007\u008f\u0002\u0002\u04a9",
    "\u04aa\u0005\u0114\u008b\u0002\u04aa\u04ab\u0005\u00eav\u0002\u04ab",
    "\u04ac\u0005\u0116\u008c\u0002\u04ac=\u0003\u0002\u0002\u0002\u04ad",
    "\u04f8\u0005z>\u0002\u04ae\u04f8\t\u0015\u0002\u0002\u04af\u04b4\u0007",
    "\u0092\u0002\u0002\u04b0\u04b1\u0005\u0114\u008b\u0002\u04b1\u04b2\u0005",
    "\u00e6t\u0002\u04b2\u04b3\u0005\u0116\u008c\u0002\u04b3\u04b5\u0003",
    "\u0002\u0002\u0002\u04b4\u04b0\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003",
    "\u0002\u0002\u0002\u04b5\u04f8\u0003\u0002\u0002\u0002\u04b6\u04b7\u0007",
    "\u0093\u0002\u0002\u04b7\u04b8\u0005\u0114\u008b\u0002\u04b8\u04b9\u0005",
    "\u00eav\u0002\u04b9\u04ba\u0005\u0116\u008c\u0002\u04ba\u04f8\u0003",
    "\u0002\u0002\u0002\u04bb\u04bc\u0007\u0094\u0002\u0002\u04bc\u04be\u0005",
    "\u0114\u008b\u0002\u04bd\u04bf\u0007d\u0002\u0002\u04be\u04bd\u0003",
    "\u0002\u0002\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003",
    "\u0002\u0002\u0002\u04c0\u04c1\u0007\u0160\u0002\u0002\u04c1\u04c2\u0005",
    "\u0116\u008c\u0002\u04c2\u04f8\u0003\u0002\u0002\u0002\u04c3\u04c4\t",
    "\u0016\u0002\u0002\u04c4\u04f8\u0005\u00d0i\u0002\u04c5\u04f8\u0005",
    "<\u001f\u0002\u04c6\u04c7\u0007\u0096\u0002\u0002\u04c7\u04c8\u0005",
    "\u0114\u008b\u0002\u04c8\u04c9\t\u0017\u0002\u0002\u04c9\u04ca\u0005",
    "\u0116\u008c\u0002\u04ca\u04f8\u0003\u0002\u0002\u0002\u04cb\u04cc\u0007",
    "\u009c\u0002\u0002\u04cc\u04cf\u0005\u0114\u008b\u0002\u04cd\u04d0\u0007",
    "\u0160\u0002\u0002\u04ce\u04d0\u0005\u011c\u008f\u0002\u04cf\u04cd\u0003",
    "\u0002\u0002\u0002\u04cf\u04ce\u0003\u0002\u0002\u0002\u04d0\u04d1\u0003",
    "\u0002\u0002\u0002\u04d1\u04d2\u0005\u0116\u008c\u0002\u04d2\u04f8\u0003",
    "\u0002\u0002\u0002\u04d3\u04d4\u0007\u009d\u0002\u0002\u04d4\u04d5\u0005",
    "\u0114\u008b\u0002\u04d5\u04d6\u0007\u0160\u0002\u0002\u04d6\u04d7\u0005",
    "\u011a\u008e\u0002\u04d7\u04d8\u0005\u00f8}\u0002\u04d8\u04d9\u0005",
    "\u011a\u008e\u0002\u04d9\u04da\u0005\u00ecw\u0002\u04da\u04db\u0005",
    "\u011a\u008e\u0002\u04db\u04dc\t\u0018\u0002\u0002\u04dc\u04dd\u0005",
    "\u0116\u008c\u0002\u04dd\u04f8\u0003\u0002\u0002\u0002\u04de\u04df\u0007",
    "\u00a0\u0002\u0002\u04df\u04e0\u0005\u0114\u008b\u0002\u04e0\u04e6\u0005",
    "F$\u0002\u04e1\u04e2\u0005\u011a\u008e\u0002\u04e2\u04e3\u0005F$\u0002",
    "\u04e3\u04e5\u0003\u0002\u0002\u0002\u04e4\u04e1\u0003\u0002\u0002\u0002",
    "\u04e5\u04e8\u0003\u0002\u0002\u0002\u04e6\u04e4\u0003\u0002\u0002\u0002",
    "\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u04e9\u0003\u0002\u0002\u0002",
    "\u04e8\u04e6\u0003\u0002\u0002\u0002\u04e9\u04ea\u0005\u0116\u008c\u0002",
    "\u04ea\u04f8\u0003\u0002\u0002\u0002\u04eb\u04f5\u0007\u00a1\u0002\u0002",
    "\u04ec\u04ed\u0005\u0114\u008b\u0002\u04ed\u04f1\u0005D#\u0002\u04ee",
    "\u04ef\u0005\u011a\u008e\u0002\u04ef\u04f0\u0005D#\u0002\u04f0\u04f2",
    "\u0003\u0002\u0002\u0002\u04f1\u04ee\u0003\u0002\u0002\u0002\u04f1\u04f2",
    "\u0003\u0002\u0002\u0002\u04f2\u04f3\u0003\u0002\u0002\u0002\u04f3\u04f4",
    "\u0005\u0116\u008c\u0002\u04f4\u04f6\u0003\u0002\u0002\u0002\u04f5\u04ec",
    "\u0003\u0002\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f8",
    "\u0003\u0002\u0002\u0002\u04f7\u04ad\u0003\u0002\u0002\u0002\u04f7\u04ae",
    "\u0003\u0002\u0002\u0002\u04f7\u04af\u0003\u0002\u0002\u0002\u04f7\u04b6",
    "\u0003\u0002\u0002\u0002\u04f7\u04bb\u0003\u0002\u0002\u0002\u04f7\u04c3",
    "\u0003\u0002\u0002\u0002\u04f7\u04c5\u0003\u0002\u0002\u0002\u04f7\u04c6",
    "\u0003\u0002\u0002\u0002\u04f7\u04cb\u0003\u0002\u0002\u0002\u04f7\u04d3",
    "\u0003\u0002\u0002\u0002\u04f7\u04de\u0003\u0002\u0002\u0002\u04f7\u04eb",
    "\u0003\u0002\u0002\u0002\u04f8?\u0003\u0002\u0002\u0002\u04f9\u04fa",
    "\u0007\u00a2\u0002\u0002\u04fa\u04fb\u0005\u0114\u008b\u0002\u04fb\u04fc",
    "\u0007\u0160\u0002\u0002\u04fc\u04fd\u0005\u0116\u008c\u0002\u04fdA",
    "\u0003\u0002\u0002\u0002\u04fe\u04ff\u0007\u00a3\u0002\u0002\u04ff\u0500",
    "\u0005\u0114\u008b\u0002\u0500\u0501\u0005\u00eav\u0002\u0501\u0502",
    "\u0005\u0116\u008c\u0002\u0502C\u0003\u0002\u0002\u0002\u0503\u0506",
    "\u0005@!\u0002\u0504\u0506\u0005B\"\u0002\u0505\u0503\u0003\u0002\u0002",
    "\u0002\u0505\u0504\u0003\u0002\u0002\u0002\u0506E\u0003\u0002\u0002",
    "\u0002\u0507\u0508\u0005\u00f8}\u0002\u0508\u0509\u0007\u00a4\u0002",
    "\u0002\u0509\u0517\u0003\u0002\u0002\u0002\u050a\u050b\u0005\u00f8}",
    "\u0002\u050b\u050c\u0005H%\u0002\u050c\u050d\u0005\u00f8}\u0002\u050d",
    "\u0517\u0003\u0002\u0002\u0002\u050e\u050f\u0007\u0160\u0002\u0002\u050f",
    "\u0517\u0007\u00a5\u0002\u0002\u0510\u0511\u0007\u0160\u0002\u0002\u0511",
    "\u0512\u0007\u00a6\u0002\u0002\u0512\u0513\u0007\u0160\u0002\u0002\u0513",
    "\u0514\u0005H%\u0002\u0514\u0515\u0005\u00f8}\u0002\u0515\u0517\u0003",
    "\u0002\u0002\u0002\u0516\u0507\u0003\u0002\u0002\u0002\u0516\u050a\u0003",
    "\u0002\u0002\u0002\u0516\u050e\u0003\u0002\u0002\u0002\u0516\u0510\u0003",
    "\u0002\u0002\u0002\u0517G\u0003\u0002\u0002\u0002\u0518\u051a\u0007",
    "\u0161\u0002\u0002\u0519\u0518\u0003\u0002\u0002\u0002\u0519\u051a\u0003",
    "\u0002\u0002\u0002\u051a\u051b\u0003\u0002\u0002\u0002\u051b\u051d\u0007",
    "\u00a7\u0002\u0002\u051c\u051e\u0007\u0161\u0002\u0002\u051d\u051c\u0003",
    "\u0002\u0002\u0002\u051d\u051e\u0003\u0002\u0002\u0002\u051eI\u0003",
    "\u0002\u0002\u0002\u051f\u0538\u0005z>\u0002\u0520\u0538\u0007\u00a8",
    "\u0002\u0002\u0521\u0522\u0007\u00a9\u0002\u0002\u0522\u0538\u0005\u00fa",
    "~\u0002\u0523\u0524\u0007\u00aa\u0002\u0002\u0524\u0538\u0005\u00c6",
    "d\u0002\u0525\u0526\u0007\u00ab\u0002\u0002\u0526\u0538\u0005\u00d0",
    "i\u0002\u0527\u0534\u0007\u00ac\u0002\u0002\u0528\u0529\u0005\u0114",
    "\u008b\u0002\u0529\u052f\u0005L\'\u0002\u052a\u052b\u0005\u011a\u008e",
    "\u0002\u052b\u052c\u0005L\'\u0002\u052c\u052e\u0003\u0002\u0002\u0002",
    "\u052d\u052a\u0003\u0002\u0002\u0002\u052e\u0531\u0003\u0002\u0002\u0002",
    "\u052f\u052d\u0003\u0002\u0002\u0002\u052f\u0530\u0003\u0002\u0002\u0002",
    "\u0530\u0532\u0003\u0002\u0002\u0002\u0531\u052f\u0003\u0002\u0002\u0002",
    "\u0532\u0533\u0005\u0116\u008c\u0002\u0533\u0535\u0003\u0002\u0002\u0002",
    "\u0534\u0528\u0003\u0002\u0002\u0002\u0534\u0535\u0003\u0002\u0002\u0002",
    "\u0535\u0538\u0003\u0002\u0002\u0002\u0536\u0538\u0005L\'\u0002\u0537",
    "\u051f\u0003\u0002\u0002\u0002\u0537\u0520\u0003\u0002\u0002\u0002\u0537",
    "\u0521\u0003\u0002\u0002\u0002\u0537\u0523\u0003\u0002\u0002\u0002\u0537",
    "\u0525\u0003\u0002\u0002\u0002\u0537\u0527\u0003\u0002\u0002\u0002\u0537",
    "\u0536\u0003\u0002\u0002\u0002\u0538K\u0003\u0002\u0002\u0002\u0539",
    "\u053a\t\u0019\u0002\u0002\u053a\u053b\u0005\u00fa~\u0002\u053bM\u0003",
    "\u0002\u0002\u0002\u053c\u0566\u0005z>\u0002\u053d\u053e\u0007\u00b0",
    "\u0002\u0002\u053e\u053f\u0005\u0114\u008b\u0002\u053f\u0545\u0005P",
    ")\u0002\u0540\u0541\u0005\u0118\u008d\u0002\u0541\u0542\u0005P)\u0002",
    "\u0542\u0544\u0003\u0002\u0002\u0002\u0543\u0540\u0003\u0002\u0002\u0002",
    "\u0544\u0547\u0003\u0002\u0002\u0002\u0545\u0543\u0003\u0002\u0002\u0002",
    "\u0545\u0546\u0003\u0002\u0002\u0002\u0546\u0549\u0003\u0002\u0002\u0002",
    "\u0547\u0545\u0003\u0002\u0002\u0002\u0548\u054a\u0005R*\u0002\u0549",
    "\u0548\u0003\u0002\u0002\u0002\u0549\u054a\u0003\u0002\u0002\u0002\u054a",
    "\u054b\u0003\u0002\u0002\u0002\u054b\u054c\u0005\u0116\u008c\u0002\u054c",
    "\u0566\u0003\u0002\u0002\u0002\u054d\u054e\u0007\u000f\u0002\u0002\u054e",
    "\u0566\u0005\u00ceh\u0002\u054f\u0550\u0007\u00b1\u0002\u0002\u0550",
    "\u0566\u0005\u00d0i\u0002\u0551\u0552\u0007\u00b1\u0002\u0002\u0552",
    "\u0553\u0005\u0114\u008b\u0002\u0553\u0554\u0007\u00b2\u0002\u0002\u0554",
    "\u0555\u0005\u0116\u008c\u0002\u0555\u0566\u0003\u0002\u0002\u0002\u0556",
    "\u0566\u0005\u008eH\u0002\u0557\u0566\u0005\u0094K\u0002\u0558\u0559",
    "\u0007\u0092\u0002\u0002\u0559\u055a\u0005\u0114\u008b\u0002\u055a\u055b",
    "\u0005\u00eav\u0002\u055b\u055c\u0005\u0116\u008c\u0002\u055c\u0566",
    "\u0003\u0002\u0002\u0002\u055d\u0566\u0005\u009eP\u0002\u055e\u055f",
    "\u0007 \u0002\u0002\u055f\u0560\u0005\u0114\u008b\u0002\u0560\u0561",
    "\u0007\u0160\u0002\u0002\u0561\u0562\u0005\u011a\u008e\u0002\u0562\u0563",
    "\u0007\u0160\u0002\u0002\u0563\u0564\u0005\u0116\u008c\u0002\u0564\u0566",
    "\u0003\u0002\u0002\u0002\u0565\u053c\u0003\u0002\u0002\u0002\u0565\u053d",
    "\u0003\u0002\u0002\u0002\u0565\u054d\u0003\u0002\u0002\u0002\u0565\u054f",
    "\u0003\u0002\u0002\u0002\u0565\u0551\u0003\u0002\u0002\u0002\u0565\u0556",
    "\u0003\u0002\u0002\u0002\u0565\u0557\u0003\u0002\u0002\u0002\u0565\u0558",
    "\u0003\u0002\u0002\u0002\u0565\u055d\u0003\u0002\u0002\u0002\u0565\u055e",
    "\u0003\u0002\u0002\u0002\u0566O\u0003\u0002\u0002\u0002\u0567\u056c",
    "\u0005\u00f8}\u0002\u0568\u0569\u0007\u00b3\u0002\u0002\u0569\u056b",
    "\u0005\u00f8}\u0002\u056a\u0568\u0003\u0002\u0002\u0002\u056b\u056e",
    "\u0003\u0002\u0002\u0002\u056c\u056a\u0003\u0002\u0002\u0002\u056c\u056d",
    "\u0003\u0002\u0002\u0002\u056dQ\u0003\u0002\u0002\u0002\u056e\u056c",
    "\u0003\u0002\u0002\u0002\u056f\u0570\u0005\u011a\u008e\u0002\u0570\u0571",
    "\u0007\u00b4\u0002\u0002\u0571S\u0003\u0002\u0002\u0002\u0572\u057d",
    "\u0005z>\u0002\u0573\u0574\u0007\u0014\u0002\u0002\u0574\u057d\u0005",
    "\u00d0i\u0002\u0575\u0576\u0007\u00b5\u0002\u0002\u0576\u0577\u0005",
    "\u0114\u008b\u0002\u0577\u0578\u0005\u00e2r\u0002\u0578\u0579\u0005",
    "\u0116\u008c\u0002\u0579\u057d\u0003\u0002\u0002\u0002\u057a\u057d\u0007",
    "\u00b6\u0002\u0002\u057b\u057d\u0007\u00b7\u0002\u0002\u057c\u0572\u0003",
    "\u0002\u0002\u0002\u057c\u0573\u0003\u0002\u0002\u0002\u057c\u0575\u0003",
    "\u0002\u0002\u0002\u057c\u057a\u0003\u0002\u0002\u0002\u057c\u057b\u0003",
    "\u0002\u0002\u0002\u057dU\u0003\u0002\u0002\u0002\u057e\u057f\t\u001a",
    "\u0002\u0002\u057f\u0580\u0005\u0114\u008b\u0002\u0580\u0581\u0007\u0160",
    "\u0002\u0002\u0581\u0582\u0005\u011a\u008e\u0002\u0582\u0583\u0007\u0160",
    "\u0002\u0002\u0583\u0584\u0005\u0116\u008c\u0002\u0584W\u0003\u0002",
    "\u0002\u0002\u0585\u0589\u0005V,\u0002\u0586\u0587\u0005\u0118\u008d",
    "\u0002\u0587\u0588\u0005V,\u0002\u0588\u058a\u0003\u0002\u0002\u0002",
    "\u0589\u0586\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002",
    "\u058aY\u0003\u0002\u0002\u0002\u058b\u058c\u0007\u00ba\u0002\u0002",
    "\u058c\u058d\u0005\u0114\u008b\u0002\u058d\u058e\u0007\u0160\u0002\u0002",
    "\u058e\u058f\u0005\u011a\u008e\u0002\u058f\u0590\u0005\u010e\u0088\u0002",
    "\u0590\u0591\u0005\u0116\u008c\u0002\u0591\u05ba\u0003\u0002\u0002\u0002",
    "\u0592\u05ba\u0007\u00bb\u0002\u0002\u0593\u05ba\u0007\u00bc\u0002\u0002",
    "\u0594\u0595\u0007\u00bd\u0002\u0002\u0595\u0596\u0005\u0114\u008b\u0002",
    "\u0596\u059b\u0005\u00dep\u0002\u0597\u059c\u0005\u011a\u008e\u0002",
    "\u0598\u059a\u0007\u0161\u0002\u0002\u0599\u0598\u0003\u0002\u0002\u0002",
    "\u0599\u059a\u0003\u0002\u0002\u0002\u059a\u059c\u0003\u0002\u0002\u0002",
    "\u059b\u0597\u0003\u0002\u0002\u0002\u059b\u0599\u0003\u0002\u0002\u0002",
    "\u059c\u059d\u0003\u0002\u0002\u0002\u059d\u05a2\u0005^0\u0002\u059e",
    "\u05a3\u0005\u011a\u008e\u0002\u059f\u05a1\u0007\u0161\u0002\u0002\u05a0",
    "\u059f\u0003\u0002\u0002\u0002\u05a0\u05a1\u0003\u0002\u0002\u0002\u05a1",
    "\u05a3\u0003\u0002\u0002\u0002\u05a2\u059e\u0003\u0002\u0002\u0002\u05a2",
    "\u05a0\u0003\u0002\u0002\u0002\u05a3\u05a4\u0003\u0002\u0002\u0002\u05a4",
    "\u05a5\u0005\u00dep\u0002\u05a5\u05a6\u0005\u0116\u008c\u0002\u05a6",
    "\u05ba\u0003\u0002\u0002\u0002\u05a7\u05a8\u0007\u00be\u0002\u0002\u05a8",
    "\u05a9\u0005\u0114\u008b\u0002\u05a9\u05aa\t\u001b\u0002\u0002\u05aa",
    "\u05ab\u0005\u0116\u008c\u0002\u05ab\u05ba\u0003\u0002\u0002\u0002\u05ac",
    "\u05ad\u0007\u00c0\u0002\u0002\u05ad\u05ae\u0005\u0114\u008b\u0002\u05ae",
    "\u05b4\u0005\\/\u0002\u05af\u05b0\u0005\u011a\u008e\u0002\u05b0\u05b1",
    "\u0005\\/\u0002\u05b1\u05b3\u0003\u0002\u0002\u0002\u05b2\u05af\u0003",
    "\u0002\u0002\u0002\u05b3\u05b6\u0003\u0002\u0002\u0002\u05b4\u05b2\u0003",
    "\u0002\u0002\u0002\u05b4\u05b5\u0003\u0002\u0002\u0002\u05b5\u05b7\u0003",
    "\u0002\u0002\u0002\u05b6\u05b4\u0003\u0002\u0002\u0002\u05b7\u05b8\u0005",
    "\u0116\u008c\u0002\u05b8\u05ba\u0003\u0002\u0002\u0002\u05b9\u058b\u0003",
    "\u0002\u0002\u0002\u05b9\u0592\u0003\u0002\u0002\u0002\u05b9\u0593\u0003",
    "\u0002\u0002\u0002\u05b9\u0594\u0003\u0002\u0002\u0002\u05b9\u05a7\u0003",
    "\u0002\u0002\u0002\u05b9\u05ac\u0003\u0002\u0002\u0002\u05ba[\u0003",
    "\u0002\u0002\u0002\u05bb\u05bd\u0007a\u0002\u0002\u05bc\u05bb\u0003",
    "\u0002\u0002\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002\u05bd\u05be\u0003",
    "\u0002\u0002\u0002\u05be\u05bf\u0007\u0160\u0002\u0002\u05bf]\u0003",
    "\u0002\u0002\u0002\u05c0\u05c7\u0007\u00a7\u0002\u0002\u05c1\u05c7\u0007",
    "\u00c1\u0002\u0002\u05c2\u05c7\u0007\u00c2\u0002\u0002\u05c3\u05c7\u0007",
    "\u00c3\u0002\u0002\u05c4\u05c7\u0005b2\u0002\u05c5\u05c7\u0005`1\u0002",
    "\u05c6\u05c0\u0003\u0002\u0002\u0002\u05c6\u05c1\u0003\u0002\u0002\u0002",
    "\u05c6\u05c2\u0003\u0002\u0002\u0002\u05c6\u05c3\u0003\u0002\u0002\u0002",
    "\u05c6\u05c4\u0003\u0002\u0002\u0002\u05c6\u05c5\u0003\u0002\u0002\u0002",
    "\u05c7_\u0003\u0002\u0002\u0002\u05c8\u05c9\t\u001c\u0002\u0002\u05c9",
    "a\u0003\u0002\u0002\u0002\u05ca\u05cb\t\u001d\u0002\u0002\u05cbc\u0003",
    "\u0002\u0002\u0002\u05cc\u05d5\u0005\u00b6\\\u0002\u05cd\u05ce\u0007",
    "+\u0002\u0002\u05ce\u05d5\u0005\u00ceh\u0002\u05cf\u05d1\u0007\u0092",
    "\u0002\u0002\u05d0\u05d2\u0005\u00ceh\u0002\u05d1\u05d0\u0003\u0002",
    "\u0002\u0002\u05d1\u05d2\u0003\u0002\u0002\u0002\u05d2\u05d5\u0003\u0002",
    "\u0002\u0002\u05d3\u05d5\u0007\u00c7\u0002\u0002\u05d4\u05cc\u0003\u0002",
    "\u0002\u0002\u05d4\u05cd\u0003\u0002\u0002\u0002\u05d4\u05cf\u0003\u0002",
    "\u0002\u0002\u05d4\u05d3\u0003\u0002\u0002\u0002\u05d5e\u0003\u0002",
    "\u0002\u0002\u05d6\u05e5\u0005\u00eex\u0002\u05d7\u05d8\t\u001e\u0002",
    "\u0002\u05d8\u05e5\u0005\u00d0i\u0002\u05d9\u05da\u0007\u00ca\u0002",
    "\u0002\u05da\u05db\u0005\u0114\u008b\u0002\u05db\u05dc\t\u001f\u0002",
    "\u0002\u05dc\u05dd\u0005\u0116\u008c\u0002\u05dd\u05e5\u0003\u0002\u0002",
    "\u0002\u05de\u05df\t \u0002\u0002\u05df\u05e0\u0005\u0114\u008b\u0002",
    "\u05e0\u05e1\u0005\u00f0y\u0002\u05e1\u05e2\u0005\u0116\u008c\u0002",
    "\u05e2\u05e5\u0003\u0002\u0002\u0002\u05e3\u05e5\u0007\u0160\u0002\u0002",
    "\u05e4\u05d6\u0003\u0002\u0002\u0002\u05e4\u05d7\u0003\u0002\u0002\u0002",
    "\u05e4\u05d9\u0003\u0002\u0002\u0002\u05e4\u05de\u0003\u0002\u0002\u0002",
    "\u05e4\u05e3\u0003\u0002\u0002\u0002\u05e5g\u0003\u0002\u0002\u0002",
    "\u05e6\u05f0\u0005\u00eex\u0002\u05e7\u05f0\t!\u0002\u0002\u05e8\u05e9",
    "\t\"\u0002\u0002\u05e9\u05f0\u0005\u00d0i\u0002\u05ea\u05eb\u0007\u00d5",
    "\u0002\u0002\u05eb\u05ec\u0005\u0114\u008b\u0002\u05ec\u05ed\t#\u0002",
    "\u0002\u05ed\u05ee\u0005\u0116\u008c\u0002\u05ee\u05f0\u0003\u0002\u0002",
    "\u0002\u05ef\u05e6\u0003\u0002\u0002\u0002\u05ef\u05e7\u0003\u0002\u0002",
    "\u0002\u05ef\u05e8\u0003\u0002\u0002\u0002\u05ef\u05ea\u0003\u0002\u0002",
    "\u0002\u05f0i\u0003\u0002\u0002\u0002\u05f1\u05f2\u0007\u00d8\u0002",
    "\u0002\u05f2\u05f5\u0005\u00c6d\u0002\u05f3\u05f5\u0005\u00eex\u0002",
    "\u05f4\u05f1\u0003\u0002\u0002\u0002\u05f4\u05f3\u0003\u0002\u0002\u0002",
    "\u05f5k\u0003\u0002\u0002\u0002\u05f6\u05f7\u0007\u00d9\u0002\u0002",
    "\u05f7\u05f8\u0005\u0114\u008b\u0002\u05f8\u05f9\u0007\u0160\u0002\u0002",
    "\u05f9\u05fa\u0005\u011a\u008e\u0002\u05fa\u05fb\u0007\u0160\u0002\u0002",
    "\u05fb\u05fc\u0005\u0116\u008c\u0002\u05fc\u0614\u0003\u0002\u0002\u0002",
    "\u05fd\u0614\u0007\u00da\u0002\u0002\u05fe\u0601\t$\u0002\u0002\u05ff",
    "\u0602\u0005\u00d0i\u0002\u0600\u0602\u0005\u00d2j\u0002\u0601\u05ff",
    "\u0003\u0002\u0002\u0002\u0601\u0600\u0003\u0002\u0002\u0002\u0602\u0614",
    "\u0003\u0002\u0002\u0002\u0603\u0604\u0007\u00dd\u0002\u0002\u0604\u0605",
    "\u0005\u0114\u008b\u0002\u0605\u0606\u0005\u00eav\u0002\u0606\u0607",
    "\u0005\u0116\u008c\u0002\u0607\u0614\u0003\u0002\u0002\u0002\u0608\u0609",
    "\u0007\u00de\u0002\u0002\u0609\u060a\u0005\u0114\u008b\u0002\u060a\u060e",
    "\u0007\u0160\u0002\u0002\u060b\u060c\u0005\u011a\u008e\u0002\u060c\u060d",
    "\t%\u0002\u0002\u060d\u060f\u0003\u0002\u0002\u0002\u060e\u060b\u0003",
    "\u0002\u0002\u0002\u060e\u060f\u0003\u0002\u0002\u0002\u060f\u0610\u0003",
    "\u0002\u0002\u0002\u0610\u0611\u0005\u0116\u008c\u0002\u0611\u0614\u0003",
    "\u0002\u0002\u0002\u0612\u0614\u0005\u009eP\u0002\u0613\u05f6\u0003",
    "\u0002\u0002\u0002\u0613\u05fd\u0003\u0002\u0002\u0002\u0613\u05fe\u0003",
    "\u0002\u0002\u0002\u0613\u0603\u0003\u0002\u0002\u0002\u0613\u0608\u0003",
    "\u0002\u0002\u0002\u0613\u0612\u0003\u0002\u0002\u0002\u0614m\u0003",
    "\u0002\u0002\u0002\u0615\u0616\u0007\u00e1\u0002\u0002\u0616\u0629\u0005",
    "\u00c6d\u0002\u0617\u0618\u0007\u00e2\u0002\u0002\u0618\u0619\u0005",
    "\u0114\u008b\u0002\u0619\u061d\u0005\u00f8}\u0002\u061a\u061b\u0005",
    "\u011a\u008e\u0002\u061b\u061c\u0007\u015b\u0002\u0002\u061c\u061e\u0003",
    "\u0002\u0002\u0002\u061d\u061a\u0003\u0002\u0002\u0002\u061d\u061e\u0003",
    "\u0002\u0002\u0002\u061e\u061f\u0003\u0002\u0002\u0002\u061f\u0620\u0005",
    "\u0116\u008c\u0002\u0620\u0629\u0003\u0002\u0002\u0002\u0621\u0626\u0007",
    "\u00e3\u0002\u0002\u0622\u0623\u0005\u0114\u008b\u0002\u0623\u0624\u0005",
    "\u00eav\u0002\u0624\u0625\u0005\u0116\u008c\u0002\u0625\u0627\u0003",
    "\u0002\u0002\u0002\u0626\u0622\u0003\u0002\u0002\u0002\u0626\u0627\u0003",
    "\u0002\u0002\u0002\u0627\u0629\u0003\u0002\u0002\u0002\u0628\u0615\u0003",
    "\u0002\u0002\u0002\u0628\u0617\u0003\u0002\u0002\u0002\u0628\u0621\u0003",
    "\u0002\u0002\u0002\u0629o\u0003\u0002\u0002\u0002\u062a\u0649\u0005",
    "r:\u0002\u062b\u0649\u0005\u008aF\u0002\u062c\u0649\u0005|?\u0002\u062d",
    "\u0649\u0007\u00e4\u0002\u0002\u062e\u062f\u0007\u00e5\u0002\u0002\u062f",
    "\u0630\u0005\u0114\u008b\u0002\u0630\u0631\t&\u0002\u0002\u0631\u0632",
    "\u0005\u0116\u008c\u0002\u0632\u0649\u0003\u0002\u0002\u0002\u0633\u0649",
    "\u0005\u008cG\u0002\u0634\u0649\u0005\u0094K\u0002\u0635\u0649\u0005",
    "\u008eH\u0002\u0636\u0649\u0005\u009eP\u0002\u0637\u0649\u0005\u0092",
    "J\u0002\u0638\u0639\u0007M\u0002\u0002\u0639\u063a\u0005\u0114\u008b",
    "\u0002\u063a\u063e\u0007\u015b\u0002\u0002\u063b\u063c\u0005\u011a\u008e",
    "\u0002\u063c\u063d\u0007\u015b\u0002\u0002\u063d\u063f\u0003\u0002\u0002",
    "\u0002\u063e\u063b\u0003\u0002\u0002\u0002\u063e\u063f\u0003\u0002\u0002",
    "\u0002\u063f\u0640\u0003\u0002\u0002\u0002\u0640\u0641\u0005\u0116\u008c",
    "\u0002\u0641\u0649\u0003\u0002\u0002\u0002\u0642\u0643\u0007\u00e6\u0002",
    "\u0002\u0643\u0644\u0005\u0114\u008b\u0002\u0644\u0645\u0007\u00cd\u0002",
    "\u0002\u0645\u0646\u0005\u0116\u008c\u0002\u0646\u0649\u0003\u0002\u0002",
    "\u0002\u0647\u0649\u0007\u00e7\u0002\u0002\u0648\u062a\u0003\u0002\u0002",
    "\u0002\u0648\u062b\u0003\u0002\u0002\u0002\u0648\u062c\u0003\u0002\u0002",
    "\u0002\u0648\u062d\u0003\u0002\u0002\u0002\u0648\u062e\u0003\u0002\u0002",
    "\u0002\u0648\u0633\u0003\u0002\u0002\u0002\u0648\u0634\u0003\u0002\u0002",
    "\u0002\u0648\u0635\u0003\u0002\u0002\u0002\u0648\u0636\u0003\u0002\u0002",
    "\u0002\u0648\u0637\u0003\u0002\u0002\u0002\u0648\u0638\u0003\u0002\u0002",
    "\u0002\u0648\u0642\u0003\u0002\u0002\u0002\u0648\u0647\u0003\u0002\u0002",
    "\u0002\u0649q\u0003\u0002\u0002\u0002\u064a\u0653\u0007a\u0002\u0002",
    "\u064b\u064d\u0007`\u0002\u0002\u064c\u064b\u0003\u0002\u0002\u0002",
    "\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u064e\u0003\u0002\u0002\u0002",
    "\u064e\u0650\u0007\u0160\u0002\u0002\u064f\u0651\u0007a\u0002\u0002",
    "\u0650\u064f\u0003\u0002\u0002\u0002\u0650\u0651\u0003\u0002\u0002\u0002",
    "\u0651\u0653\u0003\u0002\u0002\u0002\u0652\u064a\u0003\u0002\u0002\u0002",
    "\u0652\u064c\u0003\u0002\u0002\u0002\u0653s\u0003\u0002\u0002\u0002",
    "\u0654\u0655\t\'\u0002\u0002\u0655\u0668\u0005\u00ceh\u0002\u0656\u0657",
    "\t(\u0002\u0002\u0657\u0668\u0005\u00d0i\u0002\u0658\u0659\u0007\u00eb",
    "\u0002\u0002\u0659\u065a\u0005\u0114\u008b\u0002\u065a\u065b\u0005\u00e2",
    "r\u0002\u065b\u065c\u0005\u0116\u008c\u0002\u065c\u0668\u0003\u0002",
    "\u0002\u0002\u065d\u0668\u0005\u009eP\u0002\u065e\u0668\u0005\u0094",
    "K\u0002\u065f\u0668\u0005\u008eH\u0002\u0660\u0668\u0007\u00da\u0002",
    "\u0002\u0661\u0664\u0007\u00db\u0002\u0002\u0662\u0665\u0005\u00d0i",
    "\u0002\u0663\u0665\u0005\u00d2j\u0002\u0664\u0662\u0003\u0002\u0002",
    "\u0002\u0664\u0663\u0003\u0002\u0002\u0002\u0665\u0668\u0003\u0002\u0002",
    "\u0002\u0666\u0668\u0005\u0092J\u0002\u0667\u0654\u0003\u0002\u0002",
    "\u0002\u0667\u0656\u0003\u0002\u0002\u0002\u0667\u0658\u0003\u0002\u0002",
    "\u0002\u0667\u065d\u0003\u0002\u0002\u0002\u0667\u065e\u0003\u0002\u0002",
    "\u0002\u0667\u065f\u0003\u0002\u0002\u0002\u0667\u0660\u0003\u0002\u0002",
    "\u0002\u0667\u0661\u0003\u0002\u0002\u0002\u0667\u0666\u0003\u0002\u0002",
    "\u0002\u0668u\u0003\u0002\u0002\u0002\u0669\u0675\u0005x=\u0002\u066a",
    "\u066f\t)\u0002\u0002\u066b\u066c\u0005\u0114\u008b\u0002\u066c\u066d",
    "\u0005\u00e2r\u0002\u066d\u066e\u0005\u0116\u008c\u0002\u066e\u0670",
    "\u0003\u0002\u0002\u0002\u066f\u066b\u0003\u0002\u0002\u0002\u066f\u0670",
    "\u0003\u0002\u0002\u0002\u0670\u0675\u0003\u0002\u0002\u0002\u0671\u0675",
    "\u0005\u008cG\u0002\u0672\u0673\u0007\u00ee\u0002\u0002\u0673\u0675",
    "\u0005\u00d0i\u0002\u0674\u0669\u0003\u0002\u0002\u0002\u0674\u066a",
    "\u0003\u0002\u0002\u0002\u0674\u0671\u0003\u0002\u0002\u0002\u0674\u0672",
    "\u0003\u0002\u0002\u0002\u0675w\u0003\u0002\u0002\u0002\u0676\u06db",
    "\t*\u0002\u0002\u0677\u0678\u0007\u00de\u0002\u0002\u0678\u0679\u0005",
    "\u0114\u008b\u0002\u0679\u067d\u0007\u0160\u0002\u0002\u067a\u067b\u0005",
    "\u011a\u008e\u0002\u067b\u067c\t%\u0002\u0002\u067c\u067e\u0003\u0002",
    "\u0002\u0002\u067d\u067a\u0003\u0002\u0002\u0002\u067d\u067e\u0003\u0002",
    "\u0002\u0002\u067e\u067f\u0003\u0002\u0002\u0002\u067f\u0680\u0005\u0116",
    "\u008c\u0002\u0680\u06db\u0003\u0002\u0002\u0002\u0681\u06db\u0005|",
    "?\u0002\u0682\u0687\u0007\u00f7\u0002\u0002\u0683\u0684\u0005\u0114",
    "\u008b\u0002\u0684\u0685\t+\u0002\u0002\u0685\u0686\u0005\u0116\u008c",
    "\u0002\u0686\u0688\u0003\u0002\u0002\u0002\u0687\u0683\u0003\u0002\u0002",
    "\u0002\u0687\u0688\u0003\u0002\u0002\u0002\u0688\u06db\u0003\u0002\u0002",
    "\u0002\u0689\u068e\u0007\u00fa\u0002\u0002\u068a\u068b\u0005\u0114\u008b",
    "\u0002\u068b\u068c\u0007\u00fb\u0002\u0002\u068c\u068d\u0005\u0116\u008c",
    "\u0002\u068d\u068f\u0003\u0002\u0002\u0002\u068e\u068a\u0003\u0002\u0002",
    "\u0002\u068e\u068f\u0003\u0002\u0002\u0002\u068f\u06db\u0003\u0002\u0002",
    "\u0002\u0690\u0691\u0007\u00fc\u0002\u0002\u0691\u06db\u0005\u00ceh",
    "\u0002\u0692\u0693\u0007T\u0002\u0002\u0693\u0696\u0005\u0114\u008b",
    "\u0002\u0694\u0695\u0007\u0160\u0002\u0002\u0695\u0697\u0007\u0161\u0002",
    "\u0002\u0696\u0694\u0003\u0002\u0002\u0002\u0696\u0697\u0003\u0002\u0002",
    "\u0002\u0697\u0698\u0003\u0002\u0002\u0002\u0698\u0699\u0007\u0160\u0002",
    "\u0002\u0699\u069a\u0005\u0116\u008c\u0002\u069a\u06db\u0003\u0002\u0002",
    "\u0002\u069b\u06db\u0005\u0092J\u0002\u069c\u06db\u0005\u0090I\u0002",
    "\u069d\u06db\u0005\u008aF\u0002\u069e\u06a0\t,\u0002\u0002\u069f\u06a1",
    "\u0005\u00d0i\u0002\u06a0\u069f\u0003\u0002\u0002\u0002\u06a0\u06a1",
    "\u0003\u0002\u0002\u0002\u06a1\u06db\u0003\u0002\u0002\u0002\u06a2\u06a3",
    "\t-\u0002\u0002\u06a3\u06db\u0005\u00d0i\u0002\u06a4\u06a7\u0007\u00db",
    "\u0002\u0002\u06a5\u06a8\u0005\u00d0i\u0002\u06a6\u06a8\u0005\u00d2",
    "j\u0002\u06a7\u06a5\u0003\u0002\u0002\u0002\u06a7\u06a6\u0003\u0002",
    "\u0002\u0002\u06a8\u06db\u0003\u0002\u0002\u0002\u06a9\u06db\u0005\u0094",
    "K\u0002\u06aa\u06db\u0005\u008eH\u0002\u06ab\u06b0\u0007\u0104\u0002",
    "\u0002\u06ac\u06ad\u0005\u0114\u008b\u0002\u06ad\u06ae\u0005\u009cO",
    "\u0002\u06ae\u06af\u0005\u0116\u008c\u0002\u06af\u06b1\u0003\u0002\u0002",
    "\u0002\u06b0\u06ac\u0003\u0002\u0002\u0002\u06b0\u06b1\u0003\u0002\u0002",
    "\u0002\u06b1\u06db\u0003\u0002\u0002\u0002\u06b2\u06db\u0005\u009eP",
    "\u0002\u06b3\u06b4\u0007\u0105\u0002\u0002\u06b4\u06b5\u0005\u0114\u008b",
    "\u0002\u06b5\u06b7\u0007\u0160\u0002\u0002\u06b6\u06b8\u0005\u0082B",
    "\u0002\u06b7\u06b6\u0003\u0002\u0002\u0002\u06b7\u06b8\u0003\u0002\u0002",
    "\u0002\u06b8\u06ba\u0003\u0002\u0002\u0002\u06b9\u06bb\u0005\u0084C",
    "\u0002\u06ba\u06b9\u0003\u0002\u0002\u0002\u06ba\u06bb\u0003\u0002\u0002",
    "\u0002\u06bb\u06bc\u0003\u0002\u0002\u0002\u06bc\u06bd\u0005\u0116\u008c",
    "\u0002\u06bd\u06db\u0003\u0002\u0002\u0002\u06be\u06bf\u0007\u0106\u0002",
    "\u0002\u06bf\u06c1\u0005\u0114\u008b\u0002\u06c0\u06c2\u0005\u0086D",
    "\u0002\u06c1\u06c0\u0003\u0002\u0002\u0002\u06c1\u06c2\u0003\u0002\u0002",
    "\u0002\u06c2\u06c3\u0003\u0002\u0002\u0002\u06c3\u06c4\u0005\u0098M",
    "\u0002\u06c4\u06c5\u0005\u0116\u008c\u0002\u06c5\u06db\u0003\u0002\u0002",
    "\u0002\u06c6\u06d6\u0007\u00c8\u0002\u0002\u06c7\u06d2\u0005\u0114\u008b",
    "\u0002\u06c8\u06c9\u0007\u00b4\u0002\u0002\u06c9\u06ca\u0005\u0114\u008b",
    "\u0002\u06ca\u06cb\u0007\u0160\u0002\u0002\u06cb\u06cf\u0005\u0116\u008c",
    "\u0002\u06cc\u06cd\u0005\u011a\u008e\u0002\u06cd\u06ce\u0005\u0088E",
    "\u0002\u06ce\u06d0\u0003\u0002\u0002\u0002\u06cf\u06cc\u0003\u0002\u0002",
    "\u0002\u06cf\u06d0\u0003\u0002\u0002\u0002\u06d0\u06d3\u0003\u0002\u0002",
    "\u0002\u06d1\u06d3\u0005\u0088E\u0002\u06d2\u06c8\u0003\u0002\u0002",
    "\u0002\u06d2\u06d1\u0003\u0002\u0002\u0002\u06d3\u06d4\u0003\u0002\u0002",
    "\u0002\u06d4\u06d5\u0005\u0116\u008c\u0002\u06d5\u06d7\u0003\u0002\u0002",
    "\u0002\u06d6\u06c7\u0003\u0002\u0002\u0002\u06d6\u06d7\u0003\u0002\u0002",
    "\u0002\u06d7\u06db\u0003\u0002\u0002\u0002\u06d8\u06db\u0005\u00be`",
    "\u0002\u06d9\u06db\u0007\u0160\u0002\u0002\u06da\u0676\u0003\u0002\u0002",
    "\u0002\u06da\u0677\u0003\u0002\u0002\u0002\u06da\u0681\u0003\u0002\u0002",
    "\u0002\u06da\u0682\u0003\u0002\u0002\u0002\u06da\u0689\u0003\u0002\u0002",
    "\u0002\u06da\u0690\u0003\u0002\u0002\u0002\u06da\u0692\u0003\u0002\u0002",
    "\u0002\u06da\u069b\u0003\u0002\u0002\u0002\u06da\u069c\u0003\u0002\u0002",
    "\u0002\u06da\u069d\u0003\u0002\u0002\u0002\u06da\u069e\u0003\u0002\u0002",
    "\u0002\u06da\u06a2\u0003\u0002\u0002\u0002\u06da\u06a4\u0003\u0002\u0002",
    "\u0002\u06da\u06a9\u0003\u0002\u0002\u0002\u06da\u06aa\u0003\u0002\u0002",
    "\u0002\u06da\u06ab\u0003\u0002\u0002\u0002\u06da\u06b2\u0003\u0002\u0002",
    "\u0002\u06da\u06b3\u0003\u0002\u0002\u0002\u06da\u06be\u0003\u0002\u0002",
    "\u0002\u06da\u06c6\u0003\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002",
    "\u0002\u06da\u06d9\u0003\u0002\u0002\u0002\u06dby\u0003\u0002\u0002",
    "\u0002\u06dc\u06dd\u0007\u00d8\u0002\u0002\u06dd\u06de\u0005\u00c6d",
    "\u0002\u06de{\u0003\u0002\u0002\u0002\u06df\u06eb\u0007\u0019\u0002",
    "\u0002\u06e0\u06e7\u0005\u0114\u008b\u0002\u06e1\u06e8\u0005~@\u0002",
    "\u06e2\u06e8\u0005\u0080A\u0002\u06e3\u06e4\u0005~@\u0002\u06e4\u06e5",
    "\u0005\u011a\u008e\u0002\u06e5\u06e6\u0005\u0080A\u0002\u06e6\u06e8",
    "\u0003\u0002\u0002\u0002\u06e7\u06e1\u0003\u0002\u0002\u0002\u06e7\u06e2",
    "\u0003\u0002\u0002\u0002\u06e7\u06e3\u0003\u0002\u0002\u0002\u06e8\u06e9",
    "\u0003\u0002\u0002\u0002\u06e9\u06ea\u0005\u0116\u008c\u0002\u06ea\u06ec",
    "\u0003\u0002\u0002\u0002\u06eb\u06e0\u0003\u0002\u0002\u0002\u06eb\u06ec",
    "\u0003\u0002\u0002\u0002\u06ec}\u0003\u0002\u0002\u0002\u06ed\u06ee",
    "\t.\u0002\u0002\u06ee\u007f\u0003\u0002\u0002\u0002\u06ef\u06f0\t/\u0002",
    "\u0002\u06f0\u0081\u0003\u0002\u0002\u0002\u06f1\u06f2\u0005\u011a\u008e",
    "\u0002\u06f2\u06f3\u0007\u015b\u0002\u0002\u06f3\u0083\u0003\u0002\u0002",
    "\u0002\u06f4\u06f5\u0005\u011a\u008e\u0002\u06f5\u06f6\u0007\u010d\u0002",
    "\u0002\u06f6\u0085\u0003\u0002\u0002\u0002\u06f7\u06f8\u0007\u010e\u0002",
    "\u0002\u06f8\u06f9\u0005\u011a\u008e\u0002\u06f9\u0087\u0003\u0002\u0002",
    "\u0002\u06fa\u06fb\t0\u0002\u0002\u06fb\u0089\u0003\u0002\u0002\u0002",
    "\u06fc\u06fd\u0007\u010f\u0002\u0002\u06fd\u0701\u0005\u00fe\u0080\u0002",
    "\u06fe\u06ff\u0007\u0110\u0002\u0002\u06ff\u0701\u0005\u00ceh\u0002",
    "\u0700\u06fc\u0003\u0002\u0002\u0002\u0700\u06fe\u0003\u0002\u0002\u0002",
    "\u0701\u008b\u0003\u0002\u0002\u0002\u0702\u0703\u0007\u0111\u0002\u0002",
    "\u0703\u0704\u0005\u0114\u008b\u0002\u0704\u0705\t1\u0002\u0002\u0705",
    "\u0706\u0005\u0116\u008c\u0002\u0706\u008d\u0003\u0002\u0002\u0002\u0707",
    "\u0708\u0007\u0114\u0002\u0002\u0708\u0709\u0005\u0114\u008b\u0002\u0709",
    "\u070a\u0005\u00e2r\u0002\u070a\u070b\u0005\u0116\u008c\u0002\u070b",
    "\u008f\u0003\u0002\u0002\u0002\u070c\u070d\u0007<\u0002\u0002\u070d",
    "\u070e\u0005\u00ceh\u0002\u070e\u0091\u0003\u0002\u0002\u0002\u070f",
    "\u0712\u0007\u00a2\u0002\u0002\u0710\u0713\u0005\u00ceh\u0002\u0711",
    "\u0713\u0005\u00ccg\u0002\u0712\u0710\u0003\u0002\u0002\u0002\u0712",
    "\u0711\u0003\u0002\u0002\u0002\u0713\u0093\u0003\u0002\u0002\u0002\u0714",
    "\u0715\u0007\u0115\u0002\u0002\u0715\u0716\u0005\u0114\u008b\u0002\u0716",
    "\u071a\u0007\u0160\u0002\u0002\u0717\u0718\u0005\u011a\u008e\u0002\u0718",
    "\u0719\t2\u0002\u0002\u0719\u071b\u0003\u0002\u0002\u0002\u071a\u0717",
    "\u0003\u0002\u0002\u0002\u071a\u071b\u0003\u0002\u0002\u0002\u071b\u071c",
    "\u0003\u0002\u0002\u0002\u071c\u071d\u0005\u0116\u008c\u0002\u071d\u0095",
    "\u0003\u0002\u0002\u0002\u071e\u0720\n3\u0002\u0002\u071f\u071e\u0003",
    "\u0002\u0002\u0002\u0720\u0723\u0003\u0002\u0002\u0002\u0721\u071f\u0003",
    "\u0002\u0002\u0002\u0721\u0722\u0003\u0002\u0002\u0002\u0722\u0097\u0003",
    "\u0002\u0002\u0002\u0723\u0721\u0003\u0002\u0002\u0002\u0724\u0729\u0005",
    "\u0096L\u0002\u0725\u0726\u0007\u0117\u0002\u0002\u0726\u0728\u0005",
    "\u0096L\u0002\u0727\u0725\u0003\u0002\u0002\u0002\u0728\u072b\u0003",
    "\u0002\u0002\u0002\u0729\u0727\u0003\u0002\u0002\u0002\u0729\u072a\u0003",
    "\u0002\u0002\u0002\u072a\u0099\u0003\u0002\u0002\u0002\u072b\u0729\u0003",
    "\u0002\u0002\u0002\u072c\u0732\u0007\u0099\u0002\u0002\u072d\u072e\u0007",
    "\u0118\u0002\u0002\u072e\u0732\u0005\u00d0i\u0002\u072f\u0732\u0007",
    "\u0119\u0002\u0002\u0730\u0732\u0007\u00f3\u0002\u0002\u0731\u072c\u0003",
    "\u0002\u0002\u0002\u0731\u072d\u0003\u0002\u0002\u0002\u0731\u072f\u0003",
    "\u0002\u0002\u0002\u0731\u0730\u0003\u0002\u0002\u0002\u0732\u009b\u0003",
    "\u0002\u0002\u0002\u0733\u0739\u0005\u009aN\u0002\u0734\u0735\u0005",
    "\u011a\u008e\u0002\u0735\u0736\u0005\u009aN\u0002\u0736\u0738\u0003",
    "\u0002\u0002\u0002\u0737\u0734\u0003\u0002\u0002\u0002\u0738\u073b\u0003",
    "\u0002\u0002\u0002\u0739\u0737\u0003\u0002\u0002\u0002\u0739\u073a\u0003",
    "\u0002\u0002\u0002\u073a\u009d\u0003\u0002\u0002\u0002\u073b\u0739\u0003",
    "\u0002\u0002\u0002\u073c\u074a\u0007\u011a\u0002\u0002\u073d\u074b\u0005",
    "\u00ccg\u0002\u073e\u073f\u0005\u0114\u008b\u0002\u073f\u0745\u0005",
    "\u00a0Q\u0002\u0740\u0741\u0005\u011a\u008e\u0002\u0741\u0742\u0005",
    "\u00a0Q\u0002\u0742\u0744\u0003\u0002\u0002\u0002\u0743\u0740\u0003",
    "\u0002\u0002\u0002\u0744\u0747\u0003\u0002\u0002\u0002\u0745\u0743\u0003",
    "\u0002\u0002\u0002\u0745\u0746\u0003\u0002\u0002\u0002\u0746\u0748\u0003",
    "\u0002\u0002\u0002\u0747\u0745\u0003\u0002\u0002\u0002\u0748\u0749\u0005",
    "\u0116\u008c\u0002\u0749\u074b\u0003\u0002\u0002\u0002\u074a\u073d\u0003",
    "\u0002\u0002\u0002\u074a\u073e\u0003\u0002\u0002\u0002\u074a\u074b\u0003",
    "\u0002\u0002\u0002\u074b\u009f\u0003\u0002\u0002\u0002\u074c\u074e\u0005",
    "\u00a2R\u0002\u074d\u074c\u0003\u0002\u0002\u0002\u074d\u074e\u0003",
    "\u0002\u0002\u0002\u074e\u0750\u0003\u0002\u0002\u0002\u074f\u0751\u0005",
    "\u00a4S\u0002\u0750\u074f\u0003\u0002\u0002\u0002\u0750\u0751\u0003",
    "\u0002\u0002\u0002\u0751\u0765\u0003\u0002\u0002\u0002\u0752\u0754\u0007",
    "\u011b\u0002\u0002\u0753\u0755\u0005\u00d0i\u0002\u0754\u0753\u0003",
    "\u0002\u0002\u0002\u0754\u0755\u0003\u0002\u0002\u0002\u0755\u0765\u0003",
    "\u0002\u0002\u0002\u0756\u0765\u0007\u00b2\u0002\u0002\u0757\u0758\u0007",
    "\u011c\u0002\u0002\u0758\u0759\u0005\u0114\u008b\u0002\u0759\u075f\u0005",
    "\u00a6T\u0002\u075a\u075b\u0005\u0118\u008d\u0002\u075b\u075c\u0005",
    "\u00a6T\u0002\u075c\u075e\u0003\u0002\u0002\u0002\u075d\u075a\u0003",
    "\u0002\u0002\u0002\u075e\u0761\u0003\u0002\u0002\u0002\u075f\u075d\u0003",
    "\u0002\u0002\u0002\u075f\u0760\u0003\u0002\u0002\u0002\u0760\u0762\u0003",
    "\u0002\u0002\u0002\u0761\u075f\u0003\u0002\u0002\u0002\u0762\u0763\u0005",
    "\u0116\u008c\u0002\u0763\u0765\u0003\u0002\u0002\u0002\u0764\u074d\u0003",
    "\u0002\u0002\u0002\u0764\u0752\u0003\u0002\u0002\u0002\u0764\u0756\u0003",
    "\u0002\u0002\u0002\u0764\u0757\u0003\u0002\u0002\u0002\u0765\u00a1\u0003",
    "\u0002\u0002\u0002\u0766\u0767\t4\u0002\u0002\u0767\u00a3\u0003\u0002",
    "\u0002\u0002\u0768\u0769\t5\u0002\u0002\u0769\u00a5\u0003\u0002\u0002",
    "\u0002\u076a\u076e\u0007\u0160\u0002\u0002\u076b\u076c\u0007\u011e\u0002",
    "\u0002\u076c\u076d\u0007\u015b\u0002\u0002\u076d\u076f\u0007\u011f\u0002",
    "\u0002\u076e\u076b\u0003\u0002\u0002\u0002\u076e\u076f\u0003\u0002\u0002",
    "\u0002\u076f\u00a7\u0003\u0002\u0002\u0002\u0770\u0791\u0005\u00eex",
    "\u0002\u0771\u0791\t6\u0002\u0002\u0772\u0773\t7\u0002\u0002\u0773\u0774",
    "\u0005\u0114\u008b\u0002\u0774\u0778\u0007\u0160\u0002\u0002\u0775\u0776",
    "\u0005\u011a\u008e\u0002\u0776\u0777\t8\u0002\u0002\u0777\u0779\u0003",
    "\u0002\u0002\u0002\u0778\u0775\u0003\u0002\u0002\u0002\u0778\u0779\u0003",
    "\u0002\u0002\u0002\u0779\u077a\u0003\u0002\u0002\u0002\u077a\u077b\u0005",
    "\u0116\u008c\u0002\u077b\u0791\u0003\u0002\u0002\u0002\u077c\u077e\u0007",
    "\u00c0\u0002\u0002\u077d\u077f\u0005\u00c6d\u0002\u077e\u077d\u0003",
    "\u0002\u0002\u0002\u077e\u077f\u0003\u0002\u0002\u0002\u077f\u0791\u0003",
    "\u0002\u0002\u0002\u0780\u0781\u0007\u0127\u0002\u0002\u0781\u0782\u0005",
    "\u0114\u008b\u0002\u0782\u0786\u0005\u00f8}\u0002\u0783\u0784\u0005",
    "\u011a\u008e\u0002\u0784\u0785\u0007\u015b\u0002\u0002\u0785\u0787\u0003",
    "\u0002\u0002\u0002\u0786\u0783\u0003\u0002\u0002\u0002\u0786\u0787\u0003",
    "\u0002\u0002\u0002\u0787\u0788\u0003\u0002\u0002\u0002\u0788\u0789\u0005",
    "\u0116\u008c\u0002\u0789\u0791\u0003\u0002\u0002\u0002\u078a\u078c\u0007",
    "\u0128\u0002\u0002\u078b\u078d\u0005\u00d0i\u0002\u078c\u078b\u0003",
    "\u0002\u0002\u0002\u078c\u078d\u0003\u0002\u0002\u0002\u078d\u0791\u0003",
    "\u0002\u0002\u0002\u078e\u078f\u0007\u00d4\u0002\u0002\u078f\u0791\u0005",
    "\u00d0i\u0002\u0790\u0770\u0003\u0002\u0002\u0002\u0790\u0771\u0003",
    "\u0002\u0002\u0002\u0790\u0772\u0003\u0002\u0002\u0002\u0790\u077c\u0003",
    "\u0002\u0002\u0002\u0790\u0780\u0003\u0002\u0002\u0002\u0790\u078a\u0003",
    "\u0002\u0002\u0002\u0790\u078e\u0003\u0002\u0002\u0002\u0791\u00a9\u0003",
    "\u0002\u0002\u0002\u0792\u07a3\t9\u0002\u0002\u0793\u0794\u0007T\u0002",
    "\u0002\u0794\u07a3\u0005\u00ceh\u0002\u0795\u0796\u0007\u012b\u0002",
    "\u0002\u0796\u07a3\u0005\u00c6d\u0002\u0797\u0798\u0007\u0114\u0002",
    "\u0002\u0798\u0799\u0005\u0114\u008b\u0002\u0799\u079d\u0005\u00e2r",
    "\u0002\u079a\u079b\u0005\u011a\u008e\u0002\u079b\u079c\t:\u0002\u0002",
    "\u079c\u079e\u0003\u0002\u0002\u0002\u079d\u079a\u0003\u0002\u0002\u0002",
    "\u079d\u079e\u0003\u0002\u0002\u0002\u079e\u079f\u0003\u0002\u0002\u0002",
    "\u079f\u07a0\u0005\u0116\u008c\u0002\u07a0\u07a3\u0003\u0002\u0002\u0002",
    "\u07a1\u07a3\u0005\u00d4k\u0002\u07a2\u0792\u0003\u0002\u0002\u0002",
    "\u07a2\u0793\u0003\u0002\u0002\u0002\u07a2\u0795\u0003\u0002\u0002\u0002",
    "\u07a2\u0797\u0003\u0002\u0002\u0002\u07a2\u07a1\u0003\u0002\u0002\u0002",
    "\u07a3\u00ab\u0003\u0002\u0002\u0002\u07a4\u07a5\t;\u0002\u0002\u07a5",
    "\u07a6\u0007J\u0002\u0002\u07a6\u07aa\u0005\u00fc\u007f\u0002\u07a7",
    "\u07a8\u0005\u011a\u008e\u0002\u07a8\u07a9\u0005\u0102\u0082\u0002\u07a9",
    "\u07ab\u0003\u0002\u0002\u0002\u07aa\u07a7\u0003\u0002\u0002\u0002\u07aa",
    "\u07ab\u0003\u0002\u0002\u0002\u07ab\u07ac\u0003\u0002\u0002\u0002\u07ac",
    "\u07ad\u0007K\u0002\u0002\u07ad\u0839\u0003\u0002\u0002\u0002\u07ae",
    "\u07af\t<\u0002\u0002\u07af\u07b0\u0007J\u0002\u0002\u07b0\u07b1\u0005",
    "\u00fc\u007f\u0002\u07b1\u07b2\u0007K\u0002\u0002\u07b2\u0839\u0003",
    "\u0002\u0002\u0002\u07b3\u07b8\t=\u0002\u0002\u07b4\u07b5\u0005\u0114",
    "\u008b\u0002\u07b5\u07b6\u0005\u0102\u0082\u0002\u07b6\u07b7\u0005\u0116",
    "\u008c\u0002\u07b7\u07b9\u0003\u0002\u0002\u0002\u07b8\u07b4\u0003\u0002",
    "\u0002\u0002\u07b8\u07b9\u0003\u0002\u0002\u0002\u07b9\u0839\u0003\u0002",
    "\u0002\u0002\u07ba\u07bb\u0007\u00a2\u0002\u0002\u07bb\u07bd\u0005\u0114",
    "\u008b\u0002\u07bc\u07be\u0005\u00eav\u0002\u07bd\u07bc\u0003\u0002",
    "\u0002\u0002\u07bd\u07be\u0003\u0002\u0002\u0002\u07be\u07bf\u0003\u0002",
    "\u0002\u0002\u07bf\u07c0\u0005\u0116\u008c\u0002\u07c0\u0839\u0003\u0002",
    "\u0002\u0002\u07c1\u07c2\u0007\u0132\u0002\u0002\u07c2\u07c3\u0005\u0114",
    "\u008b\u0002\u07c3\u07c7\u0005\u0098M\u0002\u07c4\u07c5\u0005\u011a",
    "\u008e\u0002\u07c5\u07c6\u0005\u0102\u0082\u0002\u07c6\u07c8\u0003\u0002",
    "\u0002\u0002\u07c7\u07c4\u0003\u0002\u0002\u0002\u07c7\u07c8\u0003\u0002",
    "\u0002\u0002\u07c8\u07c9\u0003\u0002\u0002\u0002\u07c9\u07ca\u0005\u0116",
    "\u008c\u0002\u07ca\u0839\u0003\u0002\u0002\u0002\u07cb\u07cc\u0007\u0106",
    "\u0002\u0002\u07cc\u07cd\u0005\u0114\u008b\u0002\u07cd\u07ce\u0005\u0098",
    "M\u0002\u07ce\u07cf\u0005\u0116\u008c\u0002\u07cf\u0839\u0003\u0002",
    "\u0002\u0002\u07d0\u07d1\u0007\u00ee\u0002\u0002\u07d1\u07d2\u0005\u0114",
    "\u008b\u0002\u07d2\u07d3\u0005\u00f8}\u0002\u07d3\u07d4\u0005\u011a",
    "\u008e\u0002\u07d4\u07d8\u0007\u0160\u0002\u0002\u07d5\u07d6\u0005\u011a",
    "\u008e\u0002\u07d6\u07d7\u0005\u0102\u0082\u0002\u07d7\u07d9\u0003\u0002",
    "\u0002\u0002\u07d8\u07d5\u0003\u0002\u0002\u0002\u07d8\u07d9\u0003\u0002",
    "\u0002\u0002\u07d9\u07da\u0003\u0002\u0002\u0002\u07da\u07db\u0005\u0116",
    "\u008c\u0002\u07db\u0839\u0003\u0002\u0002\u0002\u07dc\u07dd\u0007\u00be",
    "\u0002\u0002\u07dd\u07e0\u0005\u0114\u008b\u0002\u07de\u07df\u0007\u0090",
    "\u0002\u0002\u07df\u07e1\u0005\u011a\u008e\u0002\u07e0\u07de\u0003\u0002",
    "\u0002\u0002\u07e0\u07e1\u0003\u0002\u0002\u0002\u07e1\u07e4\u0003\u0002",
    "\u0002\u0002\u07e2\u07e5\u0005\u00b2Z\u0002\u07e3\u07e5\u0005\u00b4",
    "[\u0002\u07e4\u07e2\u0003\u0002\u0002\u0002\u07e4\u07e3\u0003\u0002",
    "\u0002\u0002\u07e5\u07e6\u0003\u0002\u0002\u0002\u07e6\u07e7\u0005\u0116",
    "\u008c\u0002\u07e7\u0839\u0003\u0002\u0002\u0002\u07e8\u07e9\u0007\u0133",
    "\u0002\u0002\u07e9\u07ea\u0005\u0114\u008b\u0002\u07ea\u07eb\u0005\u00b8",
    "]\u0002\u07eb\u07ec\u0005\u0116\u008c\u0002\u07ec\u0839\u0003\u0002",
    "\u0002\u0002\u07ed\u07ee\t>\u0002\u0002\u07ee\u07ef\u0005\u0114\u008b",
    "\u0002\u07ef\u07f3\u0005\u00c8e\u0002\u07f0\u07f1\u0005\u011a\u008e",
    "\u0002\u07f1\u07f2\u0005\u0102\u0082\u0002\u07f2\u07f4\u0003\u0002\u0002",
    "\u0002\u07f3\u07f0\u0003\u0002\u0002\u0002\u07f3\u07f4\u0003\u0002\u0002",
    "\u0002\u07f4\u07f5\u0003\u0002\u0002\u0002\u07f5\u07f6\u0005\u0116\u008c",
    "\u0002\u07f6\u0839\u0003\u0002\u0002\u0002\u07f7\u07f8\u0007\u0136\u0002",
    "\u0002\u07f8\u07f9\u0005\u0114\u008b\u0002\u07f9\u07fa\u0005\u00e2r",
    "\u0002\u07fa\u07fb\u0005\u011a\u008e\u0002\u07fb\u0800\u0005\u00e2r",
    "\u0002\u07fc\u07fd\u0005\u011a\u008e\u0002\u07fd\u07fe\u0007\u0137\u0002",
    "\u0002\u07fe\u07ff\u0005\u00d0i\u0002\u07ff\u0801\u0003\u0002\u0002",
    "\u0002\u0800\u07fc\u0003\u0002\u0002\u0002\u0800\u0801\u0003\u0002\u0002",
    "\u0002\u0801\u0805\u0003\u0002\u0002\u0002\u0802\u0803\u0005\u011a\u008e",
    "\u0002\u0803\u0804\u0005\u0102\u0082\u0002\u0804\u0806\u0003\u0002\u0002",
    "\u0002\u0805\u0802\u0003\u0002\u0002\u0002\u0805\u0806\u0003\u0002\u0002",
    "\u0002\u0806\u0807\u0003\u0002\u0002\u0002\u0807\u0808\u0005\u0116\u008c",
    "\u0002\u0808\u0839\u0003\u0002\u0002\u0002\u0809\u080a\u0007\u0138\u0002",
    "\u0002\u080a\u080b\u0007J\u0002\u0002\u080b\u080d\u0005\u00fc\u007f",
    "\u0002\u080c\u080e\u0005\u00c0a\u0002\u080d\u080c\u0003\u0002\u0002",
    "\u0002\u080d\u080e\u0003\u0002\u0002\u0002\u080e\u0812\u0003\u0002\u0002",
    "\u0002\u080f\u0810\u0005\u011a\u008e\u0002\u0810\u0811\u0005\u0102\u0082",
    "\u0002\u0811\u0813\u0003\u0002\u0002\u0002\u0812\u080f\u0003\u0002\u0002",
    "\u0002\u0812\u0813\u0003\u0002\u0002\u0002\u0813\u0814\u0003\u0002\u0002",
    "\u0002\u0814\u0815\u0007K\u0002\u0002\u0815\u0839\u0003\u0002\u0002",
    "\u0002\u0816\u0817\u0007\u0139\u0002\u0002\u0817\u0818\u0007J\u0002",
    "\u0002\u0818\u081a\u0007\u013a\u0002\u0002\u0819\u081b\u0005\u010a\u0086",
    "\u0002\u081a\u0819\u0003\u0002\u0002\u0002\u081a\u081b\u0003\u0002\u0002",
    "\u0002\u081b\u081c\u0003\u0002\u0002\u0002\u081c\u081e\u0007\u013a\u0002",
    "\u0002\u081d\u081f\u0005\u00c2b\u0002\u081e\u081d\u0003\u0002\u0002",
    "\u0002\u081e\u081f\u0003\u0002\u0002\u0002\u081f\u0823\u0003\u0002\u0002",
    "\u0002\u0820\u0821\u0005\u011a\u008e\u0002\u0821\u0822\u0005\u0102\u0082",
    "\u0002\u0822\u0824\u0003\u0002\u0002\u0002\u0823\u0820\u0003\u0002\u0002",
    "\u0002\u0823\u0824\u0003\u0002\u0002\u0002\u0824\u0825\u0003\u0002\u0002",
    "\u0002\u0825\u0839\u0007K\u0002\u0002\u0826\u0827\u0007\u013b\u0002",
    "\u0002\u0827\u0828\u0005\u0114\u008b\u0002\u0828\u082a\u0005\u00f8}",
    "\u0002\u0829\u082b\u0005\u00dan\u0002\u082a\u0829\u0003\u0002\u0002",
    "\u0002\u082a\u082b\u0003\u0002\u0002\u0002\u082b\u0831\u0003\u0002\u0002",
    "\u0002\u082c\u082d\u0005\u011a\u008e\u0002\u082d\u082e\u0005\u00dco",
    "\u0002\u082e\u0830\u0003\u0002\u0002\u0002\u082f\u082c\u0003\u0002\u0002",
    "\u0002\u0830\u0833\u0003\u0002\u0002\u0002\u0831\u082f\u0003\u0002\u0002",
    "\u0002\u0831\u0832\u0003\u0002\u0002\u0002\u0832\u0834\u0003\u0002\u0002",
    "\u0002\u0833\u0831\u0003\u0002\u0002\u0002\u0834\u0835\u0005\u0116\u008c",
    "\u0002\u0835\u0839\u0003\u0002\u0002\u0002\u0836\u0839\u0005\u0106\u0084",
    "\u0002\u0837\u0839\u0005\u00d6l\u0002\u0838\u07a4\u0003\u0002\u0002",
    "\u0002\u0838\u07ae\u0003\u0002\u0002\u0002\u0838\u07b3\u0003\u0002\u0002",
    "\u0002\u0838\u07ba\u0003\u0002\u0002\u0002\u0838\u07c1\u0003\u0002\u0002",
    "\u0002\u0838\u07cb\u0003\u0002\u0002\u0002\u0838\u07d0\u0003\u0002\u0002",
    "\u0002\u0838\u07dc\u0003\u0002\u0002\u0002\u0838\u07e8\u0003\u0002\u0002",
    "\u0002\u0838\u07ed\u0003\u0002\u0002\u0002\u0838\u07f7\u0003\u0002\u0002",
    "\u0002\u0838\u0809\u0003\u0002\u0002\u0002\u0838\u0816\u0003\u0002\u0002",
    "\u0002\u0838\u0826\u0003\u0002\u0002\u0002\u0838\u0836\u0003\u0002\u0002",
    "\u0002\u0838\u0837\u0003\u0002\u0002\u0002\u0839\u00ad\u0003\u0002\u0002",
    "\u0002\u083a\u083b\u0007\u013c\u0002\u0002\u083b\u083c\u0005\u0114\u008b",
    "\u0002\u083c\u083d\u0007\u015b\u0002\u0002\u083d\u083e\u0005\u0116\u008c",
    "\u0002\u083e\u084a\u0003\u0002\u0002\u0002\u083f\u0840\u0007\u013d\u0002",
    "\u0002\u0840\u0841\u0005\u0114\u008b\u0002\u0841\u0842\u0007\u015b\u0002",
    "\u0002\u0842\u0843\u0005\u0116\u008c\u0002\u0843\u084a\u0003\u0002\u0002",
    "\u0002\u0844\u0845\u0007\u013e\u0002\u0002\u0845\u0846\u0005\u0114\u008b",
    "\u0002\u0846\u0847\u0007\u0160\u0002\u0002\u0847\u0848\u0005\u0116\u008c",
    "\u0002\u0848\u084a\u0003\u0002\u0002\u0002\u0849\u083a\u0003\u0002\u0002",
    "\u0002\u0849\u083f\u0003\u0002\u0002\u0002\u0849\u0844\u0003\u0002\u0002",
    "\u0002\u084a\u00af\u0003\u0002\u0002\u0002\u084b\u084c\u0007\u0132\u0002",
    "\u0002\u084c\u084d\u0005\u0114\u008b\u0002\u084d\u0853\u0005\u00aeX",
    "\u0002\u084e\u084f\u0005\u011a\u008e\u0002\u084f\u0850\u0005\u00aeX",
    "\u0002\u0850\u0852\u0003\u0002\u0002\u0002\u0851\u084e\u0003\u0002\u0002",
    "\u0002\u0852\u0855\u0003\u0002\u0002\u0002\u0853\u0851\u0003\u0002\u0002",
    "\u0002\u0853\u0854\u0003\u0002\u0002\u0002\u0854\u0856\u0003\u0002\u0002",
    "\u0002\u0855\u0853\u0003\u0002\u0002\u0002\u0856\u0857\u0005\u0116\u008c",
    "\u0002\u0857\u085b\u0003\u0002\u0002\u0002\u0858\u085b\u0007\u013f\u0002",
    "\u0002\u0859\u085b\u0005\u0106\u0084\u0002\u085a\u084b\u0003\u0002\u0002",
    "\u0002\u085a\u0858\u0003\u0002\u0002\u0002\u085a\u0859\u0003\u0002\u0002",
    "\u0002\u085b\u00b1\u0003\u0002\u0002\u0002\u085c\u085d\t?\u0002\u0002",
    "\u085d\u00b3\u0003\u0002\u0002\u0002\u085e\u085f\u0007\u0140\u0002\u0002",
    "\u085f\u0860\u0005\u0114\u008b\u0002\u0860\u0861\u0005\u010a\u0086\u0002",
    "\u0861\u0862\u0005\u0116\u008c\u0002\u0862\u00b5\u0003\u0002\u0002\u0002",
    "\u0863\u0874\u0007\u0141\u0002\u0002\u0864\u0865\u0005\u0118\u008d\u0002",
    "\u0865\u0869\u0007\u015b\u0002\u0002\u0866\u0867\u0005\u011a\u008e\u0002",
    "\u0867\u0868\u0007\u015b\u0002\u0002\u0868\u086a\u0003\u0002\u0002\u0002",
    "\u0869\u0866\u0003\u0002\u0002\u0002\u0869\u086a\u0003\u0002\u0002\u0002",
    "\u086a\u0875\u0003\u0002\u0002\u0002\u086b\u086c\u0005\u0114\u008b\u0002",
    "\u086c\u0870\u0007\u015b\u0002\u0002\u086d\u086e\u0005\u011a\u008e\u0002",
    "\u086e\u086f\u0007\u015b\u0002\u0002\u086f\u0871\u0003\u0002\u0002\u0002",
    "\u0870\u086d\u0003\u0002\u0002\u0002\u0870\u0871\u0003\u0002\u0002\u0002",
    "\u0871\u0872\u0003\u0002\u0002\u0002\u0872\u0873\u0005\u0116\u008c\u0002",
    "\u0873\u0875\u0003\u0002\u0002\u0002\u0874\u0864\u0003\u0002\u0002\u0002",
    "\u0874\u086b\u0003\u0002\u0002\u0002\u0875\u00b7\u0003\u0002\u0002\u0002",
    "\u0876\u087e\u0005\u00bc_\u0002\u0877\u087b\u0005\u00f8}\u0002\u0878",
    "\u0879\u0005\u011a\u008e\u0002\u0879\u087a\u0005\u00ba^\u0002\u087a",
    "\u087c\u0003\u0002\u0002\u0002\u087b\u0878\u0003\u0002\u0002\u0002\u087b",
    "\u087c\u0003\u0002\u0002\u0002\u087c\u087e\u0003\u0002\u0002\u0002\u087d",
    "\u0876\u0003\u0002\u0002\u0002\u087d\u0877\u0003\u0002\u0002\u0002\u087e",
    "\u00b9\u0003\u0002\u0002\u0002\u087f\u0881\t@\u0002\u0002\u0880\u087f",
    "\u0003\u0002\u0002\u0002\u0880\u0881\u0003\u0002\u0002\u0002\u0881\u0882",
    "\u0003\u0002\u0002\u0002\u0882\u0883\u0005\u00f8}\u0002\u0883\u00bb",
    "\u0003\u0002\u0002\u0002\u0884\u0886\u0007\u00a4\u0002\u0002\u0885\u0887",
    "\u0007\u0160\u0002\u0002\u0886\u0885\u0003\u0002\u0002\u0002\u0886\u0887",
    "\u0003\u0002\u0002\u0002\u0887\u00bd\u0003\u0002\u0002\u0002\u0888\u0889",
    "\u0007\u0142\u0002\u0002\u0889\u088a\u0005\u0114\u008b\u0002\u088a\u088e",
    "\t8\u0002\u0002\u088b\u088c\u0005\u011a\u008e\u0002\u088c\u088d\tA\u0002",
    "\u0002\u088d\u088f\u0003\u0002\u0002\u0002\u088e\u088b\u0003\u0002\u0002",
    "\u0002\u088e\u088f\u0003\u0002\u0002\u0002\u088f\u0890\u0003\u0002\u0002",
    "\u0002\u0890\u0891\u0005\u0116\u008c\u0002\u0891\u00bf\u0003\u0002\u0002",
    "\u0002\u0892\u0893\u0005\u011a\u008e\u0002\u0893\u0894\u0007\u0146\u0002",
    "\u0002\u0894\u00c1\u0003\u0002\u0002\u0002\u0895\u0896\u0005\u011a\u008e",
    "\u0002\u0896\u0897\u0007\u010e\u0002\u0002\u0897\u0898\u0005\u0114\u008b",
    "\u0002\u0898\u0899\u0005\u011c\u008f\u0002\u0899\u089a\u0005\u00c4c",
    "\u0002\u089a\u08a2\u0005\u011c\u008f\u0002\u089b\u089c\u0005\u011a\u008e",
    "\u0002\u089c\u089d\u0005\u011c\u008f\u0002\u089d\u089e\u0005\u00c4c",
    "\u0002\u089e\u089f\u0005\u011c\u008f\u0002\u089f\u08a1\u0003\u0002\u0002",
    "\u0002\u08a0\u089b\u0003\u0002\u0002\u0002\u08a1\u08a4\u0003\u0002\u0002",
    "\u0002\u08a2\u08a0\u0003\u0002\u0002\u0002\u08a2\u08a3\u0003\u0002\u0002",
    "\u0002\u08a3\u08a5\u0003\u0002\u0002\u0002\u08a4\u08a2\u0003\u0002\u0002",
    "\u0002\u08a5\u08a6\u0005\u0116\u008c\u0002\u08a6\u00c3\u0003\u0002\u0002",
    "\u0002\u08a7\u08a9\u0007\u0161\u0002\u0002\u08a8\u08a7\u0003\u0002\u0002",
    "\u0002\u08a8\u08a9\u0003\u0002\u0002\u0002\u08a9\u08aa\u0003\u0002\u0002",
    "\u0002\u08aa\u08ac\u0007\u0147\u0002\u0002\u08ab\u08ad\u0007\u0161\u0002",
    "\u0002\u08ac\u08ab\u0003\u0002\u0002\u0002\u08ac\u08ad\u0003\u0002\u0002",
    "\u0002\u08ad\u00c5\u0003\u0002\u0002\u0002\u08ae\u08af\u0005\u0114\u008b",
    "\u0002\u08af\u08b0\u0005\u00f8}\u0002\u08b0\u08b1\u0005\u0116\u008c",
    "\u0002\u08b1\u00c7\u0003\u0002\u0002\u0002\u08b2\u08b8\u0005\u00caf",
    "\u0002\u08b3\u08b4\u0005\u011a\u008e\u0002\u08b4\u08b5\u0005\u00caf",
    "\u0002\u08b5\u08b7\u0003\u0002\u0002\u0002\u08b6\u08b3\u0003\u0002\u0002",
    "\u0002\u08b7\u08ba\u0003\u0002\u0002\u0002\u08b8\u08b6\u0003\u0002\u0002",
    "\u0002\u08b8\u08b9\u0003\u0002\u0002\u0002\u08b9\u00c9\u0003\u0002\u0002",
    "\u0002\u08ba\u08b8\u0003\u0002\u0002\u0002\u08bb\u08c2\u0007\u015b\u0002",
    "\u0002\u08bc\u08bd\u0007\u015b\u0002\u0002\u08bd\u08bf\u0007\u0148\u0002",
    "\u0002\u08be\u08c0\u0007\u015b\u0002\u0002\u08bf\u08be\u0003\u0002\u0002",
    "\u0002\u08bf\u08c0\u0003\u0002\u0002\u0002\u08c0\u08c2\u0003\u0002\u0002",
    "\u0002\u08c1\u08bb\u0003\u0002\u0002\u0002\u08c1\u08bc\u0003\u0002\u0002",
    "\u0002\u08c2\u00cb\u0003\u0002\u0002\u0002\u08c3\u08c4\u0005\u0114\u008b",
    "\u0002\u08c4\u08c5\u0005\u0116\u008c\u0002\u08c5\u00cd\u0003\u0002\u0002",
    "\u0002\u08c6\u08c7\u0005\u0114\u008b\u0002\u08c7\u08c8\u0007\u0160\u0002",
    "\u0002\u08c8\u08c9\u0005\u0116\u008c\u0002\u08c9\u00cf\u0003\u0002\u0002",
    "\u0002\u08ca\u08cb\u0005\u0114\u008b\u0002\u08cb\u08cc\u0007\u015b\u0002",
    "\u0002\u08cc\u08cd\u0005\u0116\u008c\u0002\u08cd\u00d1\u0003\u0002\u0002",
    "\u0002\u08ce\u08cf\u0005\u0114\u008b\u0002\u08cf\u08d0\u0007\u015c\u0002",
    "\u0002\u08d0\u08d1\u0005\u0116\u008c\u0002\u08d1\u00d3\u0003\u0002\u0002",
    "\u0002\u08d2\u08d3\u0007\u0149\u0002\u0002\u08d3\u08d4\u0005\u0114\u008b",
    "\u0002\u08d4\u08d6\u0005\u00f8}\u0002\u08d5\u08d7\u0005\u00dan\u0002",
    "\u08d6\u08d5\u0003\u0002\u0002\u0002\u08d6\u08d7\u0003\u0002\u0002\u0002",
    "\u08d7\u08dd\u0003\u0002\u0002\u0002\u08d8\u08d9\u0005\u011a\u008e\u0002",
    "\u08d9\u08da\u0005\u00dep\u0002\u08da\u08dc\u0003\u0002\u0002\u0002",
    "\u08db\u08d8\u0003\u0002\u0002\u0002\u08dc\u08df\u0003\u0002\u0002\u0002",
    "\u08dd\u08db\u0003\u0002\u0002\u0002\u08dd\u08de\u0003\u0002\u0002\u0002",
    "\u08de\u08e0\u0003\u0002\u0002\u0002\u08df\u08dd\u0003\u0002\u0002\u0002",
    "\u08e0\u08e1\u0005\u0116\u008c\u0002\u08e1\u00d5\u0003\u0002\u0002\u0002",
    "\u08e2\u08e3\u0007\u0149\u0002\u0002\u08e3\u08e4\u0005\u0114\u008b\u0002",
    "\u08e4\u08e6\u0005\u00f8}\u0002\u08e5\u08e7\u0005\u00dan\u0002\u08e6",
    "\u08e5\u0003\u0002\u0002\u0002\u08e6\u08e7\u0003\u0002\u0002\u0002\u08e7",
    "\u08f1\u0003\u0002\u0002\u0002\u08e8\u08ea\u0007\u0161\u0002\u0002\u08e9",
    "\u08e8\u0003\u0002\u0002\u0002\u08e9\u08ea\u0003\u0002\u0002\u0002\u08ea",
    "\u08eb\u0003\u0002\u0002\u0002\u08eb\u08ed\u0005^0\u0002\u08ec\u08ee",
    "\u0007\u0161\u0002\u0002\u08ed\u08ec\u0003\u0002\u0002\u0002\u08ed\u08ee",
    "\u0003\u0002\u0002\u0002\u08ee\u08ef\u0003\u0002\u0002\u0002\u08ef\u08f0",
    "\u0005\u00a4S\u0002\u08f0\u08f2\u0003\u0002\u0002\u0002\u08f1\u08e9",
    "\u0003\u0002\u0002\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2\u08fb",
    "\u0003\u0002\u0002\u0002\u08f3\u08f5\u0005\u011a\u008e\u0002\u08f4\u08f6",
    "\u0007\u0161\u0002\u0002\u08f5\u08f4\u0003\u0002\u0002\u0002\u08f5\u08f6",
    "\u0003\u0002\u0002\u0002\u08f6\u08f7\u0003\u0002\u0002\u0002\u08f7\u08f8",
    "\u0005\u00dco\u0002\u08f8\u08fa\u0003\u0002\u0002\u0002\u08f9\u08f3",
    "\u0003\u0002\u0002\u0002\u08fa\u08fd\u0003\u0002\u0002\u0002\u08fb\u08f9",
    "\u0003\u0002\u0002\u0002\u08fb\u08fc\u0003\u0002\u0002\u0002\u08fc\u0901",
    "\u0003\u0002\u0002\u0002\u08fd\u08fb\u0003\u0002\u0002\u0002\u08fe\u08ff",
    "\u0005\u011a\u008e\u0002\u08ff\u0900\u0005\u0102\u0082\u0002\u0900\u0902",
    "\u0003\u0002\u0002\u0002\u0901\u08fe\u0003\u0002\u0002\u0002\u0901\u0902",
    "\u0003\u0002\u0002\u0002\u0902\u0903\u0003\u0002\u0002\u0002\u0903\u0904",
    "\u0005\u0116\u008c\u0002\u0904\u00d7\u0003\u0002\u0002\u0002\u0905\u0906",
    "\u0007\u0149\u0002\u0002\u0906\u0907\u0005\u0114\u008b\u0002\u0907\u0909",
    "\u0005\u00f8}\u0002\u0908\u090a\u0005\u00dan\u0002\u0909\u0908\u0003",
    "\u0002\u0002\u0002\u0909\u090a\u0003\u0002\u0002\u0002\u090a\u0913\u0003",
    "\u0002\u0002\u0002\u090b\u090d\u0005\u011a\u008e\u0002\u090c\u090e\u0007",
    "\u0161\u0002\u0002\u090d\u090c\u0003\u0002\u0002\u0002\u090d\u090e\u0003",
    "\u0002\u0002\u0002\u090e\u090f\u0003\u0002\u0002\u0002\u090f\u0910\u0005",
    "\u00dco\u0002\u0910\u0912\u0003\u0002\u0002\u0002\u0911\u090b\u0003",
    "\u0002\u0002\u0002\u0912\u0915\u0003\u0002\u0002\u0002\u0913\u0911\u0003",
    "\u0002\u0002\u0002\u0913\u0914\u0003\u0002\u0002\u0002\u0914\u0919\u0003",
    "\u0002\u0002\u0002\u0915\u0913\u0003\u0002\u0002\u0002\u0916\u0917\u0005",
    "\u011a\u008e\u0002\u0917\u0918\u0005\u0102\u0082\u0002\u0918\u091a\u0003",
    "\u0002\u0002\u0002\u0919\u0916\u0003\u0002\u0002\u0002\u0919\u091a\u0003",
    "\u0002\u0002\u0002\u091a\u091b\u0003\u0002\u0002\u0002\u091b\u091c\u0005",
    "\u0116\u008c\u0002\u091c\u00d9\u0003\u0002\u0002\u0002\u091d\u091e\u0007",
    "\u00a6\u0002\u0002\u091e\u091f\u0007\u0160\u0002\u0002\u091f\u00db\u0003",
    "\u0002\u0002\u0002\u0920\u0923\u0005\u00dep\u0002\u0921\u0923\u0005",
    "\u011c\u008f\u0002\u0922\u0920\u0003\u0002\u0002\u0002\u0922\u0921\u0003",
    "\u0002\u0002\u0002\u0923\u00dd\u0003\u0002\u0002\u0002\u0924\u0925\t",
    "B\u0002\u0002\u0925\u00df\u0003\u0002\u0002\u0002\u0926\u0927\tC\u0002",
    "\u0002\u0927\u00e1\u0003\u0002\u0002\u0002\u0928\u0929\tD\u0002\u0002",
    "\u0929\u00e3\u0003\u0002\u0002\u0002\u092a\u092f\u0007\u0160\u0002\u0002",
    "\u092b\u092c\u0007d\u0002\u0002\u092c\u092e\u0007\u0160\u0002\u0002",
    "\u092d\u092b\u0003\u0002\u0002\u0002\u092e\u0931\u0003\u0002\u0002\u0002",
    "\u092f\u092d\u0003\u0002\u0002\u0002\u092f\u0930\u0003\u0002\u0002\u0002",
    "\u0930\u00e5\u0003\u0002\u0002\u0002\u0931\u092f\u0003\u0002\u0002\u0002",
    "\u0932\u0938\u0005\u00e8u\u0002\u0933\u0934\u0005\u011a\u008e\u0002",
    "\u0934\u0935\u0005\u00e8u\u0002\u0935\u0937\u0003\u0002\u0002\u0002",
    "\u0936\u0933\u0003\u0002\u0002\u0002\u0937\u093a\u0003\u0002\u0002\u0002",
    "\u0938\u0936\u0003\u0002\u0002\u0002\u0938\u0939\u0003\u0002\u0002\u0002",
    "\u0939\u00e7\u0003\u0002\u0002\u0002\u093a\u0938\u0003\u0002\u0002\u0002",
    "\u093b\u093c\u0007\u0160\u0002\u0002\u093c\u093d\u0005\u0118\u008d\u0002",
    "\u093d\u093e\u0007\u015b\u0002\u0002\u093e\u00e9\u0003\u0002\u0002\u0002",
    "\u093f\u0945\u0007\u0160\u0002\u0002\u0940\u0941\u0005\u011a\u008e\u0002",
    "\u0941\u0942\u0007\u0160\u0002\u0002\u0942\u0944\u0003\u0002\u0002\u0002",
    "\u0943\u0940\u0003\u0002\u0002\u0002\u0944\u0947\u0003\u0002\u0002\u0002",
    "\u0945\u0943\u0003\u0002\u0002\u0002\u0945\u0946\u0003\u0002\u0002\u0002",
    "\u0946\u00eb\u0003\u0002\u0002\u0002\u0947\u0945\u0003\u0002\u0002\u0002",
    "\u0948\u094e\u0007\u0160\u0002\u0002\u0949\u094a\u0005\u0118\u008d\u0002",
    "\u094a\u094b\u0007\u0160\u0002\u0002\u094b\u094d\u0003\u0002\u0002\u0002",
    "\u094c\u0949\u0003\u0002\u0002\u0002\u094d\u0950\u0003\u0002\u0002\u0002",
    "\u094e\u094c\u0003\u0002\u0002\u0002\u094e\u094f\u0003\u0002\u0002\u0002",
    "\u094f\u00ed\u0003\u0002\u0002\u0002\u0950\u094e\u0003\u0002\u0002\u0002",
    "\u0951\u0952\u0007\u008e\u0002\u0002\u0952\u0953\u0005\u0114\u008b\u0002",
    "\u0953\u0954\u0005\u00f0y\u0002\u0954\u0955\u0005\u0116\u008c\u0002",
    "\u0955\u00ef\u0003\u0002\u0002\u0002\u0956\u095c\u0005\u00f2z\u0002",
    "\u0957\u0958\u0005\u0118\u008d\u0002\u0958\u0959\u0005\u00f2z\u0002",
    "\u0959\u095b\u0003\u0002\u0002\u0002\u095a\u0957\u0003\u0002\u0002\u0002",
    "\u095b\u095e\u0003\u0002\u0002\u0002\u095c\u095a\u0003\u0002\u0002\u0002",
    "\u095c\u095d\u0003\u0002\u0002\u0002\u095d\u00f1\u0003\u0002\u0002\u0002",
    "\u095e\u095c\u0003\u0002\u0002\u0002\u095f\u096c\u0007\u0160\u0002\u0002",
    "\u0960\u0961\u0005\u0114\u008b\u0002\u0961\u0967\u0005\u00f4{\u0002",
    "\u0962\u0963\u0005\u011a\u008e\u0002\u0963\u0964\u0005\u00f4{\u0002",
    "\u0964\u0966\u0003\u0002\u0002\u0002\u0965\u0962\u0003\u0002\u0002\u0002",
    "\u0966\u0969\u0003\u0002\u0002\u0002\u0967\u0965\u0003\u0002\u0002\u0002",
    "\u0967\u0968\u0003\u0002\u0002\u0002\u0968\u096a\u0003\u0002\u0002\u0002",
    "\u0969\u0967\u0003\u0002\u0002\u0002\u096a\u096b\u0005\u0116\u008c\u0002",
    "\u096b\u096d\u0003\u0002\u0002\u0002\u096c\u0960\u0003\u0002\u0002\u0002",
    "\u096c\u096d\u0003\u0002\u0002\u0002\u096d\u0974\u0003\u0002\u0002\u0002",
    "\u096e\u0974\u0007\u0005\u0002\u0002\u096f\u0974\u0007\u000f\u0002\u0002",
    "\u0970\u0974\u0007`\u0002\u0002\u0971\u0974\u0007a\u0002\u0002\u0972",
    "\u0974\u0007d\u0002\u0002\u0973\u095f\u0003\u0002\u0002\u0002\u0973",
    "\u096e\u0003\u0002\u0002\u0002\u0973\u096f\u0003\u0002\u0002\u0002\u0973",
    "\u0970\u0003\u0002\u0002\u0002\u0973\u0971\u0003\u0002\u0002\u0002\u0973",
    "\u0972\u0003\u0002\u0002\u0002\u0974\u00f3\u0003\u0002\u0002\u0002\u0975",
    "\u097f\u0007\u014a\u0002\u0002\u0976\u097f\u0007\u014b\u0002\u0002\u0977",
    "\u097f\u0007\u014c\u0002\u0002\u0978\u097f\u0007\u0143\u0002\u0002\u0979",
    "\u097f\u0007\u014d\u0002\u0002\u097a\u097f\u0007\u014e\u0002\u0002\u097b",
    "\u097f\u0007\u014f\u0002\u0002\u097c\u097f\u0007\u0160\u0002\u0002\u097d",
    "\u097f\u0005\u00f6|\u0002\u097e\u0975\u0003\u0002\u0002\u0002\u097e",
    "\u0976\u0003\u0002\u0002\u0002\u097e\u0977\u0003\u0002\u0002\u0002\u097e",
    "\u0978\u0003\u0002\u0002\u0002\u097e\u0979\u0003\u0002\u0002\u0002\u097e",
    "\u097a\u0003\u0002\u0002\u0002\u097e\u097b\u0003\u0002\u0002\u0002\u097e",
    "\u097c\u0003\u0002\u0002\u0002\u097e\u097d\u0003\u0002\u0002\u0002\u097f",
    "\u00f5\u0003\u0002\u0002\u0002\u0980\u0982\u0007a\u0002\u0002\u0981",
    "\u0980\u0003\u0002\u0002\u0002\u0981\u0982\u0003\u0002\u0002\u0002\u0982",
    "\u0983\u0003\u0002\u0002\u0002\u0983\u0986\u0007\u015b\u0002\u0002\u0984",
    "\u0986\u0007\u015c\u0002\u0002\u0985\u0981\u0003\u0002\u0002\u0002\u0985",
    "\u0984\u0003\u0002\u0002\u0002\u0986\u00f7\u0003\u0002\u0002\u0002\u0987",
    "\u098c\u0007\u0160\u0002\u0002\u0988\u0989\u0007\u0150\u0002\u0002\u0989",
    "\u098b\u0007\u0160\u0002\u0002\u098a\u0988\u0003\u0002\u0002\u0002\u098b",
    "\u098e\u0003\u0002\u0002\u0002\u098c\u098a\u0003\u0002\u0002\u0002\u098c",
    "\u098d\u0003\u0002\u0002\u0002\u098d\u00f9\u0003\u0002\u0002\u0002\u098e",
    "\u098c\u0003\u0002\u0002\u0002\u098f\u0990\u0005\u0114\u008b\u0002\u0990",
    "\u0991\u0005\u00fc\u007f\u0002\u0991\u0992\u0005\u0116\u008c\u0002\u0992",
    "\u00fb\u0003\u0002\u0002\u0002\u0993\u0997\u0007\u0151\u0002\u0002\u0994",
    "\u0997\u0007\u0152\u0002\u0002\u0995\u0997\nE\u0002\u0002\u0996\u0993",
    "\u0003\u0002\u0002\u0002\u0996\u0994\u0003\u0002\u0002\u0002\u0996\u0995",
    "\u0003\u0002\u0002\u0002\u0997\u099a\u0003\u0002\u0002\u0002\u0998\u0999",
    "\u0003\u0002\u0002\u0002\u0998\u0996\u0003\u0002\u0002\u0002\u0999\u00fd",
    "\u0003\u0002\u0002\u0002\u099a\u0998\u0003\u0002\u0002\u0002\u099b\u099c",
    "\u0005\u0114\u008b\u0002\u099c\u099d\u0005\u0100\u0081\u0002\u099d\u099e",
    "\u0005\u0116\u008c\u0002\u099e\u00ff\u0003\u0002\u0002\u0002\u099f\u09a3",
    "\u0007\u0151\u0002\u0002\u09a0\u09a3\u0007\u0152\u0002\u0002\u09a1\u09a3",
    "\nE\u0002\u0002\u09a2\u099f\u0003\u0002\u0002\u0002\u09a2\u09a0\u0003",
    "\u0002\u0002\u0002\u09a2\u09a1\u0003\u0002\u0002\u0002\u09a3\u09a4\u0003",
    "\u0002\u0002\u0002\u09a4\u09a5\u0003\u0002\u0002\u0002\u09a4\u09a2\u0003",
    "\u0002\u0002\u0002\u09a5\u0101\u0003\u0002\u0002\u0002\u09a6\u09ac\u0005",
    "\u0104\u0083\u0002\u09a7\u09a8\u0005\u011a\u008e\u0002\u09a8\u09a9\u0005",
    "\u0104\u0083\u0002\u09a9\u09ab\u0003\u0002\u0002\u0002\u09aa\u09a7\u0003",
    "\u0002\u0002\u0002\u09ab\u09ae\u0003\u0002\u0002\u0002\u09ac\u09aa\u0003",
    "\u0002\u0002\u0002\u09ac\u09ad\u0003\u0002\u0002\u0002\u09ad\u0103\u0003",
    "\u0002\u0002\u0002\u09ae\u09ac\u0003\u0002\u0002\u0002\u09af\u09b0\u0007",
    "\u0153\u0002\u0002\u09b0\u09b1\u0005\u0114\u008b\u0002\u09b1\u09b5\u0007",
    "\u0160\u0002\u0002\u09b2\u09b3\u0005\u011a\u008e\u0002\u09b3\u09b4\u0005",
    "\u0106\u0084\u0002\u09b4\u09b6\u0003\u0002\u0002\u0002\u09b5\u09b2\u0003",
    "\u0002\u0002\u0002\u09b5\u09b6\u0003\u0002\u0002\u0002\u09b6\u09b7\u0003",
    "\u0002\u0002\u0002\u09b7\u09b8\u0005\u0116\u008c\u0002\u09b8\u0105\u0003",
    "\u0002\u0002\u0002\u09b9\u09ba\u0007\u0154\u0002\u0002\u09ba\u09bb\u0005",
    "\u0114\u008b\u0002\u09bb\u09c1\u0005\u0108\u0085\u0002\u09bc\u09bd\u0005",
    "\u011a\u008e\u0002\u09bd\u09be\u0005\u0108\u0085\u0002\u09be\u09c0\u0003",
    "\u0002\u0002\u0002\u09bf\u09bc\u0003\u0002\u0002\u0002\u09c0\u09c3\u0003",
    "\u0002\u0002\u0002\u09c1\u09bf\u0003\u0002\u0002\u0002\u09c1\u09c2\u0003",
    "\u0002\u0002\u0002\u09c2\u09c4\u0003\u0002\u0002\u0002\u09c3\u09c1\u0003",
    "\u0002\u0002\u0002\u09c4\u09c5\u0005\u0116\u008c\u0002\u09c5\u0107\u0003",
    "\u0002\u0002\u0002\u09c6\u09c7\u0007\u0155\u0002\u0002\u09c7\u09c8\u0005",
    "\u0114\u008b\u0002\u09c8\u09cc\u0005\u010a\u0086\u0002\u09c9\u09ca\u0005",
    "\u011a\u008e\u0002\u09ca\u09cb\u0007\u0156\u0002\u0002\u09cb\u09cd\u0003",
    "\u0002\u0002\u0002\u09cc\u09c9\u0003\u0002\u0002\u0002\u09cc\u09cd\u0003",
    "\u0002\u0002\u0002\u09cd\u09ce\u0003\u0002\u0002\u0002\u09ce\u09cf\u0005",
    "\u0116\u008c\u0002\u09cf\u0109\u0003\u0002\u0002\u0002\u09d0\u09d2\n",
    "F\u0002\u0002\u09d1\u09d0\u0003\u0002\u0002\u0002\u09d2\u09d3\u0003",
    "\u0002\u0002\u0002\u09d3\u09d4\u0003\u0002\u0002\u0002\u09d3\u09d1\u0003",
    "\u0002\u0002\u0002\u09d4\u010b\u0003\u0002\u0002\u0002\u09d5\u09d7\n",
    "G\u0002\u0002\u09d6\u09d5\u0003\u0002\u0002\u0002\u09d7\u09d8\u0003",
    "\u0002\u0002\u0002\u09d8\u09d9\u0003\u0002\u0002\u0002\u09d8\u09d6\u0003",
    "\u0002\u0002\u0002\u09d9\u010d\u0003\u0002\u0002\u0002\u09da\u09dc\n",
    "H\u0002\u0002\u09db\u09da\u0003\u0002\u0002\u0002\u09dc\u09dd\u0003",
    "\u0002\u0002\u0002\u09dd\u09de\u0003\u0002\u0002\u0002\u09dd\u09db\u0003",
    "\u0002\u0002\u0002\u09de\u010f\u0003\u0002\u0002\u0002\u09df\u09e1\u0005",
    "\u0118\u008d\u0002\u09e0\u09e2\nF\u0002\u0002\u09e1\u09e0\u0003\u0002",
    "\u0002\u0002\u09e2\u09e3\u0003\u0002\u0002\u0002\u09e3\u09e4\u0003\u0002",
    "\u0002\u0002\u09e3\u09e1\u0003\u0002\u0002\u0002\u09e4\u09e5\u0003\u0002",
    "\u0002\u0002\u09e5\u09e6\u0007\u0159\u0002\u0002\u09e6\u0111\u0003\u0002",
    "\u0002\u0002\u09e7\u09e9\u0007\u0161\u0002\u0002\u09e8\u09e7\u0003\u0002",
    "\u0002\u0002\u09e8\u09e9\u0003\u0002\u0002\u0002\u09e9\u09eb\u0003\u0002",
    "\u0002\u0002\u09ea\u09ec\tI\u0002\u0002\u09eb\u09ea\u0003\u0002\u0002",
    "\u0002\u09ec\u09ed\u0003\u0002\u0002\u0002\u09ed\u09eb\u0003\u0002\u0002",
    "\u0002\u09ed\u09ee\u0003\u0002\u0002\u0002\u09ee\u0113\u0003\u0002\u0002",
    "\u0002\u09ef\u09f1\u0007\u0161\u0002\u0002\u09f0\u09ef\u0003\u0002\u0002",
    "\u0002\u09f0\u09f1\u0003\u0002\u0002\u0002\u09f1\u09f2\u0003\u0002\u0002",
    "\u0002\u09f2\u09f4\u0007J\u0002\u0002\u09f3\u09f5\u0007\u0161\u0002",
    "\u0002\u09f4\u09f3\u0003\u0002\u0002\u0002\u09f4\u09f5\u0003\u0002\u0002",
    "\u0002\u09f5\u0115\u0003\u0002\u0002\u0002\u09f6\u09f8\u0007\u0161\u0002",
    "\u0002\u09f7\u09f6\u0003\u0002\u0002\u0002\u09f7\u09f8\u0003\u0002\u0002",
    "\u0002\u09f8\u09f9\u0003\u0002\u0002\u0002\u09f9\u09fb\u0007K\u0002",
    "\u0002\u09fa\u09fc\u0007\u0161\u0002\u0002\u09fb\u09fa\u0003\u0002\u0002",
    "\u0002\u09fb\u09fc\u0003\u0002\u0002\u0002\u09fc\u0117\u0003\u0002\u0002",
    "\u0002\u09fd\u09ff\u0007\u0161\u0002\u0002\u09fe\u09fd\u0003\u0002\u0002",
    "\u0002\u09fe\u09ff\u0003\u0002\u0002\u0002\u09ff\u0a00\u0003\u0002\u0002",
    "\u0002\u0a00\u0a02\u0007\u0158\u0002\u0002\u0a01\u0a03\u0007\u0161\u0002",
    "\u0002\u0a02\u0a01\u0003\u0002\u0002\u0002\u0a02\u0a03\u0003\u0002\u0002",
    "\u0002\u0a03\u0119\u0003\u0002\u0002\u0002\u0a04\u0a06\u0007\u0161\u0002",
    "\u0002\u0a05\u0a04\u0003\u0002\u0002\u0002\u0a05\u0a06\u0003\u0002\u0002",
    "\u0002\u0a06\u0a07\u0003\u0002\u0002\u0002\u0a07\u0a09\u0007\u0157\u0002",
    "\u0002\u0a08\u0a0a\u0007\u0161\u0002\u0002\u0a09\u0a08\u0003\u0002\u0002",
    "\u0002\u0a09\u0a0a\u0003\u0002\u0002\u0002\u0a0a\u011b\u0003\u0002\u0002",
    "\u0002\u0a0b\u0a0f\u0007\u013a\u0002\u0002\u0a0c\u0a0e\nJ\u0002\u0002",
    "\u0a0d\u0a0c\u0003\u0002\u0002\u0002\u0a0e\u0a11\u0003\u0002\u0002\u0002",
    "\u0a0f\u0a0d\u0003\u0002\u0002\u0002\u0a0f\u0a10\u0003\u0002\u0002\u0002",
    "\u0a10\u0a12\u0003\u0002\u0002\u0002\u0a11\u0a0f\u0003\u0002\u0002\u0002",
    "\u0a12\u0a13\u0007\u013a\u0002\u0002\u0a13\u011d\u0003\u0002\u0002\u0002",
    "\u0123\u0121\u0129\u012e\u0136\u0140\u0143\u014b\u0150\u0158\u0164\u0167",
    "\u0173\u0176\u0182\u0185\u0191\u0194\u01a0\u01a4\u01a7\u01b3\u01b7\u01c1",
    "\u01c4\u01d0\u01d3\u01df\u01e2\u01ef\u01f9\u01fd\u0204\u020c\u0216\u0219",
    "\u0226\u0229\u0237\u023b\u0243\u024d\u0257\u025a\u0266\u0269\u026c\u0278",
    "\u027b\u0287\u028a\u0294\u029c\u02a4\u02b0\u02b3\u02b9\u02bd\u02c1\u02cc",
    "\u02cf\u02d7\u02e3\u02e6\u02f2\u02f5\u02f9\u0303\u030d\u0314\u031b\u0324",
    "\u032a\u0331\u0340\u0348\u0358\u035c\u0360\u0365\u0368\u036c\u0378\u037c",
    "\u037f\u038b\u038f\u0392\u039e\u03a2\u03a5\u03b1\u03b5\u03b8\u03c4\u03c7",
    "\u03d3\u03d6\u03db\u03e1\u03eb\u03f1\u03fd\u040c\u0415\u0419\u041d\u0425",
    "\u042c\u0430\u0433\u043b\u043f\u0449\u044f\u045b\u047e\u0480\u048f\u049c",
    "\u04b4\u04be\u04cf\u04e6\u04f1\u04f5\u04f7\u0505\u0516\u0519\u051d\u052f",
    "\u0534\u0537\u0545\u0549\u0565\u056c\u057c\u0589\u0599\u059b\u05a0\u05a2",
    "\u05b4\u05b9\u05bc\u05c6\u05d1\u05d4\u05e4\u05ef\u05f4\u0601\u060e\u0613",
    "\u061d\u0626\u0628\u063e\u0648\u064c\u0650\u0652\u0664\u0667\u066f\u0674",
    "\u067d\u0687\u068e\u0696\u06a0\u06a7\u06b0\u06b7\u06ba\u06c1\u06cf\u06d2",
    "\u06d6\u06da\u06e7\u06eb\u0700\u0712\u071a\u0721\u0729\u0731\u0739\u0745",
    "\u074a\u074d\u0750\u0754\u075f\u0764\u076e\u0778\u077e\u0786\u078c\u0790",
    "\u079d\u07a2\u07aa\u07b8\u07bd\u07c7\u07d8\u07e0\u07e4\u07f3\u0800\u0805",
    "\u080d\u0812\u081a\u081e\u0823\u082a\u0831\u0838\u0849\u0853\u085a\u0869",
    "\u0870\u0874\u087b\u087d\u0880\u0886\u088e\u08a2\u08a8\u08ac\u08b8\u08bf",
    "\u08c1\u08d6\u08dd\u08e6\u08e9\u08ed\u08f1\u08f5\u08fb\u0901\u0909\u090d",
    "\u0913\u0919\u0922\u092f\u0938\u0945\u094e\u095c\u0967\u096c\u0973\u097e",
    "\u0981\u0985\u098c\u0996\u0998\u09a2\u09a4\u09ac\u09b5\u09c1\u09cc\u09d3",
    "\u09d8\u09dd\u09e3\u09e8\u09ed\u09f0\u09f4\u09f7\u09fb\u09fe\u0a02\u0a05",
    "\u0a09\u0a0f"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'MODULE'", "'REMOTE'", "'IDNAME'", "'FILENAME'", 
                     "'SOURCERIDFIELD'", "'INGESTSTATUS'", "'IDUNCLE'", 
                     "'NAMESCOPE'", "'RIDFIELD'", "'GENERATE'", "'HASH5'", 
                     "'HASH6'", "'IDFIELD'", "'EXISTS'", "'RECORDS'", "'NINES'", 
                     "'POPULATION'", "'THRESHOLD'", "'BLOCKTHRESHOLD'", 
                     "'BESTTYPE'", "'FUZZY'", "'FIELDTYPE'", "'BAGOFWORDS'", 
                     "'FIELDTYPEDETECT'", "'CONCEPT'", "'SOURCEFIELD'", 
                     "'BLOCKLINK'", "'CLEAVE'", "'RELATIONSHIP'", "'INCREMENTAL'", 
                     "'EFFECTIVEDATES'", "'INGESTMODE'", "'CONFIG'", "'IDSPACE'", 
                     "'IDPARENTS'", "'IDCHILDREN'", "'DOCFIELD'", "'PROCESS'", 
                     "'UBER'", "'ALWAYS'", "'REQUIRED'", "'NEVER'", "'LINKPATH'", 
                     "'FORMAT'", "'ASOFFIELD'", "'EFFICACY'", "'ATTRIBUTEFILE'", 
                     "'INGESTFILE'", "'EXTERNALFILE'", "'CLUSTERHEALTH'", 
                     "'OPTIONS'", "'HACK'", "'MATCHSTRATEGY'", "'END'", 
                     "'DATASETTYPE'", "'PENALTY'", "'ERRINFO'", "'DISTRIBUTION'", 
                     "'NORMAL'", "'MEAN'", "'STDDEV'", "'BUCKETS'", "'%'", 
                     "'BUCKET'", "'NONCONTIGUOUS'", "'TIMESTAMP'", "'CHANGETYPE'", 
                     "'HEADERSEARCH'", "'EFILESEARCH'", "'CODE'", "'MESSAGE'", 
                     "'('", "')'", "'DATASET'", "'FIELD'", "'NUMBERFIELD'", 
                     "'DATEFIELD'", "'LATLONG'", "'RANGEFIELD'", "'RECORDTYPE'", 
                     "'VIRTUALFIELD'", "'TYPE'", "'CONCAT'", "'DELIMITER'", 
                     "'PAD'", "'MINRECS'", "'MAXRECS'", "'FLAT'", "'OPTIONAL'", 
                     "'MAX'", "'SLOW'", "'SYMMETRIC'", "'FROM'", "'?'", 
                     "'+'", "'LEFT.'", "'RIGHT.'", "'-'", "'ATTRIBUTESONLY'", 
                     "'NO_EDITDISTANCE_STRINGLENGTHS'", "'MULTIPARENT'", 
                     "'NO_UNORDERED'", "'NO_PARALLEL_MATCH'", "'NOSLICE'", 
                     "'NOMATCHCODE'", "'KEYSUPERFILE'", "'KEYPREFIX'", "'KEYINFIX'", 
                     "'USESUPERFILES'", "'DISKRELATIONS'", "'USEHIPIE'", 
                     "'FUZZYOPTIONAL'", "'SPLIT_COMBINEALLSCORES'", "'CONFIGPARAM'", 
                     "'WORKMAN'", "'LINKBLOCKBREAKERSCANSPLIT'", "'AGGRESSIVESLICE'", 
                     "'BLOCKLINK_PARENTS'", "'USE_MATCH_CANDIDATES_OPTIMIZATION'", 
                     "'DROP_AMBIGUOUS'", "'INC_LP_EXACT'", "'COMPLETEFULLMATCH'", 
                     "'IMPROVE_EF_WEIGHTS'", "'MOVE_HEADER_KEYS'", "'RANGEFIELD_UPGRADE'", 
                     "'ADJUST_CONCEPT_WEIGHT'", "'SAMPLESIZE'", "'FUZZYWEIGHT'", 
                     "'JOINS/PERSIST'", "'SLICETHRESHOLD'", "'SLICEDISTANCE'", 
                     "'SALTMODULE'", "'SALTTOOLSMODULE'", "'POSTPROCESS'", 
                     "'XLINKUSING'", "'CUSTOMINTERNALJOIN'", "'USE_COMBINED_MATCHCODES'", 
                     "'ON_CHILD_ADJUSTMENT'", "'WITH_SORT_ON_WEIGHT'", "'BASIS'", 
                     "'IGNORELP'", "'CLEAN'", "'IDDONE'", "'SEARCH'", "'IGNORE'", 
                     "'PRIORITY'", "'DISTANCE'", "'DIVE'", "'ALSO'", "'ONLY'", 
                     "'FIRST'", "'FED'", "'SOMETIMES'", "'PERMIT'", "'CHILD'", 
                     "'MEDIUM'", "'FAST'", "'MAPPING'", "'MULTI'", "'LIKE'", 
                     "'SEARCHON'", "'*'", "'.*'", "'$'", "'='", "'NOINCREMENTAL'", 
                     "'SPRAY'", "'PREFIX'", "'FIXED'", "'CSV'", "'TERM'", 
                     "'QUOTE'", "'SEP'", "'VALUES'", "'KEEP'", "'ALL'", 
                     "'<'", "'LIST'", "'RECALL'", "'INCLUDE'", "'EXCLUDE'", 
                     "'DATES'", "'SEENDATES'", "'TAG'", "'NOTAG'", "'FAIL'", 
                     "'CONDITION'", "'ONFAIL'", "'REJECT'", "'VALID'", "'=='", 
                     "'<>'", "'!='", "'>'", "'>='", "'<='", "'NOFAIL'", 
                     "'MULTIPLE'", "'SPLIT'", "'LINK'", "'NONE'", "'DIRECT'", 
                     "'CROSS'", "'TRACK'", "'SCORE'", "'DEDUP'", "'EXPLODE'", 
                     "'EXTEND'", "'HYBRID'", "'MINIMUM'", "'MATCH'", "'ANY'", 
                     "'NNEQ'", "'NAMED'", "'RANGE'", "'SWITCH0'", "'SWITCHN'", 
                     "'NULL'", "'EVENT'", "'CONTEXT'", "'SCALED'", "'UNSCALED'", 
                     "'PARTITION'", "'PERMITS'", "'CONSISTENT'", "'FLAG'", 
                     "'SCALE'", "'PROP'", "'WHEEL'", "'LAT'", "'LONG'", 
                     "'DIVISIONS'", "'RADIUS'", "'SOFT1'", "'MDDM'", "'WITHIN'", 
                     "'CARRY'", "'OWNED'", "'WEIGHTED'", "'PHONETIC'", "'INITIAL'", 
                     "'APPOSITION'", "'PREVENTS'", "'FORCES'", "'DERIVED'", 
                     "'NEW'", "'OLD'", "'WILD'", "'EXCLUSIVE'", "'AGE'", 
                     "'EDIT1'", "'HYPHEN1'", "'HYPHEN2'", "'EDIT2'", "'STEM'", 
                     "'EDITX'", "'FALLBACK'", "'ABBR'", "'PERMITTED'", "'NULLS'", 
                     "'MANY'", "'MOST'", "'TRIGRAM'", "'NO_SCALE'", "'GLOBAL_SCALE'", 
                     "'BAG_SCALE'", "'BLANK'", "'REPLACE'", "'SEGMENT'", 
                     "'SEGTYPE'", "'ROLLUP'", "'PARTS'", "'WHOLE'", "'WEIGHT'", 
                     "'SUPPORTS'", "'ADD'", "'|'", "'MAXSPC'", "'ACRONYM'", 
                     "'FORCE'", "'GENERATION'", "'OR'", "'--'", "'['", "']'", 
                     "'UNIQUE'", "'FIX'", "'ENFORCE'", "'LONGEST'", "'RECENT'", 
                     "'EARLIEST'", "'LAST'", "'VOTED'", "'COMMONEST'", "'RS'", 
                     "'RST'", "'COUNTS'", "'MIN'", "'ALLOW'", "'NOQUOTES'", 
                     "'SPACES'", "'LEFTTRIM'", "'CAPS'", "'ENUM'", "'PARSE'", 
                     "'LENGTHS'", "'WORDS'", "'INRANGE'", "'PRECISION'", 
                     "'DATE'", "'REGEX'", "'''", "'CUSTOMCLEAN'", "'MAXUNIQ'", 
                     "'MINPOP'", "'NUMERICS'", "'NULLABLE'", "'DEFAULTVALUE'", 
                     "'MAXBLOCKSIZE'", "'RECORDDATE'", "'YYYYMM'", "'YYYYMMDD'", 
                     "'YYYYMMDDHHMMSS'", "'STRICT'", "'=>'", "'..'", "'CUSTOM'", 
                     "'HASBASE'", "'NOFUZZY'", "'NOINITIAL'", "'YYYY'", 
                     "'MM'", "'DD'", "'.'", "'\\)'", "'\\('", "'CUSTINFO'", 
                     "'USEON'", "'RE'", "'NOCASE'", "','", "':'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, "NL", "PNL", "INT", "NINT", "REAL", "NREAL", 
                      "YEARSHIFT", "ID", "WS", "COMMENT", "ML_COMMENT", 
                      "ANY" ];

var ruleNames =  [ "spc", "line", "distribution_option", "buckets_option", 
                   "continuous_bucket_innards", "bucket_option", "discrete_bucket_innards", 
                   "ingestmode_options", "format_options", "errinfo_options", 
                   "field_line", "virtual_field_options", "concat_option", 
                   "delimiter_option", "virtual_field_piece", "pad_option", 
                   "datasettype_options", "dataset_options", "match_option", 
                   "match_line", "match_expression", "match_term", "trail_spec", 
                   "option_options", "option_item", "hack_options", "hackacw_option", 
                   "cluster_option", "cluster_basis_item", "ignorelp_option", 
                   "external_file_options", "ef_like_option", "ef_searchon_option", 
                   "ef_multi_option", "mapping_guts", "eq", "ingestfile_options", 
                   "csv_options", "attributefile_options", "attr_element", 
                   "list_flag", "efficacy_options", "seeneff_dates", "asof_options", 
                   "record_type_options", "valid_childref", "condition_operator", 
                   "gt_operator", "lt_operator", "linkpath_options", "relationship_options", 
                   "cleave_options", "blocklink_option", "range_field_options", 
                   "source_field_options", "concept_options", "concept_childref", 
                   "lat_long_options", "date_field_options", "field_options", 
                   "named_option", "bag_of_words", "bag_of_words_type", 
                   "bag_of_words_scale", "permitted_int", "permitted_blank", 
                   "nulls_replace", "multiple_many", "segref", "rollup_option", 
                   "weight_option", "distrib_option", "like_option", "supports_option", 
                   "opt_id", "opt_id_list", "abbr_option", "abbr_options", 
                   "force_option", "force_option_part", "force_option_sign", 
                   "signed_num", "or_force_option", "besttype_options", 
                   "fuzzy_options", "fieldtype_options", "enum_detect_option", 
                   "fieldtypedetect_options", "onfail_flag", "onfail_default", 
                   "maxblocksize", "parse_option", "parse_attr", "parse_auto", 
                   "recorddate_option", "strictdate", "replace_section", 
                   "goes_to", "periodic_ids_param", "numberlist", "intrange", 
                   "opt_param", "id_param", "num_param", "neg_num_param", 
                   "custom_attr", "custom_attr_ft", "custom_attr_dt", "nestedclass", 
                   "mixed_params", "param", "signed_real", "real", "dashed_id", 
                   "id_spec_list", "id_spec", "id_comma_list", "id_list", 
                   "basis_option", "basis_list", "basis_element", "basis_qualifier", 
                   "signed_int", "periodic_ids", "stuff_in_brackets", "stuff_escape_brackets", 
                   "nonempty_stuff_in_brackets", "nonempty_stuff_escape_brackets", 
                   "custinfo_options", "custinfo_option", "useon", "useon_option", 
                   "useon_stuff", "optiontext", "rttag_param", "restofline", 
                   "nl", "lp", "rp", "co", "comma", "pip_string" ];

function SaltParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SaltParser.prototype = Object.create(antlr4.Parser.prototype);
SaltParser.prototype.constructor = SaltParser;

Object.defineProperty(SaltParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SaltParser.EOF = antlr4.Token.EOF;
SaltParser.T__0 = 1;
SaltParser.T__1 = 2;
SaltParser.T__2 = 3;
SaltParser.T__3 = 4;
SaltParser.T__4 = 5;
SaltParser.T__5 = 6;
SaltParser.T__6 = 7;
SaltParser.T__7 = 8;
SaltParser.T__8 = 9;
SaltParser.T__9 = 10;
SaltParser.T__10 = 11;
SaltParser.T__11 = 12;
SaltParser.T__12 = 13;
SaltParser.T__13 = 14;
SaltParser.T__14 = 15;
SaltParser.T__15 = 16;
SaltParser.T__16 = 17;
SaltParser.T__17 = 18;
SaltParser.T__18 = 19;
SaltParser.T__19 = 20;
SaltParser.T__20 = 21;
SaltParser.T__21 = 22;
SaltParser.T__22 = 23;
SaltParser.T__23 = 24;
SaltParser.T__24 = 25;
SaltParser.T__25 = 26;
SaltParser.T__26 = 27;
SaltParser.T__27 = 28;
SaltParser.T__28 = 29;
SaltParser.T__29 = 30;
SaltParser.T__30 = 31;
SaltParser.T__31 = 32;
SaltParser.T__32 = 33;
SaltParser.T__33 = 34;
SaltParser.T__34 = 35;
SaltParser.T__35 = 36;
SaltParser.T__36 = 37;
SaltParser.T__37 = 38;
SaltParser.T__38 = 39;
SaltParser.T__39 = 40;
SaltParser.T__40 = 41;
SaltParser.T__41 = 42;
SaltParser.T__42 = 43;
SaltParser.T__43 = 44;
SaltParser.T__44 = 45;
SaltParser.T__45 = 46;
SaltParser.T__46 = 47;
SaltParser.T__47 = 48;
SaltParser.T__48 = 49;
SaltParser.T__49 = 50;
SaltParser.T__50 = 51;
SaltParser.T__51 = 52;
SaltParser.T__52 = 53;
SaltParser.T__53 = 54;
SaltParser.T__54 = 55;
SaltParser.T__55 = 56;
SaltParser.T__56 = 57;
SaltParser.T__57 = 58;
SaltParser.T__58 = 59;
SaltParser.T__59 = 60;
SaltParser.T__60 = 61;
SaltParser.T__61 = 62;
SaltParser.T__62 = 63;
SaltParser.T__63 = 64;
SaltParser.T__64 = 65;
SaltParser.T__65 = 66;
SaltParser.T__66 = 67;
SaltParser.T__67 = 68;
SaltParser.T__68 = 69;
SaltParser.T__69 = 70;
SaltParser.T__70 = 71;
SaltParser.T__71 = 72;
SaltParser.T__72 = 73;
SaltParser.T__73 = 74;
SaltParser.T__74 = 75;
SaltParser.T__75 = 76;
SaltParser.T__76 = 77;
SaltParser.T__77 = 78;
SaltParser.T__78 = 79;
SaltParser.T__79 = 80;
SaltParser.T__80 = 81;
SaltParser.T__81 = 82;
SaltParser.T__82 = 83;
SaltParser.T__83 = 84;
SaltParser.T__84 = 85;
SaltParser.T__85 = 86;
SaltParser.T__86 = 87;
SaltParser.T__87 = 88;
SaltParser.T__88 = 89;
SaltParser.T__89 = 90;
SaltParser.T__90 = 91;
SaltParser.T__91 = 92;
SaltParser.T__92 = 93;
SaltParser.T__93 = 94;
SaltParser.T__94 = 95;
SaltParser.T__95 = 96;
SaltParser.T__96 = 97;
SaltParser.T__97 = 98;
SaltParser.T__98 = 99;
SaltParser.T__99 = 100;
SaltParser.T__100 = 101;
SaltParser.T__101 = 102;
SaltParser.T__102 = 103;
SaltParser.T__103 = 104;
SaltParser.T__104 = 105;
SaltParser.T__105 = 106;
SaltParser.T__106 = 107;
SaltParser.T__107 = 108;
SaltParser.T__108 = 109;
SaltParser.T__109 = 110;
SaltParser.T__110 = 111;
SaltParser.T__111 = 112;
SaltParser.T__112 = 113;
SaltParser.T__113 = 114;
SaltParser.T__114 = 115;
SaltParser.T__115 = 116;
SaltParser.T__116 = 117;
SaltParser.T__117 = 118;
SaltParser.T__118 = 119;
SaltParser.T__119 = 120;
SaltParser.T__120 = 121;
SaltParser.T__121 = 122;
SaltParser.T__122 = 123;
SaltParser.T__123 = 124;
SaltParser.T__124 = 125;
SaltParser.T__125 = 126;
SaltParser.T__126 = 127;
SaltParser.T__127 = 128;
SaltParser.T__128 = 129;
SaltParser.T__129 = 130;
SaltParser.T__130 = 131;
SaltParser.T__131 = 132;
SaltParser.T__132 = 133;
SaltParser.T__133 = 134;
SaltParser.T__134 = 135;
SaltParser.T__135 = 136;
SaltParser.T__136 = 137;
SaltParser.T__137 = 138;
SaltParser.T__138 = 139;
SaltParser.T__139 = 140;
SaltParser.T__140 = 141;
SaltParser.T__141 = 142;
SaltParser.T__142 = 143;
SaltParser.T__143 = 144;
SaltParser.T__144 = 145;
SaltParser.T__145 = 146;
SaltParser.T__146 = 147;
SaltParser.T__147 = 148;
SaltParser.T__148 = 149;
SaltParser.T__149 = 150;
SaltParser.T__150 = 151;
SaltParser.T__151 = 152;
SaltParser.T__152 = 153;
SaltParser.T__153 = 154;
SaltParser.T__154 = 155;
SaltParser.T__155 = 156;
SaltParser.T__156 = 157;
SaltParser.T__157 = 158;
SaltParser.T__158 = 159;
SaltParser.T__159 = 160;
SaltParser.T__160 = 161;
SaltParser.T__161 = 162;
SaltParser.T__162 = 163;
SaltParser.T__163 = 164;
SaltParser.T__164 = 165;
SaltParser.T__165 = 166;
SaltParser.T__166 = 167;
SaltParser.T__167 = 168;
SaltParser.T__168 = 169;
SaltParser.T__169 = 170;
SaltParser.T__170 = 171;
SaltParser.T__171 = 172;
SaltParser.T__172 = 173;
SaltParser.T__173 = 174;
SaltParser.T__174 = 175;
SaltParser.T__175 = 176;
SaltParser.T__176 = 177;
SaltParser.T__177 = 178;
SaltParser.T__178 = 179;
SaltParser.T__179 = 180;
SaltParser.T__180 = 181;
SaltParser.T__181 = 182;
SaltParser.T__182 = 183;
SaltParser.T__183 = 184;
SaltParser.T__184 = 185;
SaltParser.T__185 = 186;
SaltParser.T__186 = 187;
SaltParser.T__187 = 188;
SaltParser.T__188 = 189;
SaltParser.T__189 = 190;
SaltParser.T__190 = 191;
SaltParser.T__191 = 192;
SaltParser.T__192 = 193;
SaltParser.T__193 = 194;
SaltParser.T__194 = 195;
SaltParser.T__195 = 196;
SaltParser.T__196 = 197;
SaltParser.T__197 = 198;
SaltParser.T__198 = 199;
SaltParser.T__199 = 200;
SaltParser.T__200 = 201;
SaltParser.T__201 = 202;
SaltParser.T__202 = 203;
SaltParser.T__203 = 204;
SaltParser.T__204 = 205;
SaltParser.T__205 = 206;
SaltParser.T__206 = 207;
SaltParser.T__207 = 208;
SaltParser.T__208 = 209;
SaltParser.T__209 = 210;
SaltParser.T__210 = 211;
SaltParser.T__211 = 212;
SaltParser.T__212 = 213;
SaltParser.T__213 = 214;
SaltParser.T__214 = 215;
SaltParser.T__215 = 216;
SaltParser.T__216 = 217;
SaltParser.T__217 = 218;
SaltParser.T__218 = 219;
SaltParser.T__219 = 220;
SaltParser.T__220 = 221;
SaltParser.T__221 = 222;
SaltParser.T__222 = 223;
SaltParser.T__223 = 224;
SaltParser.T__224 = 225;
SaltParser.T__225 = 226;
SaltParser.T__226 = 227;
SaltParser.T__227 = 228;
SaltParser.T__228 = 229;
SaltParser.T__229 = 230;
SaltParser.T__230 = 231;
SaltParser.T__231 = 232;
SaltParser.T__232 = 233;
SaltParser.T__233 = 234;
SaltParser.T__234 = 235;
SaltParser.T__235 = 236;
SaltParser.T__236 = 237;
SaltParser.T__237 = 238;
SaltParser.T__238 = 239;
SaltParser.T__239 = 240;
SaltParser.T__240 = 241;
SaltParser.T__241 = 242;
SaltParser.T__242 = 243;
SaltParser.T__243 = 244;
SaltParser.T__244 = 245;
SaltParser.T__245 = 246;
SaltParser.T__246 = 247;
SaltParser.T__247 = 248;
SaltParser.T__248 = 249;
SaltParser.T__249 = 250;
SaltParser.T__250 = 251;
SaltParser.T__251 = 252;
SaltParser.T__252 = 253;
SaltParser.T__253 = 254;
SaltParser.T__254 = 255;
SaltParser.T__255 = 256;
SaltParser.T__256 = 257;
SaltParser.T__257 = 258;
SaltParser.T__258 = 259;
SaltParser.T__259 = 260;
SaltParser.T__260 = 261;
SaltParser.T__261 = 262;
SaltParser.T__262 = 263;
SaltParser.T__263 = 264;
SaltParser.T__264 = 265;
SaltParser.T__265 = 266;
SaltParser.T__266 = 267;
SaltParser.T__267 = 268;
SaltParser.T__268 = 269;
SaltParser.T__269 = 270;
SaltParser.T__270 = 271;
SaltParser.T__271 = 272;
SaltParser.T__272 = 273;
SaltParser.T__273 = 274;
SaltParser.T__274 = 275;
SaltParser.T__275 = 276;
SaltParser.T__276 = 277;
SaltParser.T__277 = 278;
SaltParser.T__278 = 279;
SaltParser.T__279 = 280;
SaltParser.T__280 = 281;
SaltParser.T__281 = 282;
SaltParser.T__282 = 283;
SaltParser.T__283 = 284;
SaltParser.T__284 = 285;
SaltParser.T__285 = 286;
SaltParser.T__286 = 287;
SaltParser.T__287 = 288;
SaltParser.T__288 = 289;
SaltParser.T__289 = 290;
SaltParser.T__290 = 291;
SaltParser.T__291 = 292;
SaltParser.T__292 = 293;
SaltParser.T__293 = 294;
SaltParser.T__294 = 295;
SaltParser.T__295 = 296;
SaltParser.T__296 = 297;
SaltParser.T__297 = 298;
SaltParser.T__298 = 299;
SaltParser.T__299 = 300;
SaltParser.T__300 = 301;
SaltParser.T__301 = 302;
SaltParser.T__302 = 303;
SaltParser.T__303 = 304;
SaltParser.T__304 = 305;
SaltParser.T__305 = 306;
SaltParser.T__306 = 307;
SaltParser.T__307 = 308;
SaltParser.T__308 = 309;
SaltParser.T__309 = 310;
SaltParser.T__310 = 311;
SaltParser.T__311 = 312;
SaltParser.T__312 = 313;
SaltParser.T__313 = 314;
SaltParser.T__314 = 315;
SaltParser.T__315 = 316;
SaltParser.T__316 = 317;
SaltParser.T__317 = 318;
SaltParser.T__318 = 319;
SaltParser.T__319 = 320;
SaltParser.T__320 = 321;
SaltParser.T__321 = 322;
SaltParser.T__322 = 323;
SaltParser.T__323 = 324;
SaltParser.T__324 = 325;
SaltParser.T__325 = 326;
SaltParser.T__326 = 327;
SaltParser.T__327 = 328;
SaltParser.T__328 = 329;
SaltParser.T__329 = 330;
SaltParser.T__330 = 331;
SaltParser.T__331 = 332;
SaltParser.T__332 = 333;
SaltParser.T__333 = 334;
SaltParser.T__334 = 335;
SaltParser.T__335 = 336;
SaltParser.T__336 = 337;
SaltParser.T__337 = 338;
SaltParser.T__338 = 339;
SaltParser.T__339 = 340;
SaltParser.T__340 = 341;
SaltParser.T__341 = 342;
SaltParser.NL = 343;
SaltParser.PNL = 344;
SaltParser.INT = 345;
SaltParser.NINT = 346;
SaltParser.REAL = 347;
SaltParser.NREAL = 348;
SaltParser.YEARSHIFT = 349;
SaltParser.ID = 350;
SaltParser.WS = 351;
SaltParser.COMMENT = 352;
SaltParser.ML_COMMENT = 353;
SaltParser.ANY = 354;

SaltParser.RULE_spc = 0;
SaltParser.RULE_line = 1;
SaltParser.RULE_distribution_option = 2;
SaltParser.RULE_buckets_option = 3;
SaltParser.RULE_continuous_bucket_innards = 4;
SaltParser.RULE_bucket_option = 5;
SaltParser.RULE_discrete_bucket_innards = 6;
SaltParser.RULE_ingestmode_options = 7;
SaltParser.RULE_format_options = 8;
SaltParser.RULE_errinfo_options = 9;
SaltParser.RULE_field_line = 10;
SaltParser.RULE_virtual_field_options = 11;
SaltParser.RULE_concat_option = 12;
SaltParser.RULE_delimiter_option = 13;
SaltParser.RULE_virtual_field_piece = 14;
SaltParser.RULE_pad_option = 15;
SaltParser.RULE_datasettype_options = 16;
SaltParser.RULE_dataset_options = 17;
SaltParser.RULE_match_option = 18;
SaltParser.RULE_match_line = 19;
SaltParser.RULE_match_expression = 20;
SaltParser.RULE_match_term = 21;
SaltParser.RULE_trail_spec = 22;
SaltParser.RULE_option_options = 23;
SaltParser.RULE_option_item = 24;
SaltParser.RULE_hack_options = 25;
SaltParser.RULE_hackacw_option = 26;
SaltParser.RULE_cluster_option = 27;
SaltParser.RULE_cluster_basis_item = 28;
SaltParser.RULE_ignorelp_option = 29;
SaltParser.RULE_external_file_options = 30;
SaltParser.RULE_ef_like_option = 31;
SaltParser.RULE_ef_searchon_option = 32;
SaltParser.RULE_ef_multi_option = 33;
SaltParser.RULE_mapping_guts = 34;
SaltParser.RULE_eq = 35;
SaltParser.RULE_ingestfile_options = 36;
SaltParser.RULE_csv_options = 37;
SaltParser.RULE_attributefile_options = 38;
SaltParser.RULE_attr_element = 39;
SaltParser.RULE_list_flag = 40;
SaltParser.RULE_efficacy_options = 41;
SaltParser.RULE_seeneff_dates = 42;
SaltParser.RULE_asof_options = 43;
SaltParser.RULE_record_type_options = 44;
SaltParser.RULE_valid_childref = 45;
SaltParser.RULE_condition_operator = 46;
SaltParser.RULE_gt_operator = 47;
SaltParser.RULE_lt_operator = 48;
SaltParser.RULE_linkpath_options = 49;
SaltParser.RULE_relationship_options = 50;
SaltParser.RULE_cleave_options = 51;
SaltParser.RULE_blocklink_option = 52;
SaltParser.RULE_range_field_options = 53;
SaltParser.RULE_source_field_options = 54;
SaltParser.RULE_concept_options = 55;
SaltParser.RULE_concept_childref = 56;
SaltParser.RULE_lat_long_options = 57;
SaltParser.RULE_date_field_options = 58;
SaltParser.RULE_field_options = 59;
SaltParser.RULE_named_option = 60;
SaltParser.RULE_bag_of_words = 61;
SaltParser.RULE_bag_of_words_type = 62;
SaltParser.RULE_bag_of_words_scale = 63;
SaltParser.RULE_permitted_int = 64;
SaltParser.RULE_permitted_blank = 65;
SaltParser.RULE_nulls_replace = 66;
SaltParser.RULE_multiple_many = 67;
SaltParser.RULE_segref = 68;
SaltParser.RULE_rollup_option = 69;
SaltParser.RULE_weight_option = 70;
SaltParser.RULE_distrib_option = 71;
SaltParser.RULE_like_option = 72;
SaltParser.RULE_supports_option = 73;
SaltParser.RULE_opt_id = 74;
SaltParser.RULE_opt_id_list = 75;
SaltParser.RULE_abbr_option = 76;
SaltParser.RULE_abbr_options = 77;
SaltParser.RULE_force_option = 78;
SaltParser.RULE_force_option_part = 79;
SaltParser.RULE_force_option_sign = 80;
SaltParser.RULE_signed_num = 81;
SaltParser.RULE_or_force_option = 82;
SaltParser.RULE_besttype_options = 83;
SaltParser.RULE_fuzzy_options = 84;
SaltParser.RULE_fieldtype_options = 85;
SaltParser.RULE_enum_detect_option = 86;
SaltParser.RULE_fieldtypedetect_options = 87;
SaltParser.RULE_onfail_flag = 88;
SaltParser.RULE_onfail_default = 89;
SaltParser.RULE_maxblocksize = 90;
SaltParser.RULE_parse_option = 91;
SaltParser.RULE_parse_attr = 92;
SaltParser.RULE_parse_auto = 93;
SaltParser.RULE_recorddate_option = 94;
SaltParser.RULE_strictdate = 95;
SaltParser.RULE_replace_section = 96;
SaltParser.RULE_goes_to = 97;
SaltParser.RULE_periodic_ids_param = 98;
SaltParser.RULE_numberlist = 99;
SaltParser.RULE_intrange = 100;
SaltParser.RULE_opt_param = 101;
SaltParser.RULE_id_param = 102;
SaltParser.RULE_num_param = 103;
SaltParser.RULE_neg_num_param = 104;
SaltParser.RULE_custom_attr = 105;
SaltParser.RULE_custom_attr_ft = 106;
SaltParser.RULE_custom_attr_dt = 107;
SaltParser.RULE_nestedclass = 108;
SaltParser.RULE_mixed_params = 109;
SaltParser.RULE_param = 110;
SaltParser.RULE_signed_real = 111;
SaltParser.RULE_real = 112;
SaltParser.RULE_dashed_id = 113;
SaltParser.RULE_id_spec_list = 114;
SaltParser.RULE_id_spec = 115;
SaltParser.RULE_id_comma_list = 116;
SaltParser.RULE_id_list = 117;
SaltParser.RULE_basis_option = 118;
SaltParser.RULE_basis_list = 119;
SaltParser.RULE_basis_element = 120;
SaltParser.RULE_basis_qualifier = 121;
SaltParser.RULE_signed_int = 122;
SaltParser.RULE_periodic_ids = 123;
SaltParser.RULE_stuff_in_brackets = 124;
SaltParser.RULE_stuff_escape_brackets = 125;
SaltParser.RULE_nonempty_stuff_in_brackets = 126;
SaltParser.RULE_nonempty_stuff_escape_brackets = 127;
SaltParser.RULE_custinfo_options = 128;
SaltParser.RULE_custinfo_option = 129;
SaltParser.RULE_useon = 130;
SaltParser.RULE_useon_option = 131;
SaltParser.RULE_useon_stuff = 132;
SaltParser.RULE_optiontext = 133;
SaltParser.RULE_rttag_param = 134;
SaltParser.RULE_restofline = 135;
SaltParser.RULE_nl = 136;
SaltParser.RULE_lp = 137;
SaltParser.RULE_rp = 138;
SaltParser.RULE_co = 139;
SaltParser.RULE_comma = 140;
SaltParser.RULE_pip_string = 141;

function SpcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_spc;
    return this;
}

SpcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpcContext.prototype.constructor = SpcContext;

SpcContext.prototype.EOF = function() {
    return this.getToken(SaltParser.EOF, 0);
};

SpcContext.prototype.line = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LineContext);
    } else {
        return this.getTypedRuleContext(LineContext,i);
    }
};

SpcContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSpc(this);
	}
};

SpcContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSpc(this);
	}
};

SpcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSpc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.SpcContext = SpcContext;

SaltParser.prototype.spc = function() {

    var localctx = new SpcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SaltParser.RULE_spc);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 285; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 284;
            this.line();
            this.state = 287; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SaltParser.T__0) | (1 << SaltParser.T__2) | (1 << SaltParser.T__3) | (1 << SaltParser.T__4) | (1 << SaltParser.T__5) | (1 << SaltParser.T__6) | (1 << SaltParser.T__7) | (1 << SaltParser.T__8) | (1 << SaltParser.T__12) | (1 << SaltParser.T__14) | (1 << SaltParser.T__15) | (1 << SaltParser.T__16) | (1 << SaltParser.T__17) | (1 << SaltParser.T__18) | (1 << SaltParser.T__19) | (1 << SaltParser.T__20) | (1 << SaltParser.T__21) | (1 << SaltParser.T__23) | (1 << SaltParser.T__24) | (1 << SaltParser.T__25) | (1 << SaltParser.T__26) | (1 << SaltParser.T__27) | (1 << SaltParser.T__28) | (1 << SaltParser.T__29))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SaltParser.T__31 - 32)) | (1 << (SaltParser.T__32 - 32)) | (1 << (SaltParser.T__33 - 32)) | (1 << (SaltParser.T__34 - 32)) | (1 << (SaltParser.T__35 - 32)) | (1 << (SaltParser.T__36 - 32)) | (1 << (SaltParser.T__37 - 32)) | (1 << (SaltParser.T__42 - 32)) | (1 << (SaltParser.T__43 - 32)) | (1 << (SaltParser.T__44 - 32)) | (1 << (SaltParser.T__45 - 32)) | (1 << (SaltParser.T__46 - 32)) | (1 << (SaltParser.T__47 - 32)) | (1 << (SaltParser.T__48 - 32)) | (1 << (SaltParser.T__49 - 32)) | (1 << (SaltParser.T__50 - 32)) | (1 << (SaltParser.T__51 - 32)) | (1 << (SaltParser.T__52 - 32)) | (1 << (SaltParser.T__54 - 32)) | (1 << (SaltParser.T__55 - 32)) | (1 << (SaltParser.T__56 - 32)) | (1 << (SaltParser.T__57 - 32)))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (SaltParser.T__73 - 74)) | (1 << (SaltParser.T__74 - 74)) | (1 << (SaltParser.T__75 - 74)) | (1 << (SaltParser.T__76 - 74)) | (1 << (SaltParser.T__77 - 74)) | (1 << (SaltParser.T__78 - 74)) | (1 << (SaltParser.T__79 - 74)) | (1 << (SaltParser.T__80 - 74)))) !== 0) || ((((_la - 343)) & ~0x1f) == 0 && ((1 << (_la - 343)) & ((1 << (SaltParser.NL - 343)) | (1 << (SaltParser.WS - 343)) | (1 << (SaltParser.COMMENT - 343)) | (1 << (SaltParser.ML_COMMENT - 343)))) !== 0));
        this.state = 289;
        this.match(SaltParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_line;
    return this;
}

LineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LineContext.prototype.constructor = LineContext;


 
LineContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LiNumLineContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiNumLineContext.prototype = Object.create(LineContext.prototype);
LiNumLineContext.prototype.constructor = LiNumLineContext;

SaltParser.LiNumLineContext = LiNumLineContext;

LiNumLineContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiNumLineContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

LiNumLineContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiNumLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiNumLine(this);
	}
};

LiNumLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiNumLine(this);
	}
};

LiNumLineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiNumLine(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiProcessContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiProcessContext.prototype = Object.create(LineContext.prototype);
LiProcessContext.prototype.constructor = LiProcessContext;

SaltParser.LiProcessContext = LiProcessContext;

LiProcessContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiProcessContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiProcessContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

LiProcessContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

LiProcessContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
LiProcessContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiProcess(this);
	}
};

LiProcessContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiProcess(this);
	}
};

LiProcessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiProcess(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiIdFieldContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiIdFieldContext.prototype = Object.create(LineContext.prototype);
LiIdFieldContext.prototype.constructor = LiIdFieldContext;

SaltParser.LiIdFieldContext = LiIdFieldContext;

LiIdFieldContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiIdFieldContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiIdFieldContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiIdFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiIdField(this);
	}
};

LiIdFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiIdField(this);
	}
};

LiIdFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiIdField(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiAttributeContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiAttributeContext.prototype = Object.create(LineContext.prototype);
LiAttributeContext.prototype.constructor = LiAttributeContext;

SaltParser.LiAttributeContext = LiAttributeContext;

LiAttributeContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

LiAttributeContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiAttributeContext.prototype.blocklink_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Blocklink_optionContext);
    } else {
        return this.getTypedRuleContext(Blocklink_optionContext,i);
    }
};

LiAttributeContext.prototype.efficacy_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Efficacy_optionsContext);
    } else {
        return this.getTypedRuleContext(Efficacy_optionsContext,i);
    }
};
LiAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiAttribute(this);
	}
};

LiAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiAttribute(this);
	}
};

LiAttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiDocFieldContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiDocFieldContext.prototype = Object.create(LineContext.prototype);
LiDocFieldContext.prototype.constructor = LiDocFieldContext;

SaltParser.LiDocFieldContext = LiDocFieldContext;

LiDocFieldContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiDocFieldContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiDocFieldContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiDocFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiDocField(this);
	}
};

LiDocFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiDocField(this);
	}
};

LiDocFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiDocField(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiSkipContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiSkipContext.prototype = Object.create(LineContext.prototype);
LiSkipContext.prototype.constructor = LiSkipContext;

SaltParser.LiSkipContext = LiSkipContext;

LiSkipContext.prototype.field_line = function() {
    return this.getTypedRuleContext(Field_lineContext,0);
};
LiSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiSkip(this);
	}
};

LiSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiSkip(this);
	}
};

LiSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiHackContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiHackContext.prototype = Object.create(LineContext.prototype);
LiHackContext.prototype.constructor = LiHackContext;

SaltParser.LiHackContext = LiHackContext;

LiHackContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiHackContext.prototype.hack_options = function() {
    return this.getTypedRuleContext(Hack_optionsContext,0);
};

LiHackContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiHackContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiHack(this);
	}
};

LiHackContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiHack(this);
	}
};

LiHackContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiHack(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiIdAttributeContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiIdAttributeContext.prototype = Object.create(LineContext.prototype);
LiIdAttributeContext.prototype.constructor = LiIdAttributeContext;

SaltParser.LiIdAttributeContext = LiIdAttributeContext;

LiIdAttributeContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiIdAttributeContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiIdAttributeContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

LiIdAttributeContext.prototype.source_field_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Source_field_optionsContext);
    } else {
        return this.getTypedRuleContext(Source_field_optionsContext,i);
    }
};

LiIdAttributeContext.prototype.asof_options = function() {
    return this.getTypedRuleContext(Asof_optionsContext,0);
};
LiIdAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiIdAttribute(this);
	}
};

LiIdAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiIdAttribute(this);
	}
};

LiIdAttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiIdAttribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiIdListContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiIdListContext.prototype = Object.create(LineContext.prototype);
LiIdListContext.prototype.constructor = LiIdListContext;

SaltParser.LiIdListContext = LiIdListContext;

LiIdListContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiIdListContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};

LiIdListContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiIdListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiIdList(this);
	}
};

LiIdListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiIdList(this);
	}
};

LiIdListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiIdList(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiOptionsContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiOptionsContext.prototype = Object.create(LineContext.prototype);
LiOptionsContext.prototype.constructor = LiOptionsContext;

SaltParser.LiOptionsContext = LiOptionsContext;

LiOptionsContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiOptionsContext.prototype.option_options = function() {
    return this.getTypedRuleContext(Option_optionsContext,0);
};

LiOptionsContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiOptionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiOptions(this);
	}
};

LiOptionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiOptions(this);
	}
};

LiOptionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiOptions(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiRidfieldContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiRidfieldContext.prototype = Object.create(LineContext.prototype);
LiRidfieldContext.prototype.constructor = LiRidfieldContext;

SaltParser.LiRidfieldContext = LiRidfieldContext;

LiRidfieldContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiRidfieldContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiRidfieldContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiRidfieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiRidfield(this);
	}
};

LiRidfieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiRidfield(this);
	}
};

LiRidfieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiRidfield(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiFieldContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiFieldContext.prototype = Object.create(LineContext.prototype);
LiFieldContext.prototype.constructor = LiFieldContext;

SaltParser.LiFieldContext = LiFieldContext;

LiFieldContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiFieldContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiFieldContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

LiFieldContext.prototype.besttype_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Besttype_optionsContext);
    } else {
        return this.getTypedRuleContext(Besttype_optionsContext,i);
    }
};

LiFieldContext.prototype.fuzzy_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fuzzy_optionsContext);
    } else {
        return this.getTypedRuleContext(Fuzzy_optionsContext,i);
    }
};

LiFieldContext.prototype.fieldtype_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fieldtype_optionsContext);
    } else {
        return this.getTypedRuleContext(Fieldtype_optionsContext,i);
    }
};

LiFieldContext.prototype.fieldtypedetect_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Fieldtypedetect_optionsContext);
    } else {
        return this.getTypedRuleContext(Fieldtypedetect_optionsContext,i);
    }
};

LiFieldContext.prototype.dashed_id = function() {
    return this.getTypedRuleContext(Dashed_idContext,0);
};

LiFieldContext.prototype.concept_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Concept_optionsContext);
    } else {
        return this.getTypedRuleContext(Concept_optionsContext,i);
    }
};

LiFieldContext.prototype.trail_spec = function() {
    return this.getTypedRuleContext(Trail_specContext,0);
};

LiFieldContext.prototype.cleave_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cleave_optionsContext);
    } else {
        return this.getTypedRuleContext(Cleave_optionsContext,i);
    }
};

LiFieldContext.prototype.relationship_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Relationship_optionsContext);
    } else {
        return this.getTypedRuleContext(Relationship_optionsContext,i);
    }
};

LiFieldContext.prototype.attributefile_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attributefile_optionsContext);
    } else {
        return this.getTypedRuleContext(Attributefile_optionsContext,i);
    }
};

LiFieldContext.prototype.ingestfile_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ingestfile_optionsContext);
    } else {
        return this.getTypedRuleContext(Ingestfile_optionsContext,i);
    }
};

LiFieldContext.prototype.external_file_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(External_file_optionsContext);
    } else {
        return this.getTypedRuleContext(External_file_optionsContext,i);
    }
};

LiFieldContext.prototype.cluster_option = function() {
    return this.getTypedRuleContext(Cluster_optionContext,0);
};

LiFieldContext.prototype.datasettype_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Datasettype_optionsContext);
    } else {
        return this.getTypedRuleContext(Datasettype_optionsContext,i);
    }
};

LiFieldContext.prototype.errinfo_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Errinfo_optionsContext);
    } else {
        return this.getTypedRuleContext(Errinfo_optionsContext,i);
    }
};

LiFieldContext.prototype.distribution_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Distribution_optionContext);
    } else {
        return this.getTypedRuleContext(Distribution_optionContext,i);
    }
};
LiFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiField(this);
	}
};

LiFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiField(this);
	}
};

LiFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiField(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiModuleContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiModuleContext.prototype = Object.create(LineContext.prototype);
LiModuleContext.prototype.constructor = LiModuleContext;

SaltParser.LiModuleContext = LiModuleContext;

LiModuleContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiModuleContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

LiModuleContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiModuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiModule(this);
	}
};

LiModuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiModule(this);
	}
};

LiModuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiModule(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiIngestModeContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiIngestModeContext.prototype = Object.create(LineContext.prototype);
LiIngestModeContext.prototype.constructor = LiIngestModeContext;

SaltParser.LiIngestModeContext = LiIngestModeContext;

LiIngestModeContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

LiIngestModeContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiIngestModeContext.prototype.ingestmode_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ingestmode_optionsContext);
    } else {
        return this.getTypedRuleContext(Ingestmode_optionsContext,i);
    }
};
LiIngestModeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiIngestMode(this);
	}
};

LiIngestModeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiIngestMode(this);
	}
};

LiIngestModeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiIngestMode(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiFormatContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiFormatContext.prototype = Object.create(LineContext.prototype);
LiFormatContext.prototype.constructor = LiFormatContext;

SaltParser.LiFormatContext = LiFormatContext;

LiFormatContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiFormatContext.prototype.format_options = function() {
    return this.getTypedRuleContext(Format_optionsContext,0);
};

LiFormatContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiFormatContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiFormat(this);
	}
};

LiFormatContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiFormat(this);
	}
};

LiFormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiFormat(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiLinkPathContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiLinkPathContext.prototype = Object.create(LineContext.prototype);
LiLinkPathContext.prototype.constructor = LiLinkPathContext;

SaltParser.LiLinkPathContext = LiLinkPathContext;

LiLinkPathContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiLinkPathContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiLinkPathContext.prototype.basis_list = function() {
    return this.getTypedRuleContext(Basis_listContext,0);
};

LiLinkPathContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

LiLinkPathContext.prototype.linkpath_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Linkpath_optionsContext);
    } else {
        return this.getTypedRuleContext(Linkpath_optionsContext,i);
    }
};
LiLinkPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiLinkPath(this);
	}
};

LiLinkPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiLinkPath(this);
	}
};

LiLinkPathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiLinkPath(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiDatesContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiDatesContext.prototype = Object.create(LineContext.prototype);
LiDatesContext.prototype.constructor = LiDatesContext;

SaltParser.LiDatesContext = LiDatesContext;

LiDatesContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiDatesContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

LiDatesContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


LiDatesContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

LiDatesContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

LiDatesContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
LiDatesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiDates(this);
	}
};

LiDatesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiDates(this);
	}
};

LiDatesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiDates(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiIdNameContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiIdNameContext.prototype = Object.create(LineContext.prototype);
LiIdNameContext.prototype.constructor = LiIdNameContext;

SaltParser.LiIdNameContext = LiIdNameContext;

LiIdNameContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiIdNameContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiIdNameContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

LiIdNameContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};
LiIdNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiIdName(this);
	}
};

LiIdNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiIdName(this);
	}
};

LiIdNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiIdName(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LiMatchStratContext(parser, ctx) {
	LineContext.call(this, parser);
    LineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LiMatchStratContext.prototype = Object.create(LineContext.prototype);
LiMatchStratContext.prototype.constructor = LiMatchStratContext;

SaltParser.LiMatchStratContext = LiMatchStratContext;

LiMatchStratContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

LiMatchStratContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

LiMatchStratContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

LiMatchStratContext.prototype.match_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Match_optionContext);
    } else {
        return this.getTypedRuleContext(Match_optionContext,i);
    }
};

LiMatchStratContext.prototype.match_line = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Match_lineContext);
    } else {
        return this.getTypedRuleContext(Match_lineContext,i);
    }
};
LiMatchStratContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLiMatchStrat(this);
	}
};

LiMatchStratContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLiMatchStrat(this);
	}
};

LiMatchStratContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLiMatchStrat(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.LineContext = LineContext;

SaltParser.prototype.line = function() {

    var localctx = new LineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SaltParser.RULE_line);
    var _la = 0; // Token type
    try {
        this.state = 759;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__0:
            localctx = new LiModuleContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 291;
            this.match(SaltParser.T__0);
            this.state = 295;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
            if(la_===1) {
                this.state = 292;
                this.co();
                this.state = 293;
                this.match(SaltParser.T__1);

            }
            this.state = 297;
            this.co();
            this.state = 298;
            this.periodic_ids();
            this.state = 300;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
            if(la_===1) {
                this.state = 299;
                this.co();

            }
            this.state = 302;
            this.nl();
            break;
        case SaltParser.T__2:
        case SaltParser.T__3:
        case SaltParser.T__4:
        case SaltParser.T__5:
        case SaltParser.T__6:
        case SaltParser.T__7:
            localctx = new LiIdNameContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 304;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SaltParser.T__2) | (1 << SaltParser.T__3) | (1 << SaltParser.T__4) | (1 << SaltParser.T__5) | (1 << SaltParser.T__6) | (1 << SaltParser.T__7))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 305;
            this.co();
            this.state = 306;
            this.match(SaltParser.ID);
            this.state = 308;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
            if(la_===1) {
                this.state = 307;
                this.co();

            }
            this.state = 310;
            this.nl();
            break;
        case SaltParser.T__8:
            localctx = new LiRidfieldContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 312;
            this.match(SaltParser.T__8);
            this.state = 313;
            this.co();
            this.state = 314;
            this.match(SaltParser.ID);
            this.state = 318;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
            if(la_===1) {
                this.state = 315;
                this.co();
                this.state = 316;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SaltParser.T__9) | (1 << SaltParser.T__10) | (1 << SaltParser.T__11))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 321;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
            if(la_===1) {
                this.state = 320;
                this.co();

            }
            this.state = 323;
            this.nl();
            break;
        case SaltParser.T__12:
            localctx = new LiIdFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 325;
            this.match(SaltParser.T__12);
            this.state = 329;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
            if(la_===1) {
                this.state = 326;
                this.co();
                this.state = 327;
                this.match(SaltParser.T__13);

            }
            this.state = 331;
            this.co();
            this.state = 332;
            this.match(SaltParser.ID);
            this.state = 334;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
            if(la_===1) {
                this.state = 333;
                this.co();

            }
            this.state = 336;
            this.nl();
            break;
        case SaltParser.T__14:
        case SaltParser.T__15:
        case SaltParser.T__16:
        case SaltParser.T__17:
        case SaltParser.T__18:
            localctx = new LiNumLineContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 338;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SaltParser.T__14) | (1 << SaltParser.T__15) | (1 << SaltParser.T__16) | (1 << SaltParser.T__17) | (1 << SaltParser.T__18))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 339;
            this.co();
            this.state = 340;
            this.match(SaltParser.INT);
            this.state = 342;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
            if(la_===1) {
                this.state = 341;
                this.co();

            }
            this.state = 344;
            this.nl();
            break;
        case SaltParser.T__19:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 346;
            this.match(SaltParser.T__19);
            this.state = 347;
            this.co();
            this.state = 348;
            this.match(SaltParser.ID);
            this.state = 352; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 349;
            		this.co();
            		this.state = 350;
            		this.besttype_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 354; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,9, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 357;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
            if(la_===1) {
                this.state = 356;
                this.co();

            }
            this.state = 359;
            this.nl();
            break;
        case SaltParser.T__20:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 361;
            this.match(SaltParser.T__20);
            this.state = 362;
            this.co();
            this.state = 363;
            this.match(SaltParser.ID);
            this.state = 367; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 364;
            		this.co();
            		this.state = 365;
            		this.fuzzy_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 369; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,11, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 372;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
            if(la_===1) {
                this.state = 371;
                this.co();

            }
            this.state = 374;
            this.nl();
            break;
        case SaltParser.T__21:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 376;
            this.match(SaltParser.T__21);
            this.state = 377;
            this.co();
            this.state = 378;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__22 || _la===SaltParser.ID)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 382; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 379;
            		this.co();
            		this.state = 380;
            		this.fieldtype_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 384; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,13, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 387;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
            if(la_===1) {
                this.state = 386;
                this.co();

            }
            this.state = 389;
            this.nl();
            break;
        case SaltParser.T__23:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 391;
            this.match(SaltParser.T__23);
            this.state = 392;
            this.co();
            this.state = 393;
            this.match(SaltParser.ID);
            this.state = 397; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 394;
            		this.co();
            		this.state = 395;
            		this.fieldtypedetect_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 399; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,15, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 402;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
            if(la_===1) {
                this.state = 401;
                this.co();

            }
            this.state = 404;
            this.nl();
            break;
        case SaltParser.T__24:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 406;
            this.match(SaltParser.T__24);
            this.state = 407;
            this.co();
            this.state = 408;
            this.dashed_id();
            this.state = 414;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 409;
                    this.co();
                    this.state = 410;
                    this.concept_options(); 
                }
                this.state = 416;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
            }

            this.state = 418;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
            if(la_===1) {
                this.state = 417;
                this.trail_spec();

            }
            this.state = 421;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            if(la_===1) {
                this.state = 420;
                this.co();

            }
            this.state = 423;
            this.nl();
            break;
        case SaltParser.T__25:
            localctx = new LiIdAttributeContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 425;
            this.match(SaltParser.T__25);
            this.state = 426;
            this.co();
            this.state = 427;
            this.match(SaltParser.ID);
            this.state = 433;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 428;
                    this.co();
                    this.state = 429;
                    this.source_field_options(); 
                }
                this.state = 435;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
            }

            this.state = 437;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
            if(la_===1) {
                this.state = 436;
                this.co();

            }
            this.state = 439;
            this.nl();
            break;
        case SaltParser.T__26:
            localctx = new LiAttributeContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 441;
            this.match(SaltParser.T__26);
            this.state = 445; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 442;
            		this.co();
            		this.state = 443;
            		this.blocklink_option();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 447; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,22, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 450;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
            if(la_===1) {
                this.state = 449;
                this.co();

            }
            this.state = 452;
            this.nl();
            break;
        case SaltParser.T__27:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 454;
            this.match(SaltParser.T__27);
            this.state = 455;
            this.co();
            this.state = 456;
            this.match(SaltParser.ID);
            this.state = 460; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 457;
            		this.co();
            		this.state = 458;
            		this.cleave_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 462; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,24, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 465;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
            if(la_===1) {
                this.state = 464;
                this.co();

            }
            this.state = 467;
            this.nl();
            break;
        case SaltParser.T__28:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 469;
            this.match(SaltParser.T__28);
            this.state = 470;
            this.co();
            this.state = 471;
            this.match(SaltParser.ID);
            this.state = 475; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 472;
            		this.co();
            		this.state = 473;
            		this.relationship_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 477; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,26, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 480;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 479;
                this.co();

            }
            this.state = 482;
            this.nl();
            break;
        case SaltParser.T__29:
            localctx = new LiDatesContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 484;
            this.match(SaltParser.T__29);
            this.state = 485;
            this.co();
            this.state = 486;
            this.match(SaltParser.T__30);
            this.state = 487;
            this.lp();
            this.state = 488;
            this.match(SaltParser.ID);
            this.state = 489;
            this.comma();
            this.state = 490;
            this.match(SaltParser.ID);
            this.state = 491;
            this.rp();
            this.state = 493;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
            if(la_===1) {
                this.state = 492;
                this.co();

            }
            this.state = 495;
            this.nl();
            break;
        case SaltParser.T__31:
            localctx = new LiIngestModeContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 497;
            this.match(SaltParser.T__31);
            this.state = 503;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 498;
                    this.co();
                    this.state = 499;
                    this.ingestmode_options(); 
                }
                this.state = 505;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
            }

            this.state = 507;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
            if(la_===1) {
                this.state = 506;
                this.co();

            }
            this.state = 509;
            this.nl();
            break;
        case SaltParser.T__32:
        case SaltParser.T__33:
            localctx = new LiIdNameContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 510;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__32 || _la===SaltParser.T__33)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 511;
            this.co();
            this.state = 512;
            this.periodic_ids();
            this.state = 514;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            if(la_===1) {
                this.state = 513;
                this.co();

            }
            this.state = 516;
            this.nl();
            break;
        case SaltParser.T__34:
        case SaltParser.T__35:
            localctx = new LiIdListContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 518;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__34 || _la===SaltParser.T__35)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 519;
            this.co();
            this.state = 520;
            this.id_comma_list();
            this.state = 522;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
            if(la_===1) {
                this.state = 521;
                this.co();

            }
            this.state = 524;
            this.nl();
            break;
        case SaltParser.T__36:
            localctx = new LiDocFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 526;
            this.match(SaltParser.T__36);
            this.state = 527;
            this.co();
            this.state = 528;
            this.match(SaltParser.ID);
            this.state = 532;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
            if(la_===1) {
                this.state = 529;
                this.co();
                this.state = 530;
                _la = this._input.LA(1);
                if(!(_la===SaltParser.T__10 || _la===SaltParser.T__11)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 535;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
            if(la_===1) {
                this.state = 534;
                this.co();

            }
            this.state = 537;
            this.nl();
            break;
        case SaltParser.T__37:
            localctx = new LiProcessContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 539;
            this.match(SaltParser.T__37);
            this.state = 540;
            this.co();
            this.state = 541;
            this.match(SaltParser.ID);
            this.state = 548;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 542;
                this.co();
                this.state = 543;
                this.match(SaltParser.T__38);
                this.state = 544;
                this.lp();
                this.state = 545;
                _la = this._input.LA(1);
                if(!(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SaltParser.T__39 - 40)) | (1 << (SaltParser.T__40 - 40)) | (1 << (SaltParser.T__41 - 40)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 546;
                this.rp();

            }
            this.state = 551;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
            if(la_===1) {
                this.state = 550;
                this.co();

            }
            this.state = 553;
            this.nl();
            break;
        case SaltParser.T__42:
            localctx = new LiLinkPathContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 555;
            this.match(SaltParser.T__42);
            this.state = 556;
            this.co();
            this.state = 557;
            this.match(SaltParser.ID);
            this.state = 558;
            this.co();
            this.state = 559;
            this.basis_list();
            this.state = 565;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 560;
                    this.co();
                    this.state = 561;
                    this.linkpath_options(); 
                }
                this.state = 567;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
            }

            this.state = 569;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 568;
                this.co();

            }
            this.state = 571;
            this.nl();
            break;
        case SaltParser.T__43:
            localctx = new LiFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 573;
            this.match(SaltParser.T__43);
            this.state = 574;
            this.co();
            this.state = 575;
            this.format_options();
            this.state = 577;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
            if(la_===1) {
                this.state = 576;
                this.co();

            }
            this.state = 579;
            this.nl();
            break;
        case SaltParser.T__44:
            localctx = new LiIdAttributeContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 581;
            this.match(SaltParser.T__44);
            this.state = 582;
            this.co();
            this.state = 583;
            this.match(SaltParser.ID);
            this.state = 584;
            this.co();
            this.state = 585;
            this.asof_options();
            this.state = 587;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
            if(la_===1) {
                this.state = 586;
                this.co();

            }
            this.state = 589;
            this.nl();
            break;
        case SaltParser.T__45:
            localctx = new LiAttributeContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 591;
            this.match(SaltParser.T__45);
            this.state = 595; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 592;
            		this.co();
            		this.state = 593;
            		this.efficacy_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 597; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,41, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 600;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 599;
                this.co();

            }
            this.state = 602;
            this.nl();
            break;
        case SaltParser.T__46:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 604;
            this.match(SaltParser.T__46);
            this.state = 605;
            this.co();
            this.state = 606;
            this.match(SaltParser.ID);
            this.state = 610; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 607;
            		this.co();
            		this.state = 608;
            		this.attributefile_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 612; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,43, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 615;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
            if(la_===1) {
                this.state = 614;
                this.trail_spec();

            }
            this.state = 618;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
            if(la_===1) {
                this.state = 617;
                this.co();

            }
            this.state = 620;
            this.nl();
            break;
        case SaltParser.T__47:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 622;
            this.match(SaltParser.T__47);
            this.state = 623;
            this.co();
            this.state = 624;
            this.match(SaltParser.ID);
            this.state = 628; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 625;
            		this.co();
            		this.state = 626;
            		this.ingestfile_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 630; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,46, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 633;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
            if(la_===1) {
                this.state = 632;
                this.co();

            }
            this.state = 635;
            this.nl();
            break;
        case SaltParser.T__48:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 637;
            this.match(SaltParser.T__48);
            this.state = 638;
            this.co();
            this.state = 639;
            this.match(SaltParser.ID);
            this.state = 643; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 640;
            		this.co();
            		this.state = 641;
            		this.external_file_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 645; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,48, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 648;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
            if(la_===1) {
                this.state = 647;
                this.co();

            }
            this.state = 650;
            this.nl();
            break;
        case SaltParser.T__49:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 652;
            this.match(SaltParser.T__49);
            this.state = 653;
            this.co();
            this.state = 654;
            this.match(SaltParser.ID);
            this.state = 655;
            this.co();
            this.state = 656;
            this.cluster_option();
            this.state = 658;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            if(la_===1) {
                this.state = 657;
                this.co();

            }
            this.state = 660;
            this.nl();
            break;
        case SaltParser.T__50:
            localctx = new LiOptionsContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 662;
            this.match(SaltParser.T__50);
            this.state = 663;
            this.co();
            this.state = 664;
            this.option_options();
            this.state = 666;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
            if(la_===1) {
                this.state = 665;
                this.co();

            }
            this.state = 668;
            this.nl();
            break;
        case SaltParser.T__51:
            localctx = new LiHackContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 670;
            this.match(SaltParser.T__51);
            this.state = 671;
            this.co();
            this.state = 672;
            this.hack_options();
            this.state = 674;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
            if(la_===1) {
                this.state = 673;
                this.co();

            }
            this.state = 676;
            this.nl();
            break;
        case SaltParser.T__52:
            localctx = new LiMatchStratContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 678;
            this.match(SaltParser.T__52);
            this.state = 679;
            this.co();
            this.state = 680;
            this.match(SaltParser.ID);
            this.state = 684; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 681;
            		this.co();
            		this.state = 682;
            		this.match_option();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 686; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,53, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 689;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
            if(la_===1) {
                this.state = 688;
                this.co();

            }
            this.state = 691;
            this.nl();
            this.state = 703;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 693; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 692;
                    this.match_line();
                    this.state = 695; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SaltParser.T__93 - 94)) | (1 << (SaltParser.T__94 - 94)) | (1 << (SaltParser.T__95 - 94)) | (1 << (SaltParser.T__96 - 94)))) !== 0) || _la===SaltParser.WS);
                this.state = 697;
                this.match(SaltParser.T__53);
                this.state = 699;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
                if(la_===1) {
                    this.state = 698;
                    this.co();

                }
                this.state = 701;
                this.nl();

            }
            break;
        case SaltParser.T__73:
        case SaltParser.T__74:
        case SaltParser.T__75:
        case SaltParser.T__76:
        case SaltParser.T__77:
        case SaltParser.T__78:
        case SaltParser.T__79:
        case SaltParser.T__80:
        case SaltParser.NL:
        case SaltParser.WS:
        case SaltParser.COMMENT:
        case SaltParser.ML_COMMENT:
            localctx = new LiSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 32);
            this.state = 705;
            this.field_line();
            break;
        case SaltParser.T__54:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 33);
            this.state = 706;
            this.match(SaltParser.T__54);
            this.state = 707;
            this.co();
            this.state = 708;
            this.match(SaltParser.ID);
            this.state = 712; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 709;
            		this.co();
            		this.state = 710;
            		this.datasettype_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 714; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,58, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 717;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
            if(la_===1) {
                this.state = 716;
                this.co();

            }
            this.state = 719;
            this.nl();
            break;
        case SaltParser.T__55:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 34);
            this.state = 721;
            this.match(SaltParser.T__55);
            this.state = 722;
            this.co();
            this.state = 723;
            this.match(SaltParser.ID);
            this.state = 725;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
            if(la_===1) {
                this.state = 724;
                this.co();

            }
            this.state = 727;
            this.nl();
            break;
        case SaltParser.T__56:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 35);
            this.state = 729;
            this.match(SaltParser.T__56);
            this.state = 730;
            this.co();
            this.state = 731;
            this.match(SaltParser.ID);
            this.state = 735; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 732;
            		this.co();
            		this.state = 733;
            		this.errinfo_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 737; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,61, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 740;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
            if(la_===1) {
                this.state = 739;
                this.co();

            }
            this.state = 742;
            this.nl();
            break;
        case SaltParser.T__57:
            localctx = new LiFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 36);
            this.state = 744;
            this.match(SaltParser.T__57);
            this.state = 745;
            this.co();
            this.state = 746;
            this.match(SaltParser.ID);
            this.state = 750; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 747;
            		this.co();
            		this.state = 748;
            		this.distribution_option();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 752; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,63, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 755;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
            if(la_===1) {
                this.state = 754;
                this.co();

            }
            this.state = 757;
            this.nl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Distribution_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_distribution_option;
    return this;
}

Distribution_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Distribution_optionContext.prototype.constructor = Distribution_optionContext;


 
Distribution_optionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DistSkipContext(parser, ctx) {
	Distribution_optionContext.call(this, parser);
    Distribution_optionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DistSkipContext.prototype = Object.create(Distribution_optionContext.prototype);
DistSkipContext.prototype.constructor = DistSkipContext;

SaltParser.DistSkipContext = DistSkipContext;

DistSkipContext.prototype.buckets_option = function() {
    return this.getTypedRuleContext(Buckets_optionContext,0);
};

DistSkipContext.prototype.bucket_option = function() {
    return this.getTypedRuleContext(Bucket_optionContext,0);
};
DistSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDistSkip(this);
	}
};

DistSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDistSkip(this);
	}
};

DistSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDistSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DistFlagContext(parser, ctx) {
	Distribution_optionContext.call(this, parser);
    Distribution_optionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DistFlagContext.prototype = Object.create(Distribution_optionContext.prototype);
DistFlagContext.prototype.constructor = DistFlagContext;

SaltParser.DistFlagContext = DistFlagContext;

DistFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDistFlag(this);
	}
};

DistFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDistFlag(this);
	}
};

DistFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDistFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DistDoubleContext(parser, ctx) {
	Distribution_optionContext.call(this, parser);
    Distribution_optionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DistDoubleContext.prototype = Object.create(Distribution_optionContext.prototype);
DistDoubleContext.prototype.constructor = DistDoubleContext;

SaltParser.DistDoubleContext = DistDoubleContext;

DistDoubleContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

DistDoubleContext.prototype.signed_real = function() {
    return this.getTypedRuleContext(Signed_realContext,0);
};

DistDoubleContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
DistDoubleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDistDouble(this);
	}
};

DistDoubleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDistDouble(this);
	}
};

DistDoubleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDistDouble(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Distribution_optionContext = Distribution_optionContext;

SaltParser.prototype.distribution_option = function() {

    var localctx = new Distribution_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SaltParser.RULE_distribution_option);
    var _la = 0; // Token type
    try {
        this.state = 769;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__58:
            localctx = new DistFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 761;
            this.match(SaltParser.T__58);
            break;
        case SaltParser.T__59:
        case SaltParser.T__60:
            localctx = new DistDoubleContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 762;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__59 || _la===SaltParser.T__60)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 763;
            this.lp();
            this.state = 764;
            this.signed_real();
            this.state = 765;
            this.rp();
            break;
        case SaltParser.T__61:
            localctx = new DistSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 767;
            this.buckets_option();
            break;
        case SaltParser.T__63:
            localctx = new DistSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 768;
            this.bucket_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Buckets_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_buckets_option;
    return this;
}

Buckets_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Buckets_optionContext.prototype.constructor = Buckets_optionContext;

Buckets_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Buckets_optionContext.prototype.continuous_bucket_innards = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Continuous_bucket_innardsContext);
    } else {
        return this.getTypedRuleContext(Continuous_bucket_innardsContext,i);
    }
};

Buckets_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Buckets_optionContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Buckets_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBuckets_option(this);
	}
};

Buckets_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBuckets_option(this);
	}
};

Buckets_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBuckets_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Buckets_optionContext = Buckets_optionContext;

SaltParser.prototype.buckets_option = function() {

    var localctx = new Buckets_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SaltParser.RULE_buckets_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 771;
        this.match(SaltParser.T__61);
        this.state = 772;
        this.lp();
        this.state = 773;
        this.continuous_bucket_innards();
        this.state = 779;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 774;
                this.comma();
                this.state = 775;
                this.continuous_bucket_innards(); 
            }
            this.state = 781;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
        }

        this.state = 782;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Continuous_bucket_innardsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_continuous_bucket_innards;
    return this;
}

Continuous_bucket_innardsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continuous_bucket_innardsContext.prototype.constructor = Continuous_bucket_innardsContext;

Continuous_bucket_innardsContext.prototype.lt_operator = function() {
    return this.getTypedRuleContext(Lt_operatorContext,0);
};

Continuous_bucket_innardsContext.prototype.signed_real = function() {
    return this.getTypedRuleContext(Signed_realContext,0);
};

Continuous_bucket_innardsContext.prototype.WS = function() {
    return this.getToken(SaltParser.WS, 0);
};

Continuous_bucket_innardsContext.prototype.goes_to = function() {
    return this.getTypedRuleContext(Goes_toContext,0);
};

Continuous_bucket_innardsContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

Continuous_bucket_innardsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterContinuous_bucket_innards(this);
	}
};

Continuous_bucket_innardsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitContinuous_bucket_innards(this);
	}
};

Continuous_bucket_innardsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitContinuous_bucket_innards(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Continuous_bucket_innardsContext = Continuous_bucket_innardsContext;

SaltParser.prototype.continuous_bucket_innards = function() {

    var localctx = new Continuous_bucket_innardsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SaltParser.RULE_continuous_bucket_innards);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 784;
        this.lt_operator();
        this.state = 786;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 785;
            this.match(SaltParser.WS);
        }

        this.state = 788;
        this.signed_real();
        this.state = 793;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 789;
            this.goes_to();
            this.state = 790;
            this.real();
            this.state = 791;
            this.match(SaltParser.T__62);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bucket_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_bucket_option;
    return this;
}

Bucket_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bucket_optionContext.prototype.constructor = Bucket_optionContext;

Bucket_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Bucket_optionContext.prototype.discrete_bucket_innards = function() {
    return this.getTypedRuleContext(Discrete_bucket_innardsContext,0);
};

Bucket_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Bucket_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBucket_option(this);
	}
};

Bucket_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBucket_option(this);
	}
};

Bucket_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBucket_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Bucket_optionContext = Bucket_optionContext;

SaltParser.prototype.bucket_option = function() {

    var localctx = new Bucket_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SaltParser.RULE_bucket_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 795;
        this.match(SaltParser.T__63);
        this.state = 796;
        this.lp();
        this.state = 797;
        this.discrete_bucket_innards();
        this.state = 798;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Discrete_bucket_innardsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_discrete_bucket_innards;
    return this;
}

Discrete_bucket_innardsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Discrete_bucket_innardsContext.prototype.constructor = Discrete_bucket_innardsContext;

Discrete_bucket_innardsContext.prototype.gt_operator = function() {
    return this.getTypedRuleContext(Gt_operatorContext,0);
};

Discrete_bucket_innardsContext.prototype.signed_real = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Signed_realContext);
    } else {
        return this.getTypedRuleContext(Signed_realContext,i);
    }
};

Discrete_bucket_innardsContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Discrete_bucket_innardsContext.prototype.lt_operator = function() {
    return this.getTypedRuleContext(Lt_operatorContext,0);
};

Discrete_bucket_innardsContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


Discrete_bucket_innardsContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

Discrete_bucket_innardsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDiscrete_bucket_innards(this);
	}
};

Discrete_bucket_innardsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDiscrete_bucket_innards(this);
	}
};

Discrete_bucket_innardsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDiscrete_bucket_innards(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Discrete_bucket_innardsContext = Discrete_bucket_innardsContext;

SaltParser.prototype.discrete_bucket_innards = function() {

    var localctx = new Discrete_bucket_innardsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SaltParser.RULE_discrete_bucket_innards);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 800;
        this.gt_operator();
        this.state = 802;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 801;
            this.match(SaltParser.WS);
        }

        this.state = 804;
        this.signed_real();
        this.state = 805;
        this.comma();
        this.state = 806;
        this.lt_operator();
        this.state = 808;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 807;
            this.match(SaltParser.WS);
        }

        this.state = 810;
        this.signed_real();
        this.state = 815;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 811;
            this.comma();
            this.state = 812;
            this.real();
            this.state = 813;
            this.match(SaltParser.T__62);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ingestmode_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_ingestmode_options;
    return this;
}

Ingestmode_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ingestmode_optionsContext.prototype.constructor = Ingestmode_optionsContext;


 
Ingestmode_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IngmodeDatesContext(parser, ctx) {
	Ingestmode_optionsContext.call(this, parser);
    Ingestmode_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngmodeDatesContext.prototype = Object.create(Ingestmode_optionsContext.prototype);
IngmodeDatesContext.prototype.constructor = IngmodeDatesContext;

SaltParser.IngmodeDatesContext = IngmodeDatesContext;

IngmodeDatesContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

IngmodeDatesContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


IngmodeDatesContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

IngmodeDatesContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
IngmodeDatesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngmodeDates(this);
	}
};

IngmodeDatesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngmodeDates(this);
	}
};

IngmodeDatesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngmodeDates(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IngmodeFlagContext(parser, ctx) {
	Ingestmode_optionsContext.call(this, parser);
    Ingestmode_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngmodeFlagContext.prototype = Object.create(Ingestmode_optionsContext.prototype);
IngmodeFlagContext.prototype.constructor = IngmodeFlagContext;

SaltParser.IngmodeFlagContext = IngmodeFlagContext;

IngmodeFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngmodeFlag(this);
	}
};

IngmodeFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngmodeFlag(this);
	}
};

IngmodeFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngmodeFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IngmodeFieldContext(parser, ctx) {
	Ingestmode_optionsContext.call(this, parser);
    Ingestmode_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngmodeFieldContext.prototype = Object.create(Ingestmode_optionsContext.prototype);
IngmodeFieldContext.prototype.constructor = IngmodeFieldContext;

SaltParser.IngmodeFieldContext = IngmodeFieldContext;

IngmodeFieldContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

IngmodeFieldContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

IngmodeFieldContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
IngmodeFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngmodeField(this);
	}
};

IngmodeFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngmodeField(this);
	}
};

IngmodeFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngmodeField(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Ingestmode_optionsContext = Ingestmode_optionsContext;

SaltParser.prototype.ingestmode_options = function() {

    var localctx = new Ingestmode_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SaltParser.RULE_ingestmode_options);
    var _la = 0; // Token type
    try {
        this.state = 830;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__64:
            localctx = new IngmodeDatesContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 817;
            this.match(SaltParser.T__64);
            this.state = 818;
            this.lp();
            this.state = 819;
            this.match(SaltParser.ID);
            this.state = 820;
            this.comma();
            this.state = 821;
            this.match(SaltParser.ID);
            this.state = 822;
            this.rp();
            break;
        case SaltParser.T__29:
            localctx = new IngmodeFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 824;
            this.match(SaltParser.T__29);
            break;
        case SaltParser.T__65:
        case SaltParser.T__66:
            localctx = new IngmodeFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 825;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__65 || _la===SaltParser.T__66)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 826;
            this.lp();
            this.state = 827;
            this.match(SaltParser.ID);
            this.state = 828;
            this.rp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Format_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_format_options;
    return this;
}

Format_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Format_optionsContext.prototype.constructor = Format_optionsContext;

Format_optionsContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

Format_optionsContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


Format_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFormat_options(this);
	}
};

Format_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFormat_options(this);
	}
};

Format_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFormat_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Format_optionsContext = Format_optionsContext;

SaltParser.prototype.format_options = function() {

    var localctx = new Format_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SaltParser.RULE_format_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__67 || _la===SaltParser.T__68)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 838;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 833;
                this.co();
                this.state = 834;
                this.match(SaltParser.ID); 
            }
            this.state = 840;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Errinfo_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_errinfo_options;
    return this;
}

Errinfo_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Errinfo_optionsContext.prototype.constructor = Errinfo_optionsContext;

Errinfo_optionsContext.prototype.nonempty_stuff_escape_brackets = function() {
    return this.getTypedRuleContext(Nonempty_stuff_escape_bracketsContext,0);
};

Errinfo_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterErrinfo_options(this);
	}
};

Errinfo_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitErrinfo_options(this);
	}
};

Errinfo_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitErrinfo_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Errinfo_optionsContext = Errinfo_optionsContext;

SaltParser.prototype.errinfo_options = function() {

    var localctx = new Errinfo_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SaltParser.RULE_errinfo_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 841;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__69 || _la===SaltParser.T__70)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 842;
        this.match(SaltParser.T__71);
        this.state = 843;
        this.nonempty_stuff_escape_brackets();
        this.state = 844;
        this.match(SaltParser.T__72);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_lineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_field_line;
    return this;
}

Field_lineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_lineContext.prototype.constructor = Field_lineContext;


 
Field_lineContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FlDatasetContext(parser, ctx) {
	Field_lineContext.call(this, parser);
    Field_lineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FlDatasetContext.prototype = Object.create(Field_lineContext.prototype);
FlDatasetContext.prototype.constructor = FlDatasetContext;

SaltParser.FlDatasetContext = FlDatasetContext;

FlDatasetContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

FlDatasetContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

FlDatasetContext.prototype.nl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NlContext);
    } else {
        return this.getTypedRuleContext(NlContext,i);
    }
};

FlDatasetContext.prototype.dataset_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dataset_optionsContext);
    } else {
        return this.getTypedRuleContext(Dataset_optionsContext,i);
    }
};

FlDatasetContext.prototype.field_line = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Field_lineContext);
    } else {
        return this.getTypedRuleContext(Field_lineContext,i);
    }
};

FlDatasetContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};

FlDatasetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFlDataset(this);
	}
};

FlDatasetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFlDataset(this);
	}
};

FlDatasetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFlDataset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FlSkipContext(parser, ctx) {
	Field_lineContext.call(this, parser);
    Field_lineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FlSkipContext.prototype = Object.create(Field_lineContext.prototype);
FlSkipContext.prototype.constructor = FlSkipContext;

SaltParser.FlSkipContext = FlSkipContext;

FlSkipContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};
FlSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFlSkip(this);
	}
};

FlSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFlSkip(this);
	}
};

FlSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFlSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FlFieldContext(parser, ctx) {
	Field_lineContext.call(this, parser);
    Field_lineContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FlFieldContext.prototype = Object.create(Field_lineContext.prototype);
FlFieldContext.prototype.constructor = FlFieldContext;

SaltParser.FlFieldContext = FlFieldContext;

FlFieldContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

FlFieldContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

FlFieldContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

FlFieldContext.prototype.field_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Field_optionsContext);
    } else {
        return this.getTypedRuleContext(Field_optionsContext,i);
    }
};

FlFieldContext.prototype.trail_spec = function() {
    return this.getTypedRuleContext(Trail_specContext,0);
};

FlFieldContext.prototype.date_field_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Date_field_optionsContext);
    } else {
        return this.getTypedRuleContext(Date_field_optionsContext,i);
    }
};

FlFieldContext.prototype.lat_long_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Lat_long_optionsContext);
    } else {
        return this.getTypedRuleContext(Lat_long_optionsContext,i);
    }
};

FlFieldContext.prototype.range_field_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Range_field_optionsContext);
    } else {
        return this.getTypedRuleContext(Range_field_optionsContext,i);
    }
};

FlFieldContext.prototype.record_type_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Record_type_optionsContext);
    } else {
        return this.getTypedRuleContext(Record_type_optionsContext,i);
    }
};

FlFieldContext.prototype.virtual_field_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Virtual_field_optionsContext);
    } else {
        return this.getTypedRuleContext(Virtual_field_optionsContext,i);
    }
};
FlFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFlField(this);
	}
};

FlFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFlField(this);
	}
};

FlFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFlField(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Field_lineContext = Field_lineContext;

SaltParser.prototype.field_line = function() {

    var localctx = new Field_lineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SaltParser.RULE_field_line);
    var _la = 0; // Token type
    try {
        this.state = 985;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__73:
            localctx = new FlDatasetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 846;
            this.match(SaltParser.T__73);
            this.state = 847;
            this.co();
            this.state = 848;
            this.match(SaltParser.ID);
            this.state = 854;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 849;
                    this.co();
                    this.state = 850;
                    this.dataset_options(); 
                }
                this.state = 856;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
            }

            this.state = 858;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            if(la_===1) {
                this.state = 857;
                this.co();

            }
            this.state = 860;
            this.nl();
            this.state = 865; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 862;
            		this._errHandler.sync(this);
            		var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
            		if(la_===1) {
            		    this.state = 861;
            		    this.match(SaltParser.WS);

            		}
            		this.state = 864;
            		this.field_line();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 867; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,78, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.WS) {
                this.state = 869;
                this.match(SaltParser.WS);
            }

            this.state = 872;
            this.match(SaltParser.T__53);
            this.state = 874;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
            if(la_===1) {
                this.state = 873;
                this.co();

            }
            this.state = 876;
            this.nl();
            break;
        case SaltParser.T__74:
        case SaltParser.T__75:
            localctx = new FlFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 878;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__74 || _la===SaltParser.T__75)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 879;
            this.co();
            this.state = 880;
            this.match(SaltParser.ID);
            this.state = 886;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 881;
                    this.co();
                    this.state = 882;
                    this.field_options(); 
                }
                this.state = 888;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
            }

            this.state = 890;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
            if(la_===1) {
                this.state = 889;
                this.trail_spec();

            }
            this.state = 893;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
            if(la_===1) {
                this.state = 892;
                this.co();

            }
            this.state = 895;
            this.nl();
            break;
        case SaltParser.T__76:
            localctx = new FlFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 897;
            this.match(SaltParser.T__76);
            this.state = 898;
            this.co();
            this.state = 899;
            this.match(SaltParser.ID);
            this.state = 905;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 900;
                    this.co();
                    this.state = 901;
                    this.date_field_options(); 
                }
                this.state = 907;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
            }

            this.state = 909;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
            if(la_===1) {
                this.state = 908;
                this.trail_spec();

            }
            this.state = 912;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
            if(la_===1) {
                this.state = 911;
                this.co();

            }
            this.state = 914;
            this.nl();
            break;
        case SaltParser.T__77:
            localctx = new FlFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 916;
            this.match(SaltParser.T__77);
            this.state = 917;
            this.co();
            this.state = 918;
            this.match(SaltParser.ID);
            this.state = 924;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 919;
                    this.co();
                    this.state = 920;
                    this.lat_long_options(); 
                }
                this.state = 926;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
            }

            this.state = 928;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
            if(la_===1) {
                this.state = 927;
                this.trail_spec();

            }
            this.state = 931;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
            if(la_===1) {
                this.state = 930;
                this.co();

            }
            this.state = 933;
            this.nl();
            break;
        case SaltParser.T__78:
            localctx = new FlFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 935;
            this.match(SaltParser.T__78);
            this.state = 936;
            this.co();
            this.state = 937;
            this.match(SaltParser.ID);
            this.state = 943;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 938;
                    this.co();
                    this.state = 939;
                    this.range_field_options(); 
                }
                this.state = 945;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
            }

            this.state = 947;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
            if(la_===1) {
                this.state = 946;
                this.trail_spec();

            }
            this.state = 950;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
            if(la_===1) {
                this.state = 949;
                this.co();

            }
            this.state = 952;
            this.nl();
            break;
        case SaltParser.T__79:
            localctx = new FlFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 954;
            this.match(SaltParser.T__79);
            this.state = 955;
            this.co();
            this.state = 956;
            this.match(SaltParser.ID);
            this.state = 960; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 957;
            		this.co();
            		this.state = 958;
            		this.record_type_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 962; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,93, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 965;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            if(la_===1) {
                this.state = 964;
                this.co();

            }
            this.state = 967;
            this.nl();
            break;
        case SaltParser.T__80:
            localctx = new FlFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 969;
            this.match(SaltParser.T__80);
            this.state = 970;
            this.co();
            this.state = 971;
            this.match(SaltParser.ID);
            this.state = 975; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 972;
            		this.co();
            		this.state = 973;
            		this.virtual_field_options();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 977; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,95, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 980;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 979;
                this.co();

            }
            this.state = 982;
            this.nl();
            break;
        case SaltParser.NL:
        case SaltParser.WS:
        case SaltParser.COMMENT:
        case SaltParser.ML_COMMENT:
            localctx = new FlSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 984;
            this.nl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Virtual_field_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_virtual_field_options;
    return this;
}

Virtual_field_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Virtual_field_optionsContext.prototype.constructor = Virtual_field_optionsContext;


 
Virtual_field_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function VFieldSkipContext(parser, ctx) {
	Virtual_field_optionsContext.call(this, parser);
    Virtual_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VFieldSkipContext.prototype = Object.create(Virtual_field_optionsContext.prototype);
VFieldSkipContext.prototype.constructor = VFieldSkipContext;

SaltParser.VFieldSkipContext = VFieldSkipContext;

VFieldSkipContext.prototype.like_option = function() {
    return this.getTypedRuleContext(Like_optionContext,0);
};

VFieldSkipContext.prototype.concat_option = function() {
    return this.getTypedRuleContext(Concat_optionContext,0);
};
VFieldSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterVFieldSkip(this);
	}
};

VFieldSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitVFieldSkip(this);
	}
};

VFieldSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitVFieldSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function VFieldIDContext(parser, ctx) {
	Virtual_field_optionsContext.call(this, parser);
    Virtual_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VFieldIDContext.prototype = Object.create(Virtual_field_optionsContext.prototype);
VFieldIDContext.prototype.constructor = VFieldIDContext;

SaltParser.VFieldIDContext = VFieldIDContext;

VFieldIDContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};
VFieldIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterVFieldID(this);
	}
};

VFieldIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitVFieldID(this);
	}
};

VFieldIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitVFieldID(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Virtual_field_optionsContext = Virtual_field_optionsContext;

SaltParser.prototype.virtual_field_options = function() {

    var localctx = new Virtual_field_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SaltParser.RULE_virtual_field_options);
    try {
        this.state = 991;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__81:
            localctx = new VFieldIDContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 987;
            this.match(SaltParser.T__81);
            this.state = 988;
            this.id_param();
            break;
        case SaltParser.T__159:
            localctx = new VFieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 989;
            this.like_option();
            break;
        case SaltParser.T__82:
            localctx = new VFieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 990;
            this.concat_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concat_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_concat_option;
    return this;
}

Concat_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concat_optionContext.prototype.constructor = Concat_optionContext;

Concat_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Concat_optionContext.prototype.virtual_field_piece = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Virtual_field_pieceContext);
    } else {
        return this.getTypedRuleContext(Virtual_field_pieceContext,i);
    }
};

Concat_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Concat_optionContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Concat_optionContext.prototype.delimiter_option = function() {
    return this.getTypedRuleContext(Delimiter_optionContext,0);
};

Concat_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterConcat_option(this);
	}
};

Concat_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitConcat_option(this);
	}
};

Concat_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitConcat_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Concat_optionContext = Concat_optionContext;

SaltParser.prototype.concat_option = function() {

    var localctx = new Concat_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SaltParser.RULE_concat_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 993;
        this.match(SaltParser.T__82);
        this.state = 994;
        this.lp();
        this.state = 995;
        this.virtual_field_piece();
        this.state = 1001;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 996;
                this.comma();
                this.state = 997;
                this.virtual_field_piece(); 
            }
            this.state = 1003;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
        }

        this.state = 1007;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
        if(la_===1) {
            this.state = 1004;
            this.comma();
            this.state = 1005;
            this.delimiter_option();

        }
        this.state = 1009;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delimiter_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_delimiter_option;
    return this;
}

Delimiter_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delimiter_optionContext.prototype.constructor = Delimiter_optionContext;

Delimiter_optionContext.prototype.nonempty_stuff_in_brackets = function() {
    return this.getTypedRuleContext(Nonempty_stuff_in_bracketsContext,0);
};

Delimiter_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDelimiter_option(this);
	}
};

Delimiter_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDelimiter_option(this);
	}
};

Delimiter_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDelimiter_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Delimiter_optionContext = Delimiter_optionContext;

SaltParser.prototype.delimiter_option = function() {

    var localctx = new Delimiter_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SaltParser.RULE_delimiter_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1011;
        this.match(SaltParser.T__83);
        this.state = 1012;
        this.nonempty_stuff_in_brackets();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Virtual_field_pieceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_virtual_field_piece;
    return this;
}

Virtual_field_pieceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Virtual_field_pieceContext.prototype.constructor = Virtual_field_pieceContext;

Virtual_field_pieceContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Virtual_field_pieceContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Virtual_field_pieceContext.prototype.pad_option = function() {
    return this.getTypedRuleContext(Pad_optionContext,0);
};

Virtual_field_pieceContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Virtual_field_pieceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterVirtual_field_piece(this);
	}
};

Virtual_field_pieceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitVirtual_field_piece(this);
	}
};

Virtual_field_pieceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitVirtual_field_piece(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Virtual_field_pieceContext = Virtual_field_pieceContext;

SaltParser.prototype.virtual_field_piece = function() {

    var localctx = new Virtual_field_pieceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SaltParser.RULE_virtual_field_piece);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1014;
        this.match(SaltParser.ID);
        this.state = 1019;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        if(la_===1) {
            this.state = 1015;
            this.lp();
            this.state = 1016;
            this.pad_option();
            this.state = 1017;
            this.rp();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pad_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_pad_option;
    return this;
}

Pad_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pad_optionContext.prototype.constructor = Pad_optionContext;

Pad_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Pad_optionContext.prototype.useon_stuff = function() {
    return this.getTypedRuleContext(Useon_stuffContext,0);
};

Pad_optionContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Pad_optionContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Pad_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Pad_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterPad_option(this);
	}
};

Pad_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitPad_option(this);
	}
};

Pad_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitPad_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Pad_optionContext = Pad_optionContext;

SaltParser.prototype.pad_option = function() {

    var localctx = new Pad_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SaltParser.RULE_pad_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1021;
        this.match(SaltParser.T__84);
        this.state = 1022;
        this.lp();
        this.state = 1023;
        this.useon_stuff();
        this.state = 1024;
        this.comma();
        this.state = 1025;
        this.match(SaltParser.INT);
        this.state = 1026;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Datasettype_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_datasettype_options;
    return this;
}

Datasettype_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Datasettype_optionsContext.prototype.constructor = Datasettype_optionsContext;


 
Datasettype_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DSTypeCustomContext(parser, ctx) {
	Datasettype_optionsContext.call(this, parser);
    Datasettype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DSTypeCustomContext.prototype = Object.create(Datasettype_optionsContext.prototype);
DSTypeCustomContext.prototype.constructor = DSTypeCustomContext;

SaltParser.DSTypeCustomContext = DSTypeCustomContext;

DSTypeCustomContext.prototype.custom_attr_ft = function() {
    return this.getTypedRuleContext(Custom_attr_ftContext,0);
};
DSTypeCustomContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDSTypeCustom(this);
	}
};

DSTypeCustomContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDSTypeCustom(this);
	}
};

DSTypeCustomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDSTypeCustom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DSTypeNumContext(parser, ctx) {
	Datasettype_optionsContext.call(this, parser);
    Datasettype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DSTypeNumContext.prototype = Object.create(Datasettype_optionsContext.prototype);
DSTypeNumContext.prototype.constructor = DSTypeNumContext;

SaltParser.DSTypeNumContext = DSTypeNumContext;

DSTypeNumContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

DSTypeNumContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

DSTypeNumContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

DSTypeNumContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

DSTypeNumContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};
DSTypeNumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDSTypeNum(this);
	}
};

DSTypeNumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDSTypeNum(this);
	}
};

DSTypeNumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDSTypeNum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DSTypeFlagContext(parser, ctx) {
	Datasettype_optionsContext.call(this, parser);
    Datasettype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DSTypeFlagContext.prototype = Object.create(Datasettype_optionsContext.prototype);
DSTypeFlagContext.prototype.constructor = DSTypeFlagContext;

SaltParser.DSTypeFlagContext = DSTypeFlagContext;

DSTypeFlagContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

DSTypeFlagContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};

DSTypeFlagContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
DSTypeFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDSTypeFlag(this);
	}
};

DSTypeFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDSTypeFlag(this);
	}
};

DSTypeFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDSTypeFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DSTypeSkipContext(parser, ctx) {
	Datasettype_optionsContext.call(this, parser);
    Datasettype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DSTypeSkipContext.prototype = Object.create(Datasettype_optionsContext.prototype);
DSTypeSkipContext.prototype.constructor = DSTypeSkipContext;

SaltParser.DSTypeSkipContext = DSTypeSkipContext;

DSTypeSkipContext.prototype.useon = function() {
    return this.getTypedRuleContext(UseonContext,0);
};
DSTypeSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDSTypeSkip(this);
	}
};

DSTypeSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDSTypeSkip(this);
	}
};

DSTypeSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDSTypeSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Datasettype_optionsContext = Datasettype_optionsContext;

SaltParser.prototype.datasettype_options = function() {

    var localctx = new Datasettype_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SaltParser.RULE_datasettype_options);
    var _la = 0; // Token type
    try {
        this.state = 1047;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__85:
        case SaltParser.T__86:
            localctx = new DSTypeNumContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1028;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__85 || _la===SaltParser.T__86)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1029;
            this.lp();
            this.state = 1030;
            this.match(SaltParser.INT);
            this.state = 1034;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
            if(la_===1) {
                this.state = 1031;
                this.comma();
                this.state = 1032;
                this.custinfo_options();

            }
            this.state = 1036;
            this.rp();
            break;
        case SaltParser.T__13:
            localctx = new DSTypeFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1038;
            this.match(SaltParser.T__13);
            this.state = 1043;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
            if(la_===1) {
                this.state = 1039;
                this.lp();
                this.state = 1040;
                this.custinfo_options();
                this.state = 1041;
                this.rp();

            }
            break;
        case SaltParser.T__326:
            localctx = new DSTypeCustomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1045;
            this.custom_attr_ft();
            break;
        case SaltParser.T__337:
            localctx = new DSTypeSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1046;
            this.useon();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dataset_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_dataset_options;
    return this;
}

Dataset_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dataset_optionsContext.prototype.constructor = Dataset_optionsContext;


 
Dataset_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DSFlagContext(parser, ctx) {
	Dataset_optionsContext.call(this, parser);
    Dataset_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DSFlagContext.prototype = Object.create(Dataset_optionsContext.prototype);
DSFlagContext.prototype.constructor = DSFlagContext;

SaltParser.DSFlagContext = DSFlagContext;

DSFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDSFlag(this);
	}
};

DSFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDSFlag(this);
	}
};

DSFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDSFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DSSkipContext(parser, ctx) {
	Dataset_optionsContext.call(this, parser);
    Dataset_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DSSkipContext.prototype = Object.create(Dataset_optionsContext.prototype);
DSSkipContext.prototype.constructor = DSSkipContext;

SaltParser.DSSkipContext = DSSkipContext;

DSSkipContext.prototype.like_option = function() {
    return this.getTypedRuleContext(Like_optionContext,0);
};
DSSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDSSkip(this);
	}
};

DSSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDSSkip(this);
	}
};

DSSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDSSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Dataset_optionsContext = Dataset_optionsContext;

SaltParser.prototype.dataset_options = function() {

    var localctx = new Dataset_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SaltParser.RULE_dataset_options);
    var _la = 0; // Token type
    try {
        this.state = 1051;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__87:
        case SaltParser.T__88:
            localctx = new DSFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1049;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__87 || _la===SaltParser.T__88)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SaltParser.T__159:
            localctx = new DSSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1050;
            this.like_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_match_option;
    return this;
}

Match_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_optionContext.prototype.constructor = Match_optionContext;

Match_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Match_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Match_optionContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};

Match_optionContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Match_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterMatch_option(this);
	}
};

Match_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitMatch_option(this);
	}
};

Match_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitMatch_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Match_optionContext = Match_optionContext;

SaltParser.prototype.match_option = function() {

    var localctx = new Match_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SaltParser.RULE_match_option);
    try {
        this.state = 1070;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__89:
            this.enterOuterAlt(localctx, 1);
            this.state = 1053;
            this.match(SaltParser.T__89);
            break;
        case SaltParser.T__22:
            this.enterOuterAlt(localctx, 2);
            this.state = 1054;
            this.match(SaltParser.T__22);
            this.state = 1059;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
            if(la_===1) {
                this.state = 1055;
                this.lp();
                this.state = 1056;
                this.match(SaltParser.T__90);
                this.state = 1057;
                this.rp();

            }
            break;
        case SaltParser.T__91:
            this.enterOuterAlt(localctx, 3);
            this.state = 1061;
            this.match(SaltParser.T__91);
            break;
        case SaltParser.T__92:
            this.enterOuterAlt(localctx, 4);
            this.state = 1062;
            this.match(SaltParser.T__92);
            this.state = 1063;
            this.lp();
            this.state = 1066;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SaltParser.ID:
                this.state = 1064;
                this.id_comma_list();
                break;
            case SaltParser.INT:
                this.state = 1065;
                this.match(SaltParser.INT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1068;
            this.rp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_lineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_match_line;
    return this;
}

Match_lineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_lineContext.prototype.constructor = Match_lineContext;

Match_lineContext.prototype.match_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Match_expressionContext);
    } else {
        return this.getTypedRuleContext(Match_expressionContext,i);
    }
};

Match_lineContext.prototype.nl = function() {
    return this.getTypedRuleContext(NlContext,0);
};

Match_lineContext.prototype.WS = function() {
    return this.getToken(SaltParser.WS, 0);
};

Match_lineContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

Match_lineContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterMatch_line(this);
	}
};

Match_lineContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitMatch_line(this);
	}
};

Match_lineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitMatch_line(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Match_lineContext = Match_lineContext;

SaltParser.prototype.match_line = function() {

    var localctx = new Match_lineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SaltParser.RULE_match_line);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1073;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 1072;
            this.match(SaltParser.WS);
        }

        this.state = 1075;
        this.match_expression();
        this.state = 1081;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,110,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1076;
                this.co();
                this.state = 1077;
                this.match_expression(); 
            }
            this.state = 1083;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,110,this._ctx);
        }

        this.state = 1085;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
        if(la_===1) {
            this.state = 1084;
            this.co();

        }
        this.state = 1087;
        this.nl();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_match_expression;
    return this;
}

Match_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_expressionContext.prototype.constructor = Match_expressionContext;


 
Match_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function MeeqContext(parser, ctx) {
	Match_expressionContext.call(this, parser);
    Match_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MeeqContext.prototype = Object.create(Match_expressionContext.prototype);
MeeqContext.prototype.constructor = MeeqContext;

SaltParser.MeeqContext = MeeqContext;

MeeqContext.prototype.match_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Match_termContext);
    } else {
        return this.getTypedRuleContext(Match_termContext,i);
    }
};

MeeqContext.prototype.eq = function() {
    return this.getTypedRuleContext(EqContext,0);
};
MeeqContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterMeeq(this);
	}
};

MeeqContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitMeeq(this);
	}
};

MeeqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitMeeq(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MesepContext(parser, ctx) {
	Match_expressionContext.call(this, parser);
    Match_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MesepContext.prototype = Object.create(Match_expressionContext.prototype);
MesepContext.prototype.constructor = MesepContext;

SaltParser.MesepContext = MesepContext;

MesepContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterMesep(this);
	}
};

MesepContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitMesep(this);
	}
};

MesepContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitMesep(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Match_expressionContext = Match_expressionContext;

SaltParser.prototype.match_expression = function() {

    var localctx = new Match_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SaltParser.RULE_match_expression);
    try {
        this.state = 1095;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__93:
            localctx = new MesepContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1089;
            this.match(SaltParser.T__93);
            break;
        case SaltParser.T__94:
            localctx = new MesepContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1090;
            this.match(SaltParser.T__94);
            break;
        case SaltParser.T__95:
        case SaltParser.T__96:
            localctx = new MeeqContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1091;
            this.match_term();
            this.state = 1092;
            this.eq();
            this.state = 1093;
            this.match_term();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Match_termContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_match_term;
    return this;
}

Match_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Match_termContext.prototype.constructor = Match_termContext;


 
Match_termContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LefttermContext(parser, ctx) {
	Match_termContext.call(this, parser);
    Match_termContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LefttermContext.prototype = Object.create(Match_termContext.prototype);
LefttermContext.prototype.constructor = LefttermContext;

SaltParser.LefttermContext = LefttermContext;

LefttermContext.prototype.basis_element = function() {
    return this.getTypedRuleContext(Basis_elementContext,0);
};
LefttermContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLeftterm(this);
	}
};

LefttermContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLeftterm(this);
	}
};

LefttermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLeftterm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RighttermContext(parser, ctx) {
	Match_termContext.call(this, parser);
    Match_termContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RighttermContext.prototype = Object.create(Match_termContext.prototype);
RighttermContext.prototype.constructor = RighttermContext;

SaltParser.RighttermContext = RighttermContext;

RighttermContext.prototype.basis_element = function() {
    return this.getTypedRuleContext(Basis_elementContext,0);
};
RighttermContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRightterm(this);
	}
};

RighttermContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRightterm(this);
	}
};

RighttermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRightterm(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Match_termContext = Match_termContext;

SaltParser.prototype.match_term = function() {

    var localctx = new Match_termContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SaltParser.RULE_match_term);
    try {
        this.state = 1101;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__95:
            localctx = new LefttermContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1097;
            this.match(SaltParser.T__95);
            this.state = 1098;
            this.basis_element();
            break;
        case SaltParser.T__96:
            localctx = new RighttermContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1099;
            this.match(SaltParser.T__96);
            this.state = 1100;
            this.basis_element();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trail_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_trail_spec;
    return this;
}

Trail_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trail_specContext.prototype.constructor = Trail_specContext;

Trail_specContext.prototype.co = function() {
    return this.getTypedRuleContext(CoContext,0);
};

Trail_specContext.prototype.real = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RealContext);
    } else {
        return this.getTypedRuleContext(RealContext,i);
    }
};

Trail_specContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Trail_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterTrail_spec(this);
	}
};

Trail_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitTrail_spec(this);
	}
};

Trail_specContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitTrail_spec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Trail_specContext = Trail_specContext;

SaltParser.prototype.trail_spec = function() {

    var localctx = new Trail_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SaltParser.RULE_trail_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1103;
        this.co();
        this.state = 1104;
        this.real();
        this.state = 1105;
        this.comma();
        this.state = 1106;
        this.real();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Option_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_option_options;
    return this;
}

Option_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Option_optionsContext.prototype.constructor = Option_optionsContext;


 
Option_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function OptionitemContext(parser, ctx) {
	Option_optionsContext.call(this, parser);
    Option_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OptionitemContext.prototype = Object.create(Option_optionsContext.prototype);
OptionitemContext.prototype.constructor = OptionitemContext;

SaltParser.OptionitemContext = OptionitemContext;

OptionitemContext.prototype.option_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Option_itemContext);
    } else {
        return this.getTypedRuleContext(Option_itemContext,i);
    }
};

OptionitemContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};

OptionitemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOptionitem(this);
	}
};

OptionitemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOptionitem(this);
	}
};

OptionitemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOptionitem(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Option_optionsContext = Option_optionsContext;

SaltParser.prototype.option_options = function() {

    var localctx = new Option_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SaltParser.RULE_option_options);
    try {
        localctx = new OptionitemContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1108;
        this.option_item();
        this.state = 1113;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1109;
                this.match(SaltParser.WS);
                this.state = 1110;
                this.option_item(); 
            }
            this.state = 1115;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Option_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_option_item;
    return this;
}

Option_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Option_itemContext.prototype.constructor = Option_itemContext;

Option_itemContext.prototype.optiontext = function() {
    return this.getTypedRuleContext(OptiontextContext,0);
};

Option_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOption_item(this);
	}
};

Option_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOption_item(this);
	}
};

Option_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOption_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Option_itemContext = Option_itemContext;

SaltParser.prototype.option_item = function() {

    var localctx = new Option_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SaltParser.RULE_option_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1116;
        this.match(SaltParser.T__97);
        this.state = 1117;
        this.optiontext();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hack_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_hack_options;
    return this;
}

Hack_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hack_optionsContext.prototype.constructor = Hack_optionsContext;


 
Hack_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function HackidContext(parser, ctx) {
	Hack_optionsContext.call(this, parser);
    Hack_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HackidContext.prototype = Object.create(Hack_optionsContext.prototype);
HackidContext.prototype.constructor = HackidContext;

SaltParser.HackidContext = HackidContext;

HackidContext.prototype.co = function() {
    return this.getTypedRuleContext(CoContext,0);
};

HackidContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

HackidContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};
HackidContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterHackid(this);
	}
};

HackidContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitHackid(this);
	}
};

HackidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitHackid(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HacknumContext(parser, ctx) {
	Hack_optionsContext.call(this, parser);
    Hack_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HacknumContext.prototype = Object.create(Hack_optionsContext.prototype);
HacknumContext.prototype.constructor = HacknumContext;

SaltParser.HacknumContext = HacknumContext;

HacknumContext.prototype.co = function() {
    return this.getTypedRuleContext(CoContext,0);
};

HacknumContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};
HacknumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterHacknum(this);
	}
};

HacknumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitHacknum(this);
	}
};

HacknumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitHacknum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HackflagContext(parser, ctx) {
	Hack_optionsContext.call(this, parser);
    Hack_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HackflagContext.prototype = Object.create(Hack_optionsContext.prototype);
HackflagContext.prototype.constructor = HackflagContext;

SaltParser.HackflagContext = HackflagContext;

HackflagContext.prototype.hackacw_option = function() {
    return this.getTypedRuleContext(Hackacw_optionContext,0);
};
HackflagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterHackflag(this);
	}
};

HackflagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitHackflag(this);
	}
};

HackflagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitHackflag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function HackmaxblockContext(parser, ctx) {
	Hack_optionsContext.call(this, parser);
    Hack_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

HackmaxblockContext.prototype = Object.create(Hack_optionsContext.prototype);
HackmaxblockContext.prototype.constructor = HackmaxblockContext;

SaltParser.HackmaxblockContext = HackmaxblockContext;

HackmaxblockContext.prototype.maxblocksize = function() {
    return this.getTypedRuleContext(MaxblocksizeContext,0);
};
HackmaxblockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterHackmaxblock(this);
	}
};

HackmaxblockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitHackmaxblock(this);
	}
};

HackmaxblockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitHackmaxblock(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Hack_optionsContext = Hack_optionsContext;

SaltParser.prototype.hack_options = function() {

    var localctx = new Hack_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SaltParser.RULE_hack_options);
    var _la = 0; // Token type
    try {
        this.state = 1165;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__98:
        case SaltParser.T__99:
        case SaltParser.T__100:
        case SaltParser.T__101:
        case SaltParser.T__102:
        case SaltParser.T__103:
        case SaltParser.T__104:
        case SaltParser.T__105:
        case SaltParser.T__106:
        case SaltParser.T__107:
        case SaltParser.T__108:
        case SaltParser.T__109:
        case SaltParser.T__110:
        case SaltParser.T__111:
        case SaltParser.T__112:
        case SaltParser.T__113:
        case SaltParser.T__114:
        case SaltParser.T__115:
        case SaltParser.T__116:
        case SaltParser.T__117:
        case SaltParser.T__118:
        case SaltParser.T__119:
        case SaltParser.T__120:
        case SaltParser.T__121:
        case SaltParser.T__122:
        case SaltParser.T__123:
        case SaltParser.T__124:
        case SaltParser.T__125:
            localctx = new HackflagContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1150;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SaltParser.T__98:
                this.state = 1119;
                this.match(SaltParser.T__98);
                break;
            case SaltParser.T__99:
                this.state = 1120;
                this.match(SaltParser.T__99);
                break;
            case SaltParser.T__100:
                this.state = 1121;
                this.match(SaltParser.T__100);
                break;
            case SaltParser.T__101:
                this.state = 1122;
                this.match(SaltParser.T__101);
                break;
            case SaltParser.T__102:
                this.state = 1123;
                this.match(SaltParser.T__102);
                break;
            case SaltParser.T__103:
                this.state = 1124;
                this.match(SaltParser.T__103);
                break;
            case SaltParser.T__104:
                this.state = 1125;
                this.match(SaltParser.T__104);
                break;
            case SaltParser.T__105:
                this.state = 1126;
                this.match(SaltParser.T__105);
                break;
            case SaltParser.T__106:
                this.state = 1127;
                this.match(SaltParser.T__106);
                break;
            case SaltParser.T__107:
                this.state = 1128;
                this.match(SaltParser.T__107);
                break;
            case SaltParser.T__108:
                this.state = 1129;
                this.match(SaltParser.T__108);
                break;
            case SaltParser.T__109:
                this.state = 1130;
                this.match(SaltParser.T__109);
                break;
            case SaltParser.T__110:
                this.state = 1131;
                this.match(SaltParser.T__110);
                break;
            case SaltParser.T__111:
                this.state = 1132;
                this.match(SaltParser.T__111);
                break;
            case SaltParser.T__112:
                this.state = 1133;
                this.match(SaltParser.T__112);
                break;
            case SaltParser.T__113:
                this.state = 1134;
                this.match(SaltParser.T__113);
                break;
            case SaltParser.T__114:
                this.state = 1135;
                this.match(SaltParser.T__114);
                break;
            case SaltParser.T__115:
                this.state = 1136;
                this.match(SaltParser.T__115);
                break;
            case SaltParser.T__116:
                this.state = 1137;
                this.match(SaltParser.T__116);
                break;
            case SaltParser.T__117:
                this.state = 1138;
                this.match(SaltParser.T__117);
                break;
            case SaltParser.T__118:
                this.state = 1139;
                this.match(SaltParser.T__118);
                break;
            case SaltParser.T__119:
                this.state = 1140;
                this.match(SaltParser.T__119);
                break;
            case SaltParser.T__120:
                this.state = 1141;
                this.match(SaltParser.T__120);
                break;
            case SaltParser.T__121:
                this.state = 1142;
                this.match(SaltParser.T__121);
                break;
            case SaltParser.T__122:
                this.state = 1143;
                this.match(SaltParser.T__122);
                break;
            case SaltParser.T__123:
                this.state = 1144;
                this.match(SaltParser.T__123);
                break;
            case SaltParser.T__124:
                this.state = 1145;
                this.match(SaltParser.T__124);
                break;
            case SaltParser.T__125:
                this.state = 1146;
                this.match(SaltParser.T__125);
                this.state = 1148;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
                if(la_===1) {
                    this.state = 1147;
                    this.hackacw_option();

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case SaltParser.T__126:
        case SaltParser.T__127:
        case SaltParser.T__128:
        case SaltParser.T__129:
        case SaltParser.T__130:
            localctx = new HacknumContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1152;
            _la = this._input.LA(1);
            if(!(((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (SaltParser.T__126 - 127)) | (1 << (SaltParser.T__127 - 127)) | (1 << (SaltParser.T__128 - 127)) | (1 << (SaltParser.T__129 - 127)) | (1 << (SaltParser.T__130 - 127)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1153;
            this.co();
            this.state = 1154;
            this.match(SaltParser.INT);
            break;
        case SaltParser.T__318:
            localctx = new HackmaxblockContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1156;
            this.maxblocksize();
            break;
        case SaltParser.T__131:
        case SaltParser.T__132:
            localctx = new HackidContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1157;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__131 || _la===SaltParser.T__132)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1158;
            this.co();
            this.state = 1159;
            this.match(SaltParser.ID);
            break;
        case SaltParser.T__133:
        case SaltParser.T__134:
        case SaltParser.T__135:
        case SaltParser.T__136:
            localctx = new HackidContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1161;
            _la = this._input.LA(1);
            if(!(((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (SaltParser.T__133 - 134)) | (1 << (SaltParser.T__134 - 134)) | (1 << (SaltParser.T__135 - 134)) | (1 << (SaltParser.T__136 - 134)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1162;
            this.co();
            this.state = 1163;
            this.periodic_ids();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Hackacw_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_hackacw_option;
    return this;
}

Hackacw_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Hackacw_optionContext.prototype.constructor = Hackacw_optionContext;

Hackacw_optionContext.prototype.co = function() {
    return this.getTypedRuleContext(CoContext,0);
};

Hackacw_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterHackacw_option(this);
	}
};

Hackacw_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitHackacw_option(this);
	}
};

Hackacw_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitHackacw_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Hackacw_optionContext = Hackacw_optionContext;

SaltParser.prototype.hackacw_option = function() {

    var localctx = new Hackacw_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SaltParser.RULE_hackacw_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1167;
        this.co();
        this.state = 1168;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__137 || _la===SaltParser.T__138)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cluster_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_cluster_option;
    return this;
}

Cluster_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cluster_optionContext.prototype.constructor = Cluster_optionContext;

Cluster_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Cluster_optionContext.prototype.cluster_basis_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cluster_basis_itemContext);
    } else {
        return this.getTypedRuleContext(Cluster_basis_itemContext,i);
    }
};

Cluster_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Cluster_optionContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

Cluster_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCluster_option(this);
	}
};

Cluster_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCluster_option(this);
	}
};

Cluster_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCluster_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Cluster_optionContext = Cluster_optionContext;

SaltParser.prototype.cluster_option = function() {

    var localctx = new Cluster_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SaltParser.RULE_cluster_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1170;
        this.match(SaltParser.T__139);
        this.state = 1171;
        this.lp();
        this.state = 1172;
        this.cluster_basis_item();
        this.state = 1178;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1173;
                this.co();
                this.state = 1174;
                this.cluster_basis_item(); 
            }
            this.state = 1180;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
        }

        this.state = 1181;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cluster_basis_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_cluster_basis_item;
    return this;
}

Cluster_basis_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cluster_basis_itemContext.prototype.constructor = Cluster_basis_itemContext;

Cluster_basis_itemContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


Cluster_basis_itemContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Cluster_basis_itemContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Cluster_basis_itemContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Cluster_basis_itemContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Cluster_basis_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCluster_basis_item(this);
	}
};

Cluster_basis_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCluster_basis_item(this);
	}
};

Cluster_basis_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCluster_basis_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Cluster_basis_itemContext = Cluster_basis_itemContext;

SaltParser.prototype.cluster_basis_item = function() {

    var localctx = new Cluster_basis_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SaltParser.RULE_cluster_basis_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1183;
        this.match(SaltParser.ID);
        this.state = 1184;
        this.lp();
        this.state = 1185;
        this.match(SaltParser.INT);
        this.state = 1186;
        this.comma();
        this.state = 1187;
        this.match(SaltParser.ID);
        this.state = 1188;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ignorelp_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_ignorelp_option;
    return this;
}

Ignorelp_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ignorelp_optionContext.prototype.constructor = Ignorelp_optionContext;

Ignorelp_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Ignorelp_optionContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};

Ignorelp_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Ignorelp_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIgnorelp_option(this);
	}
};

Ignorelp_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIgnorelp_option(this);
	}
};

Ignorelp_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIgnorelp_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Ignorelp_optionContext = Ignorelp_optionContext;

SaltParser.prototype.ignorelp_option = function() {

    var localctx = new Ignorelp_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SaltParser.RULE_ignorelp_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1190;
        this.match(SaltParser.T__140);
        this.state = 1191;
        this.lp();
        this.state = 1192;
        this.id_comma_list();
        this.state = 1193;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function External_file_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_external_file_options;
    return this;
}

External_file_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
External_file_optionsContext.prototype.constructor = External_file_optionsContext;


 
External_file_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EfflagflagContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfflagflagContext.prototype = Object.create(External_file_optionsContext.prototype);
EfflagflagContext.prototype.constructor = EfflagflagContext;

SaltParser.EfflagflagContext = EfflagflagContext;

EfflagflagContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

EfflagflagContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
EfflagflagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfflagflag(this);
	}
};

EfflagflagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfflagflag(this);
	}
};

EfflagflagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfflagflag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfmultiContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfmultiContext.prototype = Object.create(External_file_optionsContext.prototype);
EfmultiContext.prototype.constructor = EfmultiContext;

SaltParser.EfmultiContext = EfmultiContext;

EfmultiContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

EfmultiContext.prototype.ef_multi_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ef_multi_optionContext);
    } else {
        return this.getTypedRuleContext(Ef_multi_optionContext,i);
    }
};

EfmultiContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

EfmultiContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};
EfmultiContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfmulti(this);
	}
};

EfmultiContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfmulti(this);
	}
};

EfmultiContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfmulti(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfpriorityContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfpriorityContext.prototype = Object.create(External_file_optionsContext.prototype);
EfpriorityContext.prototype.constructor = EfpriorityContext;

SaltParser.EfpriorityContext = EfpriorityContext;

EfpriorityContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

EfpriorityContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

EfpriorityContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
EfpriorityContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfpriority(this);
	}
};

EfpriorityContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfpriority(this);
	}
};

EfpriorityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfpriority(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfsearchContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfsearchContext.prototype = Object.create(External_file_optionsContext.prototype);
EfsearchContext.prototype.constructor = EfsearchContext;

SaltParser.EfsearchContext = EfsearchContext;

EfsearchContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

EfsearchContext.prototype.id_spec_list = function() {
    return this.getTypedRuleContext(Id_spec_listContext,0);
};

EfsearchContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
EfsearchContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfsearch(this);
	}
};

EfsearchContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfsearch(this);
	}
};

EfsearchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfsearch(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfignorelpContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfignorelpContext.prototype = Object.create(External_file_optionsContext.prototype);
EfignorelpContext.prototype.constructor = EfignorelpContext;

SaltParser.EfignorelpContext = EfignorelpContext;

EfignorelpContext.prototype.ignorelp_option = function() {
    return this.getTypedRuleContext(Ignorelp_optionContext,0);
};
EfignorelpContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfignorelp(this);
	}
};

EfignorelpContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfignorelp(this);
	}
};

EfignorelpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfignorelp(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfpermitContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfpermitContext.prototype = Object.create(External_file_optionsContext.prototype);
EfpermitContext.prototype.constructor = EfpermitContext;

SaltParser.EfpermitContext = EfpermitContext;

EfpermitContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

EfpermitContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

EfpermitContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

EfpermitContext.prototype.pip_string = function() {
    return this.getTypedRuleContext(Pip_stringContext,0);
};
EfpermitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfpermit(this);
	}
};

EfpermitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfpermit(this);
	}
};

EfpermitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfpermit(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfnumContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfnumContext.prototype = Object.create(External_file_optionsContext.prototype);
EfnumContext.prototype.constructor = EfnumContext;

SaltParser.EfnumContext = EfnumContext;

EfnumContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};
EfnumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfnum(this);
	}
};

EfnumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfnum(this);
	}
};

EfnumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfnum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfflagContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfflagContext.prototype = Object.create(External_file_optionsContext.prototype);
EfflagContext.prototype.constructor = EfflagContext;

SaltParser.EfflagContext = EfflagContext;

EfflagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfflag(this);
	}
};

EfflagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfflag(this);
	}
};

EfflagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfflag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfskipContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfskipContext.prototype = Object.create(External_file_optionsContext.prototype);
EfskipContext.prototype.constructor = EfskipContext;

SaltParser.EfskipContext = EfskipContext;

EfskipContext.prototype.named_option = function() {
    return this.getTypedRuleContext(Named_optionContext,0);
};
EfskipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfskip(this);
	}
};

EfskipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfskip(this);
	}
};

EfskipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfskip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfchildContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfchildContext.prototype = Object.create(External_file_optionsContext.prototype);
EfchildContext.prototype.constructor = EfchildContext;

SaltParser.EfchildContext = EfchildContext;

EfchildContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

EfchildContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

EfchildContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

EfchildContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

EfchildContext.prototype.id_list = function() {
    return this.getTypedRuleContext(Id_listContext,0);
};

EfchildContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
EfchildContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfchild(this);
	}
};

EfchildContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfchild(this);
	}
};

EfchildContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfchild(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfignoreContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfignoreContext.prototype = Object.create(External_file_optionsContext.prototype);
EfignoreContext.prototype.constructor = EfignoreContext;

SaltParser.EfignoreContext = EfignoreContext;

EfignoreContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

EfignoreContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};

EfignoreContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
EfignoreContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfignore(this);
	}
};

EfignoreContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfignore(this);
	}
};

EfignoreContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfignore(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EfmappingContext(parser, ctx) {
	External_file_optionsContext.call(this, parser);
    External_file_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EfmappingContext.prototype = Object.create(External_file_optionsContext.prototype);
EfmappingContext.prototype.constructor = EfmappingContext;

SaltParser.EfmappingContext = EfmappingContext;

EfmappingContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

EfmappingContext.prototype.mapping_guts = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mapping_gutsContext);
    } else {
        return this.getTypedRuleContext(Mapping_gutsContext,i);
    }
};

EfmappingContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

EfmappingContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};
EfmappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfmapping(this);
	}
};

EfmappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfmapping(this);
	}
};

EfmappingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfmapping(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.External_file_optionsContext = External_file_optionsContext;

SaltParser.prototype.external_file_options = function() {

    var localctx = new External_file_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SaltParser.RULE_external_file_options);
    var _la = 0; // Token type
    try {
        this.state = 1269;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__213:
            localctx = new EfskipContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1195;
            this.named_option();
            break;
        case SaltParser.T__141:
        case SaltParser.T__142:
            localctx = new EfflagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1196;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__141 || _la===SaltParser.T__142)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SaltParser.T__143:
            localctx = new EfsearchContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1197;
            this.match(SaltParser.T__143);
            this.state = 1202;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
            if(la_===1) {
                this.state = 1198;
                this.lp();
                this.state = 1199;
                this.id_spec_list();
                this.state = 1200;
                this.rp();

            }
            break;
        case SaltParser.T__144:
            localctx = new EfignoreContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1204;
            this.match(SaltParser.T__144);
            this.state = 1205;
            this.lp();
            this.state = 1206;
            this.id_comma_list();
            this.state = 1207;
            this.rp();
            break;
        case SaltParser.T__145:
            localctx = new EfpriorityContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1209;
            this.match(SaltParser.T__145);
            this.state = 1210;
            this.lp();
            this.state = 1212;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__97) {
                this.state = 1211;
                this.match(SaltParser.T__97);
            }

            this.state = 1214;
            this.match(SaltParser.ID);
            this.state = 1215;
            this.rp();
            break;
        case SaltParser.T__17:
        case SaltParser.T__146:
            localctx = new EfnumContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1217;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__17 || _la===SaltParser.T__146)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1218;
            this.num_param();
            break;
        case SaltParser.T__140:
            localctx = new EfignorelpContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1219;
            this.ignorelp_option();
            break;
        case SaltParser.T__147:
            localctx = new EfflagflagContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1220;
            this.match(SaltParser.T__147);
            this.state = 1221;
            this.lp();
            this.state = 1222;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__40 || _la===SaltParser.T__41 || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (SaltParser.T__148 - 149)) | (1 << (SaltParser.T__149 - 149)) | (1 << (SaltParser.T__150 - 149)) | (1 << (SaltParser.T__151 - 149)) | (1 << (SaltParser.T__152 - 149)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1223;
            this.rp();
            break;
        case SaltParser.T__153:
            localctx = new EfpermitContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1225;
            this.match(SaltParser.T__153);
            this.state = 1226;
            this.lp();
            this.state = 1229;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SaltParser.ID:
                this.state = 1227;
                this.match(SaltParser.ID);
                break;
            case SaltParser.T__311:
                this.state = 1228;
                this.pip_string();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1231;
            this.rp();
            break;
        case SaltParser.T__154:
            localctx = new EfchildContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1233;
            this.match(SaltParser.T__154);
            this.state = 1234;
            this.lp();
            this.state = 1235;
            this.match(SaltParser.ID);
            this.state = 1236;
            this.comma();
            this.state = 1237;
            this.periodic_ids();
            this.state = 1238;
            this.comma();
            this.state = 1239;
            this.id_list();
            this.state = 1240;
            this.comma();
            this.state = 1241;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__90 || _la===SaltParser.T__155 || _la===SaltParser.T__156)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1242;
            this.rp();
            break;
        case SaltParser.T__157:
            localctx = new EfmappingContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1244;
            this.match(SaltParser.T__157);
            this.state = 1245;
            this.lp();
            this.state = 1246;
            this.mapping_guts();
            this.state = 1252;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1247;
                    this.comma();
                    this.state = 1248;
                    this.mapping_guts(); 
                }
                this.state = 1254;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
            }

            this.state = 1255;
            this.rp();
            break;
        case SaltParser.T__158:
            localctx = new EfmultiContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1257;
            this.match(SaltParser.T__158);
            this.state = 1267;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
            if(la_===1) {
                this.state = 1258;
                this.lp();
                this.state = 1259;
                this.ef_multi_option();
                this.state = 1263;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
                if(la_===1) {
                    this.state = 1260;
                    this.comma();
                    this.state = 1261;
                    this.ef_multi_option();

                }
                this.state = 1265;
                this.rp();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ef_like_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_ef_like_option;
    return this;
}

Ef_like_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ef_like_optionContext.prototype.constructor = Ef_like_optionContext;

Ef_like_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Ef_like_optionContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Ef_like_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Ef_like_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEf_like_option(this);
	}
};

Ef_like_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEf_like_option(this);
	}
};

Ef_like_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEf_like_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Ef_like_optionContext = Ef_like_optionContext;

SaltParser.prototype.ef_like_option = function() {

    var localctx = new Ef_like_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SaltParser.RULE_ef_like_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1271;
        this.match(SaltParser.T__159);
        this.state = 1272;
        this.lp();
        this.state = 1273;
        this.match(SaltParser.ID);
        this.state = 1274;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ef_searchon_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_ef_searchon_option;
    return this;
}

Ef_searchon_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ef_searchon_optionContext.prototype.constructor = Ef_searchon_optionContext;

Ef_searchon_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Ef_searchon_optionContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};

Ef_searchon_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Ef_searchon_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEf_searchon_option(this);
	}
};

Ef_searchon_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEf_searchon_option(this);
	}
};

Ef_searchon_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEf_searchon_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Ef_searchon_optionContext = Ef_searchon_optionContext;

SaltParser.prototype.ef_searchon_option = function() {

    var localctx = new Ef_searchon_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SaltParser.RULE_ef_searchon_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1276;
        this.match(SaltParser.T__160);
        this.state = 1277;
        this.lp();
        this.state = 1278;
        this.id_comma_list();
        this.state = 1279;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ef_multi_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_ef_multi_option;
    return this;
}

Ef_multi_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ef_multi_optionContext.prototype.constructor = Ef_multi_optionContext;

Ef_multi_optionContext.prototype.ef_like_option = function() {
    return this.getTypedRuleContext(Ef_like_optionContext,0);
};

Ef_multi_optionContext.prototype.ef_searchon_option = function() {
    return this.getTypedRuleContext(Ef_searchon_optionContext,0);
};

Ef_multi_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEf_multi_option(this);
	}
};

Ef_multi_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEf_multi_option(this);
	}
};

Ef_multi_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEf_multi_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Ef_multi_optionContext = Ef_multi_optionContext;

SaltParser.prototype.ef_multi_option = function() {

    var localctx = new Ef_multi_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SaltParser.RULE_ef_multi_option);
    try {
        this.state = 1283;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__159:
            this.enterOuterAlt(localctx, 1);
            this.state = 1281;
            this.ef_like_option();
            break;
        case SaltParser.T__160:
            this.enterOuterAlt(localctx, 2);
            this.state = 1282;
            this.ef_searchon_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mapping_gutsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_mapping_guts;
    return this;
}

Mapping_gutsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mapping_gutsContext.prototype.constructor = Mapping_gutsContext;

Mapping_gutsContext.prototype.periodic_ids = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Periodic_idsContext);
    } else {
        return this.getTypedRuleContext(Periodic_idsContext,i);
    }
};

Mapping_gutsContext.prototype.eq = function() {
    return this.getTypedRuleContext(EqContext,0);
};

Mapping_gutsContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


Mapping_gutsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterMapping_guts(this);
	}
};

Mapping_gutsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitMapping_guts(this);
	}
};

Mapping_gutsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitMapping_guts(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Mapping_gutsContext = Mapping_gutsContext;

SaltParser.prototype.mapping_guts = function() {

    var localctx = new Mapping_gutsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SaltParser.RULE_mapping_guts);
    try {
        this.state = 1300;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1285;
            this.periodic_ids();
            this.state = 1286;
            this.match(SaltParser.T__161);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1288;
            this.periodic_ids();
            this.state = 1289;
            this.eq();
            this.state = 1290;
            this.periodic_ids();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1292;
            this.match(SaltParser.ID);
            this.state = 1293;
            this.match(SaltParser.T__162);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1294;
            this.match(SaltParser.ID);
            this.state = 1295;
            this.match(SaltParser.T__163);
            this.state = 1296;
            this.match(SaltParser.ID);
            this.state = 1297;
            this.eq();
            this.state = 1298;
            this.periodic_ids();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_eq;
    return this;
}

EqContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqContext.prototype.constructor = EqContext;

EqContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


EqContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEq(this);
	}
};

EqContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEq(this);
	}
};

EqContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEq(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.EqContext = EqContext;

SaltParser.prototype.eq = function() {

    var localctx = new EqContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SaltParser.RULE_eq);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 1302;
            this.match(SaltParser.WS);
        }

        this.state = 1305;
        this.match(SaltParser.T__164);
        this.state = 1307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 1306;
            this.match(SaltParser.WS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ingestfile_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_ingestfile_options;
    return this;
}

Ingestfile_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ingestfile_optionsContext.prototype.constructor = Ingestfile_optionsContext;


 
Ingestfile_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IngflagContext(parser, ctx) {
	Ingestfile_optionsContext.call(this, parser);
    Ingestfile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngflagContext.prototype = Object.create(Ingestfile_optionsContext.prototype);
IngflagContext.prototype.constructor = IngflagContext;

SaltParser.IngflagContext = IngflagContext;

IngflagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngflag(this);
	}
};

IngflagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngflag(this);
	}
};

IngflagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngflag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IngskipContext(parser, ctx) {
	Ingestfile_optionsContext.call(this, parser);
    Ingestfile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngskipContext.prototype = Object.create(Ingestfile_optionsContext.prototype);
IngskipContext.prototype.constructor = IngskipContext;

SaltParser.IngskipContext = IngskipContext;

IngskipContext.prototype.named_option = function() {
    return this.getTypedRuleContext(Named_optionContext,0);
};

IngskipContext.prototype.csv_options = function() {
    return this.getTypedRuleContext(Csv_optionsContext,0);
};
IngskipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngskip(this);
	}
};

IngskipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngskip(this);
	}
};

IngskipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngskip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IngidContext(parser, ctx) {
	Ingestfile_optionsContext.call(this, parser);
    Ingestfile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngidContext.prototype = Object.create(Ingestfile_optionsContext.prototype);
IngidContext.prototype.constructor = IngidContext;

SaltParser.IngidContext = IngidContext;

IngidContext.prototype.periodic_ids_param = function() {
    return this.getTypedRuleContext(Periodic_ids_paramContext,0);
};
IngidContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngid(this);
	}
};

IngidContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngid(this);
	}
};

IngidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngid(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IngfixedContext(parser, ctx) {
	Ingestfile_optionsContext.call(this, parser);
    Ingestfile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngfixedContext.prototype = Object.create(Ingestfile_optionsContext.prototype);
IngfixedContext.prototype.constructor = IngfixedContext;

SaltParser.IngfixedContext = IngfixedContext;

IngfixedContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};
IngfixedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngfixed(this);
	}
};

IngfixedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngfixed(this);
	}
};

IngfixedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngfixed(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IngsprayContext(parser, ctx) {
	Ingestfile_optionsContext.call(this, parser);
    Ingestfile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngsprayContext.prototype = Object.create(Ingestfile_optionsContext.prototype);
IngsprayContext.prototype.constructor = IngsprayContext;

SaltParser.IngsprayContext = IngsprayContext;

IngsprayContext.prototype.stuff_in_brackets = function() {
    return this.getTypedRuleContext(Stuff_in_bracketsContext,0);
};
IngsprayContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngspray(this);
	}
};

IngsprayContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngspray(this);
	}
};

IngsprayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngspray(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IngcsvContext(parser, ctx) {
	Ingestfile_optionsContext.call(this, parser);
    Ingestfile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IngcsvContext.prototype = Object.create(Ingestfile_optionsContext.prototype);
IngcsvContext.prototype.constructor = IngcsvContext;

SaltParser.IngcsvContext = IngcsvContext;

IngcsvContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

IngcsvContext.prototype.csv_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Csv_optionsContext);
    } else {
        return this.getTypedRuleContext(Csv_optionsContext,i);
    }
};

IngcsvContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

IngcsvContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};
IngcsvContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIngcsv(this);
	}
};

IngcsvContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIngcsv(this);
	}
};

IngcsvContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIngcsv(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Ingestfile_optionsContext = Ingestfile_optionsContext;

SaltParser.prototype.ingestfile_options = function() {

    var localctx = new Ingestfile_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SaltParser.RULE_ingestfile_options);
    try {
        this.state = 1333;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__213:
            localctx = new IngskipContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1309;
            this.named_option();
            break;
        case SaltParser.T__165:
            localctx = new IngflagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1310;
            this.match(SaltParser.T__165);
            break;
        case SaltParser.T__166:
            localctx = new IngsprayContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1311;
            this.match(SaltParser.T__166);
            this.state = 1312;
            this.stuff_in_brackets();
            break;
        case SaltParser.T__167:
            localctx = new IngidContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1313;
            this.match(SaltParser.T__167);
            this.state = 1314;
            this.periodic_ids_param();
            break;
        case SaltParser.T__168:
            localctx = new IngfixedContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1315;
            this.match(SaltParser.T__168);
            this.state = 1316;
            this.num_param();
            break;
        case SaltParser.T__169:
            localctx = new IngcsvContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1317;
            this.match(SaltParser.T__169);
            this.state = 1330;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
            if(la_===1) {
                this.state = 1318;
                this.lp();
                this.state = 1319;
                this.csv_options();
                this.state = 1325;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1320;
                        this.comma();
                        this.state = 1321;
                        this.csv_options(); 
                    }
                    this.state = 1327;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
                }

                this.state = 1328;
                this.rp();

            }
            break;
        case SaltParser.T__170:
        case SaltParser.T__171:
        case SaltParser.T__172:
            localctx = new IngskipContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1332;
            this.csv_options();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Csv_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_csv_options;
    return this;
}

Csv_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Csv_optionsContext.prototype.constructor = Csv_optionsContext;

Csv_optionsContext.prototype.stuff_in_brackets = function() {
    return this.getTypedRuleContext(Stuff_in_bracketsContext,0);
};

Csv_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCsv_options(this);
	}
};

Csv_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCsv_options(this);
	}
};

Csv_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCsv_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Csv_optionsContext = Csv_optionsContext;

SaltParser.prototype.csv_options = function() {

    var localctx = new Csv_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SaltParser.RULE_csv_options);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1335;
        _la = this._input.LA(1);
        if(!(((((_la - 171)) & ~0x1f) == 0 && ((1 << (_la - 171)) & ((1 << (SaltParser.T__170 - 171)) | (1 << (SaltParser.T__171 - 171)) | (1 << (SaltParser.T__172 - 171)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1336;
        this.stuff_in_brackets();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attributefile_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_attributefile_options;
    return this;
}

Attributefile_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attributefile_optionsContext.prototype.constructor = Attributefile_optionsContext;


 
Attributefile_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AtnumparamContext(parser, ctx) {
	Attributefile_optionsContext.call(this, parser);
    Attributefile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtnumparamContext.prototype = Object.create(Attributefile_optionsContext.prototype);
AtnumparamContext.prototype.constructor = AtnumparamContext;

SaltParser.AtnumparamContext = AtnumparamContext;

AtnumparamContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};
AtnumparamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAtnumparam(this);
	}
};

AtnumparamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAtnumparam(this);
	}
};

AtnumparamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAtnumparam(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtsearchContext(parser, ctx) {
	Attributefile_optionsContext.call(this, parser);
    Attributefile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtsearchContext.prototype = Object.create(Attributefile_optionsContext.prototype);
AtsearchContext.prototype.constructor = AtsearchContext;

SaltParser.AtsearchContext = AtsearchContext;

AtsearchContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

AtsearchContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};

AtsearchContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
AtsearchContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAtsearch(this);
	}
};

AtsearchContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAtsearch(this);
	}
};

AtsearchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAtsearch(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtflagflagContext(parser, ctx) {
	Attributefile_optionsContext.call(this, parser);
    Attributefile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtflagflagContext.prototype = Object.create(Attributefile_optionsContext.prototype);
AtflagflagContext.prototype.constructor = AtflagflagContext;

SaltParser.AtflagflagContext = AtflagflagContext;

AtflagflagContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

AtflagflagContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
AtflagflagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAtflagflag(this);
	}
};

AtflagflagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAtflagflag(this);
	}
};

AtflagflagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAtflagflag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtskipContext(parser, ctx) {
	Attributefile_optionsContext.call(this, parser);
    Attributefile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtskipContext.prototype = Object.create(Attributefile_optionsContext.prototype);
AtskipContext.prototype.constructor = AtskipContext;

SaltParser.AtskipContext = AtskipContext;

AtskipContext.prototype.named_option = function() {
    return this.getTypedRuleContext(Named_optionContext,0);
};

AtskipContext.prototype.weight_option = function() {
    return this.getTypedRuleContext(Weight_optionContext,0);
};

AtskipContext.prototype.supports_option = function() {
    return this.getTypedRuleContext(Supports_optionContext,0);
};

AtskipContext.prototype.force_option = function() {
    return this.getTypedRuleContext(Force_optionContext,0);
};
AtskipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAtskip(this);
	}
};

AtskipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAtskip(this);
	}
};

AtskipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAtskip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtidparamContext(parser, ctx) {
	Attributefile_optionsContext.call(this, parser);
    Attributefile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtidparamContext.prototype = Object.create(Attributefile_optionsContext.prototype);
AtidparamContext.prototype.constructor = AtidparamContext;

SaltParser.AtidparamContext = AtidparamContext;

AtidparamContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};
AtidparamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAtidparam(this);
	}
};

AtidparamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAtidparam(this);
	}
};

AtidparamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAtidparam(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtvaluesContext(parser, ctx) {
	Attributefile_optionsContext.call(this, parser);
    Attributefile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtvaluesContext.prototype = Object.create(Attributefile_optionsContext.prototype);
AtvaluesContext.prototype.constructor = AtvaluesContext;

SaltParser.AtvaluesContext = AtvaluesContext;

AtvaluesContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

AtvaluesContext.prototype.attr_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Attr_elementContext);
    } else {
        return this.getTypedRuleContext(Attr_elementContext,i);
    }
};

AtvaluesContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

AtvaluesContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

AtvaluesContext.prototype.list_flag = function() {
    return this.getTypedRuleContext(List_flagContext,0);
};
AtvaluesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAtvalues(this);
	}
};

AtvaluesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAtvalues(this);
	}
};

AtvaluesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAtvalues(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtdatesContext(parser, ctx) {
	Attributefile_optionsContext.call(this, parser);
    Attributefile_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtdatesContext.prototype = Object.create(Attributefile_optionsContext.prototype);
AtdatesContext.prototype.constructor = AtdatesContext;

SaltParser.AtdatesContext = AtdatesContext;

AtdatesContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

AtdatesContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


AtdatesContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

AtdatesContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
AtdatesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAtdates(this);
	}
};

AtdatesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAtdates(this);
	}
};

AtdatesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAtdates(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Attributefile_optionsContext = Attributefile_optionsContext;

SaltParser.prototype.attributefile_options = function() {

    var localctx = new Attributefile_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SaltParser.RULE_attributefile_options);
    try {
        this.state = 1379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AtskipContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1338;
            this.named_option();
            break;

        case 2:
            localctx = new AtvaluesContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1339;
            this.match(SaltParser.T__173);
            this.state = 1340;
            this.lp();
            this.state = 1341;
            this.attr_element();
            this.state = 1347;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1342;
                    this.co();
                    this.state = 1343;
                    this.attr_element(); 
                }
                this.state = 1349;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
            }

            this.state = 1351;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
            if(la_===1) {
                this.state = 1350;
                this.list_flag();

            }
            this.state = 1353;
            this.rp();
            break;

        case 3:
            localctx = new AtidparamContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1355;
            this.match(SaltParser.T__12);
            this.state = 1356;
            this.id_param();
            break;

        case 4:
            localctx = new AtnumparamContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1357;
            this.match(SaltParser.T__174);
            this.state = 1358;
            this.num_param();
            break;

        case 5:
            localctx = new AtflagflagContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1359;
            this.match(SaltParser.T__174);
            this.state = 1360;
            this.lp();
            this.state = 1361;
            this.match(SaltParser.T__175);
            this.state = 1362;
            this.rp();
            break;

        case 6:
            localctx = new AtskipContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1364;
            this.weight_option();
            break;

        case 7:
            localctx = new AtskipContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1365;
            this.supports_option();
            break;

        case 8:
            localctx = new AtsearchContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1366;
            this.match(SaltParser.T__143);
            this.state = 1367;
            this.lp();
            this.state = 1368;
            this.id_comma_list();
            this.state = 1369;
            this.rp();
            break;

        case 9:
            localctx = new AtskipContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1371;
            this.force_option();
            break;

        case 10:
            localctx = new AtdatesContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1372;
            this.match(SaltParser.T__29);
            this.state = 1373;
            this.lp();
            this.state = 1374;
            this.match(SaltParser.ID);
            this.state = 1375;
            this.comma();
            this.state = 1376;
            this.match(SaltParser.ID);
            this.state = 1377;
            this.rp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attr_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_attr_element;
    return this;
}

Attr_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attr_elementContext.prototype.constructor = Attr_elementContext;

Attr_elementContext.prototype.periodic_ids = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Periodic_idsContext);
    } else {
        return this.getTypedRuleContext(Periodic_idsContext,i);
    }
};

Attr_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAttr_element(this);
	}
};

Attr_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAttr_element(this);
	}
};

Attr_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAttr_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Attr_elementContext = Attr_elementContext;

SaltParser.prototype.attr_element = function() {

    var localctx = new Attr_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SaltParser.RULE_attr_element);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1381;
        this.periodic_ids();
        this.state = 1386;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SaltParser.T__176) {
            this.state = 1382;
            this.match(SaltParser.T__176);
            this.state = 1383;
            this.periodic_ids();
            this.state = 1388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function List_flagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_list_flag;
    return this;
}

List_flagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_flagContext.prototype.constructor = List_flagContext;

List_flagContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

List_flagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterList_flag(this);
	}
};

List_flagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitList_flag(this);
	}
};

List_flagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitList_flag(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.List_flagContext = List_flagContext;

SaltParser.prototype.list_flag = function() {

    var localctx = new List_flagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SaltParser.RULE_list_flag);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1389;
        this.comma();
        this.state = 1390;
        this.match(SaltParser.T__177);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Efficacy_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_efficacy_options;
    return this;
}

Efficacy_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Efficacy_optionsContext.prototype.constructor = Efficacy_optionsContext;

Efficacy_optionsContext.prototype.named_option = function() {
    return this.getTypedRuleContext(Named_optionContext,0);
};

Efficacy_optionsContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};

Efficacy_optionsContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Efficacy_optionsContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

Efficacy_optionsContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Efficacy_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEfficacy_options(this);
	}
};

Efficacy_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEfficacy_options(this);
	}
};

Efficacy_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEfficacy_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Efficacy_optionsContext = Efficacy_optionsContext;

SaltParser.prototype.efficacy_options = function() {

    var localctx = new Efficacy_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SaltParser.RULE_efficacy_options);
    try {
        this.state = 1402;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__213:
            this.enterOuterAlt(localctx, 1);
            this.state = 1392;
            this.named_option();
            break;
        case SaltParser.T__17:
            this.enterOuterAlt(localctx, 2);
            this.state = 1393;
            this.match(SaltParser.T__17);
            this.state = 1394;
            this.num_param();
            break;
        case SaltParser.T__178:
            this.enterOuterAlt(localctx, 3);
            this.state = 1395;
            this.match(SaltParser.T__178);
            this.state = 1396;
            this.lp();
            this.state = 1397;
            this.real();
            this.state = 1398;
            this.rp();
            break;
        case SaltParser.T__179:
            this.enterOuterAlt(localctx, 4);
            this.state = 1400;
            this.match(SaltParser.T__179);
            break;
        case SaltParser.T__180:
            this.enterOuterAlt(localctx, 5);
            this.state = 1401;
            this.match(SaltParser.T__180);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Seeneff_datesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_seeneff_dates;
    return this;
}

Seeneff_datesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Seeneff_datesContext.prototype.constructor = Seeneff_datesContext;

Seeneff_datesContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Seeneff_datesContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


Seeneff_datesContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Seeneff_datesContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Seeneff_datesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSeeneff_dates(this);
	}
};

Seeneff_datesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSeeneff_dates(this);
	}
};

Seeneff_datesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSeeneff_dates(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Seeneff_datesContext = Seeneff_datesContext;

SaltParser.prototype.seeneff_dates = function() {

    var localctx = new Seeneff_datesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SaltParser.RULE_seeneff_dates);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1404;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__30 || _la===SaltParser.T__181 || _la===SaltParser.T__182)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1405;
        this.lp();
        this.state = 1406;
        this.match(SaltParser.ID);
        this.state = 1407;
        this.comma();
        this.state = 1408;
        this.match(SaltParser.ID);
        this.state = 1409;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Asof_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_asof_options;
    return this;
}

Asof_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Asof_optionsContext.prototype.constructor = Asof_optionsContext;

Asof_optionsContext.prototype.seeneff_dates = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Seeneff_datesContext);
    } else {
        return this.getTypedRuleContext(Seeneff_datesContext,i);
    }
};

Asof_optionsContext.prototype.co = function() {
    return this.getTypedRuleContext(CoContext,0);
};

Asof_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAsof_options(this);
	}
};

Asof_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAsof_options(this);
	}
};

Asof_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAsof_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Asof_optionsContext = Asof_optionsContext;

SaltParser.prototype.asof_options = function() {

    var localctx = new Asof_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SaltParser.RULE_asof_options);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1411;
        this.seeneff_dates();
        this.state = 1415;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
        if(la_===1) {
            this.state = 1412;
            this.co();
            this.state = 1413;
            this.seeneff_dates();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Record_type_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_record_type_options;
    return this;
}

Record_type_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Record_type_optionsContext.prototype.constructor = Record_type_optionsContext;


 
Record_type_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RtconditionContext(parser, ctx) {
	Record_type_optionsContext.call(this, parser);
    Record_type_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RtconditionContext.prototype = Object.create(Record_type_optionsContext.prototype);
RtconditionContext.prototype.constructor = RtconditionContext;

SaltParser.RtconditionContext = RtconditionContext;

RtconditionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RtconditionContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

RtconditionContext.prototype.condition_operator = function() {
    return this.getTypedRuleContext(Condition_operatorContext,0);
};

RtconditionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

RtconditionContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

RtconditionContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};

RtconditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRtcondition(this);
	}
};

RtconditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRtcondition(this);
	}
};

RtconditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRtcondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RttagContext(parser, ctx) {
	Record_type_optionsContext.call(this, parser);
    Record_type_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RttagContext.prototype = Object.create(Record_type_optionsContext.prototype);
RttagContext.prototype.constructor = RttagContext;

SaltParser.RttagContext = RttagContext;

RttagContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RttagContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

RttagContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

RttagContext.prototype.rttag_param = function() {
    return this.getTypedRuleContext(Rttag_paramContext,0);
};

RttagContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
RttagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRttag(this);
	}
};

RttagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRttag(this);
	}
};

RttagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRttag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RtflagContext(parser, ctx) {
	Record_type_optionsContext.call(this, parser);
    Record_type_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RtflagContext.prototype = Object.create(Record_type_optionsContext.prototype);
RtflagContext.prototype.constructor = RtflagContext;

SaltParser.RtflagContext = RtflagContext;

RtflagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRtflag(this);
	}
};

RtflagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRtflag(this);
	}
};

RtflagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRtflag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RtonfailContext(parser, ctx) {
	Record_type_optionsContext.call(this, parser);
    Record_type_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RtonfailContext.prototype = Object.create(Record_type_optionsContext.prototype);
RtonfailContext.prototype.constructor = RtonfailContext;

SaltParser.RtonfailContext = RtonfailContext;

RtonfailContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RtonfailContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
RtonfailContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRtonfail(this);
	}
};

RtonfailContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRtonfail(this);
	}
};

RtonfailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRtonfail(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RtvalidContext(parser, ctx) {
	Record_type_optionsContext.call(this, parser);
    Record_type_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RtvalidContext.prototype = Object.create(Record_type_optionsContext.prototype);
RtvalidContext.prototype.constructor = RtvalidContext;

SaltParser.RtvalidContext = RtvalidContext;

RtvalidContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RtvalidContext.prototype.valid_childref = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Valid_childrefContext);
    } else {
        return this.getTypedRuleContext(Valid_childrefContext,i);
    }
};

RtvalidContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

RtvalidContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};
RtvalidContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRtvalid(this);
	}
};

RtvalidContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRtvalid(this);
	}
};

RtvalidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRtvalid(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Record_type_optionsContext = Record_type_optionsContext;

SaltParser.prototype.record_type_options = function() {

    var localctx = new Record_type_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SaltParser.RULE_record_type_options);
    var _la = 0; // Token type
    try {
        this.state = 1463;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__183:
            localctx = new RttagContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1417;
            this.match(SaltParser.T__183);
            this.state = 1418;
            this.lp();
            this.state = 1419;
            this.match(SaltParser.ID);
            this.state = 1420;
            this.comma();
            this.state = 1421;
            this.rttag_param();
            this.state = 1422;
            this.rp();
            break;
        case SaltParser.T__184:
            localctx = new RtflagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1424;
            this.match(SaltParser.T__184);
            break;
        case SaltParser.T__185:
            localctx = new RtflagContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1425;
            this.match(SaltParser.T__185);
            break;
        case SaltParser.T__186:
            localctx = new RtconditionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1426;
            this.match(SaltParser.T__186);
            this.state = 1427;
            this.lp();
            this.state = 1428;
            this.param();
            this.state = 1433;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1429;
                this.comma();
                break;

            case 2:
                this.state = 1431;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SaltParser.WS) {
                    this.state = 1430;
                    this.match(SaltParser.WS);
                }

                break;

            }
            this.state = 1435;
            this.condition_operator();
            this.state = 1440;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1436;
                this.comma();
                break;

            case 2:
                this.state = 1438;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SaltParser.WS) {
                    this.state = 1437;
                    this.match(SaltParser.WS);
                }

                break;

            }
            this.state = 1442;
            this.param();
            this.state = 1443;
            this.rp();
            break;
        case SaltParser.T__187:
            localctx = new RtonfailContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1445;
            this.match(SaltParser.T__187);
            this.state = 1446;
            this.lp();
            this.state = 1447;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__144 || _la===SaltParser.T__188)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1448;
            this.rp();
            break;
        case SaltParser.T__189:
            localctx = new RtvalidContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1450;
            this.match(SaltParser.T__189);
            this.state = 1451;
            this.lp();
            this.state = 1452;
            this.valid_childref();
            this.state = 1458;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1453;
                    this.comma();
                    this.state = 1454;
                    this.valid_childref(); 
                }
                this.state = 1460;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
            }

            this.state = 1461;
            this.rp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Valid_childrefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_valid_childref;
    return this;
}

Valid_childrefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Valid_childrefContext.prototype.constructor = Valid_childrefContext;

Valid_childrefContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Valid_childrefContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterValid_childref(this);
	}
};

Valid_childrefContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitValid_childref(this);
	}
};

Valid_childrefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitValid_childref(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Valid_childrefContext = Valid_childrefContext;

SaltParser.prototype.valid_childref = function() {

    var localctx = new Valid_childrefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SaltParser.RULE_valid_childref);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.T__94) {
            this.state = 1465;
            this.match(SaltParser.T__94);
        }

        this.state = 1468;
        this.match(SaltParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Condition_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_condition_operator;
    return this;
}

Condition_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Condition_operatorContext.prototype.constructor = Condition_operatorContext;

Condition_operatorContext.prototype.lt_operator = function() {
    return this.getTypedRuleContext(Lt_operatorContext,0);
};

Condition_operatorContext.prototype.gt_operator = function() {
    return this.getTypedRuleContext(Gt_operatorContext,0);
};

Condition_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCondition_operator(this);
	}
};

Condition_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCondition_operator(this);
	}
};

Condition_operatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCondition_operator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Condition_operatorContext = Condition_operatorContext;

SaltParser.prototype.condition_operator = function() {

    var localctx = new Condition_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SaltParser.RULE_condition_operator);
    try {
        this.state = 1476;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__164:
            this.enterOuterAlt(localctx, 1);
            this.state = 1470;
            this.match(SaltParser.T__164);
            break;
        case SaltParser.T__190:
            this.enterOuterAlt(localctx, 2);
            this.state = 1471;
            this.match(SaltParser.T__190);
            break;
        case SaltParser.T__191:
            this.enterOuterAlt(localctx, 3);
            this.state = 1472;
            this.match(SaltParser.T__191);
            break;
        case SaltParser.T__192:
            this.enterOuterAlt(localctx, 4);
            this.state = 1473;
            this.match(SaltParser.T__192);
            break;
        case SaltParser.T__176:
        case SaltParser.T__195:
            this.enterOuterAlt(localctx, 5);
            this.state = 1474;
            this.lt_operator();
            break;
        case SaltParser.T__193:
        case SaltParser.T__194:
            this.enterOuterAlt(localctx, 6);
            this.state = 1475;
            this.gt_operator();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Gt_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_gt_operator;
    return this;
}

Gt_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Gt_operatorContext.prototype.constructor = Gt_operatorContext;


Gt_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterGt_operator(this);
	}
};

Gt_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitGt_operator(this);
	}
};

Gt_operatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitGt_operator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Gt_operatorContext = Gt_operatorContext;

SaltParser.prototype.gt_operator = function() {

    var localctx = new Gt_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SaltParser.RULE_gt_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1478;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__193 || _la===SaltParser.T__194)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lt_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_lt_operator;
    return this;
}

Lt_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lt_operatorContext.prototype.constructor = Lt_operatorContext;


Lt_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLt_operator(this);
	}
};

Lt_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLt_operator(this);
	}
};

Lt_operatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLt_operator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Lt_operatorContext = Lt_operatorContext;

SaltParser.prototype.lt_operator = function() {

    var localctx = new Lt_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SaltParser.RULE_lt_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1480;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__176 || _la===SaltParser.T__195)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Linkpath_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_linkpath_options;
    return this;
}

Linkpath_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Linkpath_optionsContext.prototype.constructor = Linkpath_optionsContext;

Linkpath_optionsContext.prototype.maxblocksize = function() {
    return this.getTypedRuleContext(MaxblocksizeContext,0);
};

Linkpath_optionsContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};

Linkpath_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLinkpath_options(this);
	}
};

Linkpath_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLinkpath_options(this);
	}
};

Linkpath_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLinkpath_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Linkpath_optionsContext = Linkpath_optionsContext;

SaltParser.prototype.linkpath_options = function() {

    var localctx = new Linkpath_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SaltParser.RULE_linkpath_options);
    try {
        this.state = 1490;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__318:
            this.enterOuterAlt(localctx, 1);
            this.state = 1482;
            this.maxblocksize();
            break;
        case SaltParser.T__40:
            this.enterOuterAlt(localctx, 2);
            this.state = 1483;
            this.match(SaltParser.T__40);
            this.state = 1484;
            this.id_param();
            break;
        case SaltParser.T__143:
            this.enterOuterAlt(localctx, 3);
            this.state = 1485;
            this.match(SaltParser.T__143);
            this.state = 1487;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
            if(la_===1) {
                this.state = 1486;
                this.id_param();

            }
            break;
        case SaltParser.T__196:
            this.enterOuterAlt(localctx, 4);
            this.state = 1489;
            this.match(SaltParser.T__196);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Relationship_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_relationship_options;
    return this;
}

Relationship_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Relationship_optionsContext.prototype.constructor = Relationship_optionsContext;


 
Relationship_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RelationshipFlagFlagContext(parser, ctx) {
	Relationship_optionsContext.call(this, parser);
    Relationship_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationshipFlagFlagContext.prototype = Object.create(Relationship_optionsContext.prototype);
RelationshipFlagFlagContext.prototype.constructor = RelationshipFlagFlagContext;

SaltParser.RelationshipFlagFlagContext = RelationshipFlagFlagContext;

RelationshipFlagFlagContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RelationshipFlagFlagContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
RelationshipFlagFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRelationshipFlagFlag(this);
	}
};

RelationshipFlagFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRelationshipFlagFlag(this);
	}
};

RelationshipFlagFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRelationshipFlagFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RelationshipNumContext(parser, ctx) {
	Relationship_optionsContext.call(this, parser);
    Relationship_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationshipNumContext.prototype = Object.create(Relationship_optionsContext.prototype);
RelationshipNumContext.prototype.constructor = RelationshipNumContext;

SaltParser.RelationshipNumContext = RelationshipNumContext;

RelationshipNumContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};
RelationshipNumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRelationshipNum(this);
	}
};

RelationshipNumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRelationshipNum(this);
	}
};

RelationshipNumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRelationshipNum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RelationshipIDContext(parser, ctx) {
	Relationship_optionsContext.call(this, parser);
    Relationship_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationshipIDContext.prototype = Object.create(Relationship_optionsContext.prototype);
RelationshipIDContext.prototype.constructor = RelationshipIDContext;

SaltParser.RelationshipIDContext = RelationshipIDContext;

RelationshipIDContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};
RelationshipIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRelationshipID(this);
	}
};

RelationshipIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRelationshipID(this);
	}
};

RelationshipIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRelationshipID(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RelationshipFieldListContext(parser, ctx) {
	Relationship_optionsContext.call(this, parser);
    Relationship_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationshipFieldListContext.prototype = Object.create(Relationship_optionsContext.prototype);
RelationshipFieldListContext.prototype.constructor = RelationshipFieldListContext;

SaltParser.RelationshipFieldListContext = RelationshipFieldListContext;

RelationshipFieldListContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RelationshipFieldListContext.prototype.basis_list = function() {
    return this.getTypedRuleContext(Basis_listContext,0);
};

RelationshipFieldListContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
RelationshipFieldListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRelationshipFieldList(this);
	}
};

RelationshipFieldListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRelationshipFieldList(this);
	}
};

RelationshipFieldListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRelationshipFieldList(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RelationshipSkipContext(parser, ctx) {
	Relationship_optionsContext.call(this, parser);
    Relationship_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationshipSkipContext.prototype = Object.create(Relationship_optionsContext.prototype);
RelationshipSkipContext.prototype.constructor = RelationshipSkipContext;

SaltParser.RelationshipSkipContext = RelationshipSkipContext;

RelationshipSkipContext.prototype.basis_option = function() {
    return this.getTypedRuleContext(Basis_optionContext,0);
};
RelationshipSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRelationshipSkip(this);
	}
};

RelationshipSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRelationshipSkip(this);
	}
};

RelationshipSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRelationshipSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Relationship_optionsContext = Relationship_optionsContext;

SaltParser.prototype.relationship_options = function() {

    var localctx = new Relationship_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SaltParser.RULE_relationship_options);
    var _la = 0; // Token type
    try {
        this.state = 1506;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__139:
            localctx = new RelationshipSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1492;
            this.basis_option();
            break;
        case SaltParser.T__17:
        case SaltParser.T__18:
        case SaltParser.T__197:
        case SaltParser.T__198:
            localctx = new RelationshipNumContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1493;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__17 || _la===SaltParser.T__18 || _la===SaltParser.T__197 || _la===SaltParser.T__198)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1494;
            this.num_param();
            break;
        case SaltParser.T__199:
            localctx = new RelationshipFlagFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1495;
            this.match(SaltParser.T__199);
            this.state = 1496;
            this.lp();
            this.state = 1497;
            _la = this._input.LA(1);
            if(!(((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (SaltParser.T__175 - 176)) | (1 << (SaltParser.T__200 - 176)) | (1 << (SaltParser.T__201 - 176)) | (1 << (SaltParser.T__202 - 176)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1498;
            this.rp();
            break;
        case SaltParser.T__203:
        case SaltParser.T__204:
        case SaltParser.T__205:
            localctx = new RelationshipFieldListContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1500;
            _la = this._input.LA(1);
            if(!(((((_la - 204)) & ~0x1f) == 0 && ((1 << (_la - 204)) & ((1 << (SaltParser.T__203 - 204)) | (1 << (SaltParser.T__204 - 204)) | (1 << (SaltParser.T__205 - 204)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1501;
            this.lp();
            this.state = 1502;
            this.basis_list();
            this.state = 1503;
            this.rp();
            break;
        case SaltParser.ID:
            localctx = new RelationshipIDContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1505;
            this.match(SaltParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cleave_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_cleave_options;
    return this;
}

Cleave_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cleave_optionsContext.prototype.constructor = Cleave_optionsContext;


 
Cleave_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CleaveNumContext(parser, ctx) {
	Cleave_optionsContext.call(this, parser);
    Cleave_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CleaveNumContext.prototype = Object.create(Cleave_optionsContext.prototype);
CleaveNumContext.prototype.constructor = CleaveNumContext;

SaltParser.CleaveNumContext = CleaveNumContext;

CleaveNumContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};
CleaveNumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCleaveNum(this);
	}
};

CleaveNumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCleaveNum(this);
	}
};

CleaveNumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCleaveNum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CleaveFlagContext(parser, ctx) {
	Cleave_optionsContext.call(this, parser);
    Cleave_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CleaveFlagContext.prototype = Object.create(Cleave_optionsContext.prototype);
CleaveFlagContext.prototype.constructor = CleaveFlagContext;

SaltParser.CleaveFlagContext = CleaveFlagContext;

CleaveFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCleaveFlag(this);
	}
};

CleaveFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCleaveFlag(this);
	}
};

CleaveFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCleaveFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CleaveFlagFlagContext(parser, ctx) {
	Cleave_optionsContext.call(this, parser);
    Cleave_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CleaveFlagFlagContext.prototype = Object.create(Cleave_optionsContext.prototype);
CleaveFlagFlagContext.prototype.constructor = CleaveFlagFlagContext;

SaltParser.CleaveFlagFlagContext = CleaveFlagFlagContext;

CleaveFlagFlagContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

CleaveFlagFlagContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
CleaveFlagFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCleaveFlagFlag(this);
	}
};

CleaveFlagFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCleaveFlagFlag(this);
	}
};

CleaveFlagFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCleaveFlagFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CleaveSkipContext(parser, ctx) {
	Cleave_optionsContext.call(this, parser);
    Cleave_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CleaveSkipContext.prototype = Object.create(Cleave_optionsContext.prototype);
CleaveSkipContext.prototype.constructor = CleaveSkipContext;

SaltParser.CleaveSkipContext = CleaveSkipContext;

CleaveSkipContext.prototype.basis_option = function() {
    return this.getTypedRuleContext(Basis_optionContext,0);
};
CleaveSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCleaveSkip(this);
	}
};

CleaveSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCleaveSkip(this);
	}
};

CleaveSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCleaveSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Cleave_optionsContext = Cleave_optionsContext;

SaltParser.prototype.cleave_options = function() {

    var localctx = new Cleave_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SaltParser.RULE_cleave_options);
    var _la = 0; // Token type
    try {
        this.state = 1517;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__139:
            localctx = new CleaveSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1508;
            this.basis_option();
            break;
        case SaltParser.T__20:
        case SaltParser.T__206:
        case SaltParser.T__207:
            localctx = new CleaveFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1509;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__20 || _la===SaltParser.T__206 || _la===SaltParser.T__207)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SaltParser.T__17:
        case SaltParser.T__55:
        case SaltParser.T__208:
        case SaltParser.T__209:
            localctx = new CleaveNumContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1510;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__17 || _la===SaltParser.T__55 || _la===SaltParser.T__208 || _la===SaltParser.T__209)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1511;
            this.num_param();
            break;
        case SaltParser.T__210:
            localctx = new CleaveFlagFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1512;
            this.match(SaltParser.T__210);
            this.state = 1513;
            this.lp();
            this.state = 1514;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__175 || _la===SaltParser.T__200 || _la===SaltParser.T__211 || _la===SaltParser.T__212)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1515;
            this.rp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Blocklink_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_blocklink_option;
    return this;
}

Blocklink_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Blocklink_optionContext.prototype.constructor = Blocklink_optionContext;

Blocklink_optionContext.prototype.periodic_ids_param = function() {
    return this.getTypedRuleContext(Periodic_ids_paramContext,0);
};

Blocklink_optionContext.prototype.basis_option = function() {
    return this.getTypedRuleContext(Basis_optionContext,0);
};

Blocklink_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBlocklink_option(this);
	}
};

Blocklink_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBlocklink_option(this);
	}
};

Blocklink_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBlocklink_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Blocklink_optionContext = Blocklink_optionContext;

SaltParser.prototype.blocklink_option = function() {

    var localctx = new Blocklink_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SaltParser.RULE_blocklink_option);
    try {
        this.state = 1522;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__213:
            this.enterOuterAlt(localctx, 1);
            this.state = 1519;
            this.match(SaltParser.T__213);
            this.state = 1520;
            this.periodic_ids_param();
            break;
        case SaltParser.T__139:
            this.enterOuterAlt(localctx, 2);
            this.state = 1521;
            this.basis_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Range_field_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_range_field_options;
    return this;
}

Range_field_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Range_field_optionsContext.prototype.constructor = Range_field_optionsContext;


 
Range_field_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RangeFieldSkipContext(parser, ctx) {
	Range_field_optionsContext.call(this, parser);
    Range_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeFieldSkipContext.prototype = Object.create(Range_field_optionsContext.prototype);
RangeFieldSkipContext.prototype.constructor = RangeFieldSkipContext;

SaltParser.RangeFieldSkipContext = RangeFieldSkipContext;

RangeFieldSkipContext.prototype.force_option = function() {
    return this.getTypedRuleContext(Force_optionContext,0);
};
RangeFieldSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRangeFieldSkip(this);
	}
};

RangeFieldSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRangeFieldSkip(this);
	}
};

RangeFieldSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRangeFieldSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RangeFieldContextContext(parser, ctx) {
	Range_field_optionsContext.call(this, parser);
    Range_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeFieldContextContext.prototype = Object.create(Range_field_optionsContext.prototype);
RangeFieldContextContext.prototype.constructor = RangeFieldContextContext;

SaltParser.RangeFieldContextContext = RangeFieldContextContext;

RangeFieldContextContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RangeFieldContextContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

RangeFieldContextContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

RangeFieldContextContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};
RangeFieldContextContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRangeFieldContext(this);
	}
};

RangeFieldContextContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRangeFieldContext(this);
	}
};

RangeFieldContextContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRangeFieldContext(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RangeFieldBasisContext(parser, ctx) {
	Range_field_optionsContext.call(this, parser);
    Range_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeFieldBasisContext.prototype = Object.create(Range_field_optionsContext.prototype);
RangeFieldBasisContext.prototype.constructor = RangeFieldBasisContext;

SaltParser.RangeFieldBasisContext = RangeFieldBasisContext;

RangeFieldBasisContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RangeFieldBasisContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};

RangeFieldBasisContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
RangeFieldBasisContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRangeFieldBasis(this);
	}
};

RangeFieldBasisContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRangeFieldBasis(this);
	}
};

RangeFieldBasisContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRangeFieldBasis(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RangeFieldRangeContext(parser, ctx) {
	Range_field_optionsContext.call(this, parser);
    Range_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeFieldRangeContext.prototype = Object.create(Range_field_optionsContext.prototype);
RangeFieldRangeContext.prototype.constructor = RangeFieldRangeContext;

SaltParser.RangeFieldRangeContext = RangeFieldRangeContext;

RangeFieldRangeContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

RangeFieldRangeContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


RangeFieldRangeContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

RangeFieldRangeContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
RangeFieldRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRangeFieldRange(this);
	}
};

RangeFieldRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRangeFieldRange(this);
	}
};

RangeFieldRangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRangeFieldRange(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RangeFieldNumParamContext(parser, ctx) {
	Range_field_optionsContext.call(this, parser);
    Range_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeFieldNumParamContext.prototype = Object.create(Range_field_optionsContext.prototype);
RangeFieldNumParamContext.prototype.constructor = RangeFieldNumParamContext;

SaltParser.RangeFieldNumParamContext = RangeFieldNumParamContext;

RangeFieldNumParamContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};

RangeFieldNumParamContext.prototype.neg_num_param = function() {
    return this.getTypedRuleContext(Neg_num_paramContext,0);
};
RangeFieldNumParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRangeFieldNumParam(this);
	}
};

RangeFieldNumParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRangeFieldNumParam(this);
	}
};

RangeFieldNumParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRangeFieldNumParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function RangeFieldFlagContext(parser, ctx) {
	Range_field_optionsContext.call(this, parser);
    Range_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeFieldFlagContext.prototype = Object.create(Range_field_optionsContext.prototype);
RangeFieldFlagContext.prototype.constructor = RangeFieldFlagContext;

SaltParser.RangeFieldFlagContext = RangeFieldFlagContext;

RangeFieldFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRangeFieldFlag(this);
	}
};

RangeFieldFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRangeFieldFlag(this);
	}
};

RangeFieldFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRangeFieldFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Range_field_optionsContext = Range_field_optionsContext;

SaltParser.prototype.range_field_options = function() {

    var localctx = new Range_field_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SaltParser.RULE_range_field_options);
    var _la = 0; // Token type
    try {
        this.state = 1553;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__214:
            localctx = new RangeFieldRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1524;
            this.match(SaltParser.T__214);
            this.state = 1525;
            this.lp();
            this.state = 1526;
            this.match(SaltParser.ID);
            this.state = 1527;
            this.comma();
            this.state = 1528;
            this.match(SaltParser.ID);
            this.state = 1529;
            this.rp();
            break;
        case SaltParser.T__215:
            localctx = new RangeFieldFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1531;
            this.match(SaltParser.T__215);
            break;
        case SaltParser.T__216:
        case SaltParser.T__217:
            localctx = new RangeFieldNumParamContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1532;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__216 || _la===SaltParser.T__217)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1535;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1533;
                this.num_param();
                break;

            case 2:
                this.state = 1534;
                this.neg_num_param();
                break;

            }
            break;
        case SaltParser.T__218:
            localctx = new RangeFieldBasisContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1537;
            this.match(SaltParser.T__218);
            this.state = 1538;
            this.lp();
            this.state = 1539;
            this.id_comma_list();
            this.state = 1540;
            this.rp();
            break;
        case SaltParser.T__219:
            localctx = new RangeFieldContextContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1542;
            this.match(SaltParser.T__219);
            this.state = 1543;
            this.lp();
            this.state = 1544;
            this.match(SaltParser.ID);
            this.state = 1548;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
            if(la_===1) {
                this.state = 1545;
                this.comma();
                this.state = 1546;
                _la = this._input.LA(1);
                if(!(_la===SaltParser.T__220 || _la===SaltParser.T__221)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1550;
            this.rp();
            break;
        case SaltParser.T__279:
            localctx = new RangeFieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1552;
            this.force_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Source_field_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_source_field_options;
    return this;
}

Source_field_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Source_field_optionsContext.prototype.constructor = Source_field_optionsContext;


 
Source_field_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SourceFieldConsistentContext(parser, ctx) {
	Source_field_optionsContext.call(this, parser);
    Source_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SourceFieldConsistentContext.prototype = Object.create(Source_field_optionsContext.prototype);
SourceFieldConsistentContext.prototype.constructor = SourceFieldConsistentContext;

SaltParser.SourceFieldConsistentContext = SourceFieldConsistentContext;

SourceFieldConsistentContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

SourceFieldConsistentContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};

SourceFieldConsistentContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
SourceFieldConsistentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSourceFieldConsistent(this);
	}
};

SourceFieldConsistentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSourceFieldConsistent(this);
	}
};

SourceFieldConsistentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSourceFieldConsistent(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SourceFieldPermitsContext(parser, ctx) {
	Source_field_optionsContext.call(this, parser);
    Source_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SourceFieldPermitsContext.prototype = Object.create(Source_field_optionsContext.prototype);
SourceFieldPermitsContext.prototype.constructor = SourceFieldPermitsContext;

SaltParser.SourceFieldPermitsContext = SourceFieldPermitsContext;

SourceFieldPermitsContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

SourceFieldPermitsContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

SourceFieldPermitsContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

SourceFieldPermitsContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

SourceFieldPermitsContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};
SourceFieldPermitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSourceFieldPermits(this);
	}
};

SourceFieldPermitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSourceFieldPermits(this);
	}
};

SourceFieldPermitsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSourceFieldPermits(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SourceFieldPartitionContext(parser, ctx) {
	Source_field_optionsContext.call(this, parser);
    Source_field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SourceFieldPartitionContext.prototype = Object.create(Source_field_optionsContext.prototype);
SourceFieldPartitionContext.prototype.constructor = SourceFieldPartitionContext;

SaltParser.SourceFieldPartitionContext = SourceFieldPartitionContext;

SourceFieldPartitionContext.prototype.periodic_ids_param = function() {
    return this.getTypedRuleContext(Periodic_ids_paramContext,0);
};
SourceFieldPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSourceFieldPartition(this);
	}
};

SourceFieldPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSourceFieldPartition(this);
	}
};

SourceFieldPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSourceFieldPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Source_field_optionsContext = Source_field_optionsContext;

SaltParser.prototype.source_field_options = function() {

    var localctx = new Source_field_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SaltParser.RULE_source_field_options);
    try {
        this.state = 1574;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__222:
            localctx = new SourceFieldPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1555;
            this.match(SaltParser.T__222);
            this.state = 1556;
            this.periodic_ids_param();
            break;
        case SaltParser.T__223:
            localctx = new SourceFieldPermitsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1557;
            this.match(SaltParser.T__223);
            this.state = 1558;
            this.lp();
            this.state = 1559;
            this.periodic_ids();
            this.state = 1563;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
            if(la_===1) {
                this.state = 1560;
                this.comma();
                this.state = 1561;
                this.match(SaltParser.INT);

            }
            this.state = 1565;
            this.rp();
            break;
        case SaltParser.T__224:
            localctx = new SourceFieldConsistentContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1567;
            this.match(SaltParser.T__224);
            this.state = 1572;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
            if(la_===1) {
                this.state = 1568;
                this.lp();
                this.state = 1569;
                this.id_comma_list();
                this.state = 1570;
                this.rp();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concept_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_concept_options;
    return this;
}

Concept_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concept_optionsContext.prototype.constructor = Concept_optionsContext;


 
Concept_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConceptFlagContext(parser, ctx) {
	Concept_optionsContext.call(this, parser);
    Concept_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConceptFlagContext.prototype = Object.create(Concept_optionsContext.prototype);
ConceptFlagContext.prototype.constructor = ConceptFlagContext;

SaltParser.ConceptFlagContext = ConceptFlagContext;

ConceptFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterConceptFlag(this);
	}
};

ConceptFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitConceptFlag(this);
	}
};

ConceptFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitConceptFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConceptChildrefContext(parser, ctx) {
	Concept_optionsContext.call(this, parser);
    Concept_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConceptChildrefContext.prototype = Object.create(Concept_optionsContext.prototype);
ConceptChildrefContext.prototype.constructor = ConceptChildrefContext;

SaltParser.ConceptChildrefContext = ConceptChildrefContext;

ConceptChildrefContext.prototype.concept_childref = function() {
    return this.getTypedRuleContext(Concept_childrefContext,0);
};
ConceptChildrefContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterConceptChildref(this);
	}
};

ConceptChildrefContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitConceptChildref(this);
	}
};

ConceptChildrefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitConceptChildref(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConceptFieldContext(parser, ctx) {
	Concept_optionsContext.call(this, parser);
    Concept_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConceptFieldContext.prototype = Object.create(Concept_optionsContext.prototype);
ConceptFieldContext.prototype.constructor = ConceptFieldContext;

SaltParser.ConceptFieldContext = ConceptFieldContext;

ConceptFieldContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

ConceptFieldContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.INT);
    } else {
        return this.getToken(SaltParser.INT, i);
    }
};


ConceptFieldContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

ConceptFieldContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};
ConceptFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterConceptField(this);
	}
};

ConceptFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitConceptField(this);
	}
};

ConceptFieldContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitConceptField(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConceptSkipContext(parser, ctx) {
	Concept_optionsContext.call(this, parser);
    Concept_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConceptSkipContext.prototype = Object.create(Concept_optionsContext.prototype);
ConceptSkipContext.prototype.constructor = ConceptSkipContext;

SaltParser.ConceptSkipContext = ConceptSkipContext;

ConceptSkipContext.prototype.segref = function() {
    return this.getTypedRuleContext(SegrefContext,0);
};

ConceptSkipContext.prototype.bag_of_words = function() {
    return this.getTypedRuleContext(Bag_of_wordsContext,0);
};

ConceptSkipContext.prototype.rollup_option = function() {
    return this.getTypedRuleContext(Rollup_optionContext,0);
};

ConceptSkipContext.prototype.supports_option = function() {
    return this.getTypedRuleContext(Supports_optionContext,0);
};

ConceptSkipContext.prototype.weight_option = function() {
    return this.getTypedRuleContext(Weight_optionContext,0);
};

ConceptSkipContext.prototype.force_option = function() {
    return this.getTypedRuleContext(Force_optionContext,0);
};

ConceptSkipContext.prototype.like_option = function() {
    return this.getTypedRuleContext(Like_optionContext,0);
};
ConceptSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterConceptSkip(this);
	}
};

ConceptSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitConceptSkip(this);
	}
};

ConceptSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitConceptSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConceptFlagFlagContext(parser, ctx) {
	Concept_optionsContext.call(this, parser);
    Concept_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConceptFlagFlagContext.prototype = Object.create(Concept_optionsContext.prototype);
ConceptFlagFlagContext.prototype.constructor = ConceptFlagFlagContext;

SaltParser.ConceptFlagFlagContext = ConceptFlagFlagContext;

ConceptFlagFlagContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

ConceptFlagFlagContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
ConceptFlagFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterConceptFlagFlag(this);
	}
};

ConceptFlagFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitConceptFlagFlag(this);
	}
};

ConceptFlagFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitConceptFlagFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Concept_optionsContext = Concept_optionsContext;

SaltParser.prototype.concept_options = function() {

    var localctx = new Concept_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SaltParser.RULE_concept_options);
    var _la = 0; // Token type
    try {
        this.state = 1606;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__93:
        case SaltParser.T__94:
        case SaltParser.ID:
            localctx = new ConceptChildrefContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1576;
            this.concept_childref();
            break;
        case SaltParser.T__268:
        case SaltParser.T__269:
            localctx = new ConceptSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1577;
            this.segref();
            break;
        case SaltParser.T__22:
            localctx = new ConceptSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1578;
            this.bag_of_words();
            break;
        case SaltParser.T__225:
            localctx = new ConceptFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1579;
            this.match(SaltParser.T__225);
            break;
        case SaltParser.T__226:
            localctx = new ConceptFlagFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1580;
            this.match(SaltParser.T__226);
            this.state = 1581;
            this.lp();
            this.state = 1582;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__39 || _la===SaltParser.T__41 || _la===SaltParser.T__210)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1583;
            this.rp();
            break;
        case SaltParser.T__270:
            localctx = new ConceptSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1585;
            this.rollup_option();
            break;
        case SaltParser.T__274:
            localctx = new ConceptSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1586;
            this.supports_option();
            break;
        case SaltParser.T__273:
            localctx = new ConceptSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1587;
            this.weight_option();
            break;
        case SaltParser.T__279:
            localctx = new ConceptSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1588;
            this.force_option();
            break;
        case SaltParser.T__159:
            localctx = new ConceptSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1589;
            this.like_option();
            break;
        case SaltParser.T__74:
            localctx = new ConceptFieldContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1590;
            this.match(SaltParser.T__74);
            this.state = 1591;
            this.lp();
            this.state = 1592;
            this.match(SaltParser.INT);
            this.state = 1596;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
            if(la_===1) {
                this.state = 1593;
                this.comma();
                this.state = 1594;
                this.match(SaltParser.INT);

            }
            this.state = 1598;
            this.rp();
            break;
        case SaltParser.T__227:
            localctx = new ConceptFlagFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1600;
            this.match(SaltParser.T__227);
            this.state = 1601;
            this.lp();
            this.state = 1602;
            this.match(SaltParser.T__202);
            this.state = 1603;
            this.rp();
            break;
        case SaltParser.T__228:
            localctx = new ConceptFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1605;
            this.match(SaltParser.T__228);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Concept_childrefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_concept_childref;
    return this;
}

Concept_childrefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Concept_childrefContext.prototype.constructor = Concept_childrefContext;

Concept_childrefContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Concept_childrefContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterConcept_childref(this);
	}
};

Concept_childrefContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitConcept_childref(this);
	}
};

Concept_childrefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitConcept_childref(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Concept_childrefContext = Concept_childrefContext;

SaltParser.prototype.concept_childref = function() {

    var localctx = new Concept_childrefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SaltParser.RULE_concept_childref);
    var _la = 0; // Token type
    try {
        this.state = 1616;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__94:
            this.enterOuterAlt(localctx, 1);
            this.state = 1608;
            this.match(SaltParser.T__94);
            break;
        case SaltParser.T__93:
        case SaltParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 1610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__93) {
                this.state = 1609;
                this.match(SaltParser.T__93);
            }

            this.state = 1612;
            this.match(SaltParser.ID);
            this.state = 1614;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__94) {
                this.state = 1613;
                this.match(SaltParser.T__94);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lat_long_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_lat_long_options;
    return this;
}

Lat_long_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lat_long_optionsContext.prototype.constructor = Lat_long_optionsContext;


 
Lat_long_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LatLongIdContext(parser, ctx) {
	Lat_long_optionsContext.call(this, parser);
    Lat_long_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LatLongIdContext.prototype = Object.create(Lat_long_optionsContext.prototype);
LatLongIdContext.prototype.constructor = LatLongIdContext;

SaltParser.LatLongIdContext = LatLongIdContext;

LatLongIdContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};
LatLongIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLatLongId(this);
	}
};

LatLongIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLatLongId(this);
	}
};

LatLongIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLatLongId(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LatLongRealContext(parser, ctx) {
	Lat_long_optionsContext.call(this, parser);
    Lat_long_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LatLongRealContext.prototype = Object.create(Lat_long_optionsContext.prototype);
LatLongRealContext.prototype.constructor = LatLongRealContext;

SaltParser.LatLongRealContext = LatLongRealContext;

LatLongRealContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

LatLongRealContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

LatLongRealContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
LatLongRealContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLatLongReal(this);
	}
};

LatLongRealContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLatLongReal(this);
	}
};

LatLongRealContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLatLongReal(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LatLongSkipContext(parser, ctx) {
	Lat_long_optionsContext.call(this, parser);
    Lat_long_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LatLongSkipContext.prototype = Object.create(Lat_long_optionsContext.prototype);
LatLongSkipContext.prototype.constructor = LatLongSkipContext;

SaltParser.LatLongSkipContext = LatLongSkipContext;

LatLongSkipContext.prototype.force_option = function() {
    return this.getTypedRuleContext(Force_optionContext,0);
};

LatLongSkipContext.prototype.supports_option = function() {
    return this.getTypedRuleContext(Supports_optionContext,0);
};

LatLongSkipContext.prototype.weight_option = function() {
    return this.getTypedRuleContext(Weight_optionContext,0);
};

LatLongSkipContext.prototype.like_option = function() {
    return this.getTypedRuleContext(Like_optionContext,0);
};
LatLongSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLatLongSkip(this);
	}
};

LatLongSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLatLongSkip(this);
	}
};

LatLongSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLatLongSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LatLongFlagContext(parser, ctx) {
	Lat_long_optionsContext.call(this, parser);
    Lat_long_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LatLongFlagContext.prototype = Object.create(Lat_long_optionsContext.prototype);
LatLongFlagContext.prototype.constructor = LatLongFlagContext;

SaltParser.LatLongFlagContext = LatLongFlagContext;

LatLongFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLatLongFlag(this);
	}
};

LatLongFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLatLongFlag(this);
	}
};

LatLongFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLatLongFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function LatLongNumContext(parser, ctx) {
	Lat_long_optionsContext.call(this, parser);
    Lat_long_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LatLongNumContext.prototype = Object.create(Lat_long_optionsContext.prototype);
LatLongNumContext.prototype.constructor = LatLongNumContext;

SaltParser.LatLongNumContext = LatLongNumContext;

LatLongNumContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};

LatLongNumContext.prototype.neg_num_param = function() {
    return this.getTypedRuleContext(Neg_num_paramContext,0);
};
LatLongNumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLatLongNum(this);
	}
};

LatLongNumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLatLongNum(this);
	}
};

LatLongNumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLatLongNum(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Lat_long_optionsContext = Lat_long_optionsContext;

SaltParser.prototype.lat_long_options = function() {

    var localctx = new Lat_long_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SaltParser.RULE_lat_long_options);
    var _la = 0; // Token type
    try {
        this.state = 1637;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__229:
        case SaltParser.T__230:
            localctx = new LatLongIdContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1618;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__229 || _la===SaltParser.T__230)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1619;
            this.id_param();
            break;
        case SaltParser.T__146:
        case SaltParser.T__231:
            localctx = new LatLongNumContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1620;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__146 || _la===SaltParser.T__231)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1621;
            this.num_param();
            break;
        case SaltParser.T__232:
            localctx = new LatLongRealContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1622;
            this.match(SaltParser.T__232);
            this.state = 1623;
            this.lp();
            this.state = 1624;
            this.real();
            this.state = 1625;
            this.rp();
            break;
        case SaltParser.T__279:
            localctx = new LatLongSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1627;
            this.force_option();
            break;
        case SaltParser.T__274:
            localctx = new LatLongSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1628;
            this.supports_option();
            break;
        case SaltParser.T__273:
            localctx = new LatLongSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1629;
            this.weight_option();
            break;
        case SaltParser.T__215:
            localctx = new LatLongFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1630;
            this.match(SaltParser.T__215);
            break;
        case SaltParser.T__216:
            localctx = new LatLongNumContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1631;
            this.match(SaltParser.T__216);
            this.state = 1634;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1632;
                this.num_param();
                break;

            case 2:
                this.state = 1633;
                this.neg_num_param();
                break;

            }
            break;
        case SaltParser.T__159:
            localctx = new LatLongSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1636;
            this.like_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_field_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_date_field_options;
    return this;
}

Date_field_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_field_optionsContext.prototype.constructor = Date_field_optionsContext;

Date_field_optionsContext.prototype.field_options = function() {
    return this.getTypedRuleContext(Field_optionsContext,0);
};

Date_field_optionsContext.prototype.YEARSHIFT = function() {
    return this.getToken(SaltParser.YEARSHIFT, 0);
};

Date_field_optionsContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Date_field_optionsContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

Date_field_optionsContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Date_field_optionsContext.prototype.rollup_option = function() {
    return this.getTypedRuleContext(Rollup_optionContext,0);
};

Date_field_optionsContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};

Date_field_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDate_field_options(this);
	}
};

Date_field_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDate_field_options(this);
	}
};

Date_field_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDate_field_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Date_field_optionsContext = Date_field_optionsContext;

SaltParser.prototype.date_field_options = function() {

    var localctx = new Date_field_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SaltParser.RULE_date_field_options);
    var _la = 0; // Token type
    try {
        this.state = 1650;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__22:
        case SaltParser.T__57:
        case SaltParser.T__81:
        case SaltParser.T__159:
        case SaltParser.T__174:
        case SaltParser.T__197:
        case SaltParser.T__214:
        case SaltParser.T__215:
        case SaltParser.T__216:
        case SaltParser.T__219:
        case SaltParser.T__225:
        case SaltParser.T__227:
        case SaltParser.T__228:
        case SaltParser.T__236:
        case SaltParser.T__237:
        case SaltParser.T__238:
        case SaltParser.T__239:
        case SaltParser.T__240:
        case SaltParser.T__241:
        case SaltParser.T__242:
        case SaltParser.T__243:
        case SaltParser.T__244:
        case SaltParser.T__247:
        case SaltParser.T__249:
        case SaltParser.T__250:
        case SaltParser.T__251:
        case SaltParser.T__252:
        case SaltParser.T__253:
        case SaltParser.T__254:
        case SaltParser.T__255:
        case SaltParser.T__256:
        case SaltParser.T__257:
        case SaltParser.T__258:
        case SaltParser.T__259:
        case SaltParser.T__268:
        case SaltParser.T__269:
        case SaltParser.T__273:
        case SaltParser.T__274:
        case SaltParser.T__279:
        case SaltParser.T__319:
        case SaltParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 1639;
            this.field_options();
            break;
        case SaltParser.T__233:
        case SaltParser.T__234:
        case SaltParser.YEARSHIFT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1640;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__233 || _la===SaltParser.T__234 || _la===SaltParser.YEARSHIFT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1645;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
            if(la_===1) {
                this.state = 1641;
                this.lp();
                this.state = 1642;
                this.real();
                this.state = 1643;
                this.rp();

            }
            break;
        case SaltParser.T__270:
            this.enterOuterAlt(localctx, 3);
            this.state = 1647;
            this.rollup_option();
            break;
        case SaltParser.T__235:
            this.enterOuterAlt(localctx, 4);
            this.state = 1648;
            this.match(SaltParser.T__235);
            this.state = 1649;
            this.num_param();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_field_options;
    return this;
}

Field_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_optionsContext.prototype.constructor = Field_optionsContext;


 
Field_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FieldBestOrFuzzyContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldBestOrFuzzyContext.prototype = Object.create(Field_optionsContext.prototype);
FieldBestOrFuzzyContext.prototype.constructor = FieldBestOrFuzzyContext;

SaltParser.FieldBestOrFuzzyContext = FieldBestOrFuzzyContext;

FieldBestOrFuzzyContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};
FieldBestOrFuzzyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldBestOrFuzzy(this);
	}
};

FieldBestOrFuzzyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldBestOrFuzzy(this);
	}
};

FieldBestOrFuzzyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldBestOrFuzzy(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldFlagsContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldFlagsContext.prototype = Object.create(Field_optionsContext.prototype);
FieldFlagsContext.prototype.constructor = FieldFlagsContext;

SaltParser.FieldFlagsContext = FieldFlagsContext;

FieldFlagsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldFlags(this);
	}
};

FieldFlagsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldFlags(this);
	}
};

FieldFlagsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldFlags(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldSkipContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldSkipContext.prototype = Object.create(Field_optionsContext.prototype);
FieldSkipContext.prototype.constructor = FieldSkipContext;

SaltParser.FieldSkipContext = FieldSkipContext;

FieldSkipContext.prototype.bag_of_words = function() {
    return this.getTypedRuleContext(Bag_of_wordsContext,0);
};

FieldSkipContext.prototype.like_option = function() {
    return this.getTypedRuleContext(Like_optionContext,0);
};

FieldSkipContext.prototype.distrib_option = function() {
    return this.getTypedRuleContext(Distrib_optionContext,0);
};

FieldSkipContext.prototype.segref = function() {
    return this.getTypedRuleContext(SegrefContext,0);
};

FieldSkipContext.prototype.supports_option = function() {
    return this.getTypedRuleContext(Supports_optionContext,0);
};

FieldSkipContext.prototype.weight_option = function() {
    return this.getTypedRuleContext(Weight_optionContext,0);
};

FieldSkipContext.prototype.force_option = function() {
    return this.getTypedRuleContext(Force_optionContext,0);
};

FieldSkipContext.prototype.recorddate_option = function() {
    return this.getTypedRuleContext(Recorddate_optionContext,0);
};
FieldSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldSkip(this);
	}
};

FieldSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldSkip(this);
	}
};

FieldSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeIDContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeIDContext.prototype = Object.create(Field_optionsContext.prototype);
FieldTypeIDContext.prototype.constructor = FieldTypeIDContext;

SaltParser.FieldTypeIDContext = FieldTypeIDContext;

FieldTypeIDContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeIDContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


FieldTypeIDContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeIDContext.prototype.WS = function() {
    return this.getToken(SaltParser.WS, 0);
};
FieldTypeIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeID(this);
	}
};

FieldTypeIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeID(this);
	}
};

FieldTypeIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeID(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldOptNumContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldOptNumContext.prototype = Object.create(Field_optionsContext.prototype);
FieldOptNumContext.prototype.constructor = FieldOptNumContext;

SaltParser.FieldOptNumContext = FieldOptNumContext;

FieldOptNumContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};
FieldOptNumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldOptNum(this);
	}
};

FieldOptNumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldOptNum(this);
	}
};

FieldOptNumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldOptNum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldContextContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldContextContext.prototype = Object.create(Field_optionsContext.prototype);
FieldContextContext.prototype.constructor = FieldContextContext;

SaltParser.FieldContextContext = FieldContextContext;

FieldContextContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldContextContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

FieldContextContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldContextContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};
FieldContextContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldContext(this);
	}
};

FieldContextContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldContext(this);
	}
};

FieldContextContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldContext(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldNumContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldNumContext.prototype = Object.create(Field_optionsContext.prototype);
FieldNumContext.prototype.constructor = FieldNumContext;

SaltParser.FieldNumContext = FieldNumContext;

FieldNumContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};

FieldNumContext.prototype.neg_num_param = function() {
    return this.getTypedRuleContext(Neg_num_paramContext,0);
};
FieldNumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldNum(this);
	}
};

FieldNumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldNum(this);
	}
};

FieldNumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldNum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldNullsContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldNullsContext.prototype = Object.create(Field_optionsContext.prototype);
FieldNullsContext.prototype.constructor = FieldNullsContext;

SaltParser.FieldNullsContext = FieldNullsContext;

FieldNullsContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldNullsContext.prototype.opt_id_list = function() {
    return this.getTypedRuleContext(Opt_id_listContext,0);
};

FieldNullsContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldNullsContext.prototype.nulls_replace = function() {
    return this.getTypedRuleContext(Nulls_replaceContext,0);
};
FieldNullsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldNulls(this);
	}
};

FieldNullsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldNulls(this);
	}
};

FieldNullsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldNulls(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldIDContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldIDContext.prototype = Object.create(Field_optionsContext.prototype);
FieldIDContext.prototype.constructor = FieldIDContext;

SaltParser.FieldIDContext = FieldIDContext;

FieldIDContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};
FieldIDContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldID(this);
	}
};

FieldIDContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldID(this);
	}
};

FieldIDContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldID(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldAbbrContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldAbbrContext.prototype = Object.create(Field_optionsContext.prototype);
FieldAbbrContext.prototype.constructor = FieldAbbrContext;

SaltParser.FieldAbbrContext = FieldAbbrContext;

FieldAbbrContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldAbbrContext.prototype.abbr_options = function() {
    return this.getTypedRuleContext(Abbr_optionsContext,0);
};

FieldAbbrContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
FieldAbbrContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldAbbr(this);
	}
};

FieldAbbrContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldAbbr(this);
	}
};

FieldAbbrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldAbbr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldPermittedContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldPermittedContext.prototype = Object.create(Field_optionsContext.prototype);
FieldPermittedContext.prototype.constructor = FieldPermittedContext;

SaltParser.FieldPermittedContext = FieldPermittedContext;

FieldPermittedContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldPermittedContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

FieldPermittedContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldPermittedContext.prototype.permitted_int = function() {
    return this.getTypedRuleContext(Permitted_intContext,0);
};

FieldPermittedContext.prototype.permitted_blank = function() {
    return this.getTypedRuleContext(Permitted_blankContext,0);
};
FieldPermittedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldPermitted(this);
	}
};

FieldPermittedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldPermitted(this);
	}
};

FieldPermittedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldPermitted(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldOptOptContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldOptOptContext.prototype = Object.create(Field_optionsContext.prototype);
FieldOptOptContext.prototype.constructor = FieldOptOptContext;

SaltParser.FieldOptOptContext = FieldOptOptContext;

FieldOptOptContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldOptOptContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
FieldOptOptContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldOptOpt(this);
	}
};

FieldOptOptContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldOptOpt(this);
	}
};

FieldOptOptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldOptOpt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldMultipleContext(parser, ctx) {
	Field_optionsContext.call(this, parser);
    Field_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldMultipleContext.prototype = Object.create(Field_optionsContext.prototype);
FieldMultipleContext.prototype.constructor = FieldMultipleContext;

SaltParser.FieldMultipleContext = FieldMultipleContext;

FieldMultipleContext.prototype.lp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LpContext);
    } else {
        return this.getTypedRuleContext(LpContext,i);
    }
};

FieldMultipleContext.prototype.rp = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RpContext);
    } else {
        return this.getTypedRuleContext(RpContext,i);
    }
};

FieldMultipleContext.prototype.multiple_many = function() {
    return this.getTypedRuleContext(Multiple_manyContext,0);
};

FieldMultipleContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

FieldMultipleContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};
FieldMultipleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldMultiple(this);
	}
};

FieldMultipleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldMultiple(this);
	}
};

FieldMultipleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldMultiple(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Field_optionsContext = Field_optionsContext;

SaltParser.prototype.field_options = function() {

    var localctx = new Field_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SaltParser.RULE_field_options);
    var _la = 0; // Token type
    try {
        this.state = 1752;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__214:
        case SaltParser.T__215:
        case SaltParser.T__225:
        case SaltParser.T__227:
        case SaltParser.T__228:
        case SaltParser.T__236:
        case SaltParser.T__237:
        case SaltParser.T__238:
        case SaltParser.T__239:
        case SaltParser.T__240:
        case SaltParser.T__241:
        case SaltParser.T__242:
        case SaltParser.T__243:
            localctx = new FieldFlagsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1652;
            _la = this._input.LA(1);
            if(!(((((_la - 215)) & ~0x1f) == 0 && ((1 << (_la - 215)) & ((1 << (SaltParser.T__214 - 215)) | (1 << (SaltParser.T__215 - 215)) | (1 << (SaltParser.T__225 - 215)) | (1 << (SaltParser.T__227 - 215)) | (1 << (SaltParser.T__228 - 215)) | (1 << (SaltParser.T__236 - 215)) | (1 << (SaltParser.T__237 - 215)) | (1 << (SaltParser.T__238 - 215)) | (1 << (SaltParser.T__239 - 215)) | (1 << (SaltParser.T__240 - 215)) | (1 << (SaltParser.T__241 - 215)) | (1 << (SaltParser.T__242 - 215)) | (1 << (SaltParser.T__243 - 215)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SaltParser.T__219:
            localctx = new FieldContextContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1653;
            this.match(SaltParser.T__219);
            this.state = 1654;
            this.lp();
            this.state = 1655;
            this.match(SaltParser.ID);
            this.state = 1659;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
            if(la_===1) {
                this.state = 1656;
                this.comma();
                this.state = 1657;
                _la = this._input.LA(1);
                if(!(_la===SaltParser.T__220 || _la===SaltParser.T__221)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1661;
            this.rp();
            break;
        case SaltParser.T__22:
            localctx = new FieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1663;
            this.bag_of_words();
            break;
        case SaltParser.T__244:
            localctx = new FieldOptOptContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1664;
            this.match(SaltParser.T__244);
            this.state = 1669;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
            if(la_===1) {
                this.state = 1665;
                this.lp();
                this.state = 1666;
                _la = this._input.LA(1);
                if(!(_la===SaltParser.T__245 || _la===SaltParser.T__246)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1667;
                this.rp();

            }
            break;
        case SaltParser.T__247:
            localctx = new FieldOptOptContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1671;
            this.match(SaltParser.T__247);
            this.state = 1676;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
            if(la_===1) {
                this.state = 1672;
                this.lp();
                this.state = 1673;
                this.match(SaltParser.T__248);
                this.state = 1674;
                this.rp();

            }
            break;
        case SaltParser.T__249:
            localctx = new FieldIDContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1678;
            this.match(SaltParser.T__249);
            this.state = 1679;
            this.id_param();
            break;
        case SaltParser.T__81:
            localctx = new FieldTypeIDContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1680;
            this.match(SaltParser.T__81);
            this.state = 1681;
            this.lp();
            this.state = 1684;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
            if(la_===1) {
                this.state = 1682;
                this.match(SaltParser.ID);
                this.state = 1683;
                this.match(SaltParser.WS);

            }
            this.state = 1686;
            this.match(SaltParser.ID);
            this.state = 1687;
            this.rp();
            break;
        case SaltParser.T__159:
            localctx = new FieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 1689;
            this.like_option();
            break;
        case SaltParser.T__57:
            localctx = new FieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 1690;
            this.distrib_option();
            break;
        case SaltParser.T__268:
        case SaltParser.T__269:
            localctx = new FieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 1691;
            this.segref();
            break;
        case SaltParser.T__250:
        case SaltParser.T__251:
        case SaltParser.T__252:
        case SaltParser.T__253:
        case SaltParser.T__254:
            localctx = new FieldOptNumContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 1692;
            _la = this._input.LA(1);
            if(!(((((_la - 251)) & ~0x1f) == 0 && ((1 << (_la - 251)) & ((1 << (SaltParser.T__250 - 251)) | (1 << (SaltParser.T__251 - 251)) | (1 << (SaltParser.T__252 - 251)) | (1 << (SaltParser.T__253 - 251)) | (1 << (SaltParser.T__254 - 251)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1694;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
            if(la_===1) {
                this.state = 1693;
                this.num_param();

            }
            break;
        case SaltParser.T__174:
        case SaltParser.T__255:
        case SaltParser.T__256:
            localctx = new FieldNumContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 1696;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__174 || _la===SaltParser.T__255 || _la===SaltParser.T__256)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1697;
            this.num_param();
            break;
        case SaltParser.T__216:
            localctx = new FieldNumContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 1698;
            this.match(SaltParser.T__216);
            this.state = 1701;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1699;
                this.num_param();
                break;

            case 2:
                this.state = 1700;
                this.neg_num_param();
                break;

            }
            break;
        case SaltParser.T__274:
            localctx = new FieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 1703;
            this.supports_option();
            break;
        case SaltParser.T__273:
            localctx = new FieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 1704;
            this.weight_option();
            break;
        case SaltParser.T__257:
            localctx = new FieldAbbrContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 1705;
            this.match(SaltParser.T__257);
            this.state = 1710;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
            if(la_===1) {
                this.state = 1706;
                this.lp();
                this.state = 1707;
                this.abbr_options();
                this.state = 1708;
                this.rp();

            }
            break;
        case SaltParser.T__279:
            localctx = new FieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 1712;
            this.force_option();
            break;
        case SaltParser.T__258:
            localctx = new FieldPermittedContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 1713;
            this.match(SaltParser.T__258);
            this.state = 1714;
            this.lp();
            this.state = 1715;
            this.match(SaltParser.ID);
            this.state = 1717;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
            if(la_===1) {
                this.state = 1716;
                this.permitted_int();

            }
            this.state = 1720;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
            if(la_===1) {
                this.state = 1719;
                this.permitted_blank();

            }
            this.state = 1722;
            this.rp();
            break;
        case SaltParser.T__259:
            localctx = new FieldNullsContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 1724;
            this.match(SaltParser.T__259);
            this.state = 1725;
            this.lp();
            this.state = 1727;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
            if(la_===1) {
                this.state = 1726;
                this.nulls_replace();

            }
            this.state = 1729;
            this.opt_id_list();
            this.state = 1730;
            this.rp();
            break;
        case SaltParser.T__197:
            localctx = new FieldMultipleContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 1732;
            this.match(SaltParser.T__197);
            this.state = 1748;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
            if(la_===1) {
                this.state = 1733;
                this.lp();
                this.state = 1744;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SaltParser.T__177:
                    this.state = 1734;
                    this.match(SaltParser.T__177);
                    this.state = 1735;
                    this.lp();
                    this.state = 1736;
                    this.match(SaltParser.ID);
                    this.state = 1737;
                    this.rp();
                    this.state = 1741;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
                    if(la_===1) {
                        this.state = 1738;
                        this.comma();
                        this.state = 1739;
                        this.multiple_many();

                    }
                    break;
                case SaltParser.T__175:
                case SaltParser.T__211:
                case SaltParser.T__260:
                case SaltParser.T__261:
                    this.state = 1743;
                    this.multiple_many();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 1746;
                this.rp();

            }
            break;
        case SaltParser.T__319:
            localctx = new FieldSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 1750;
            this.recorddate_option();
            break;
        case SaltParser.ID:
            localctx = new FieldBestOrFuzzyContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 1751;
            this.match(SaltParser.ID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Named_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_named_option;
    return this;
}

Named_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Named_optionContext.prototype.constructor = Named_optionContext;

Named_optionContext.prototype.periodic_ids_param = function() {
    return this.getTypedRuleContext(Periodic_ids_paramContext,0);
};

Named_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNamed_option(this);
	}
};

Named_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNamed_option(this);
	}
};

Named_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNamed_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Named_optionContext = Named_optionContext;

SaltParser.prototype.named_option = function() {

    var localctx = new Named_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SaltParser.RULE_named_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1754;
        this.match(SaltParser.T__213);
        this.state = 1755;
        this.periodic_ids_param();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bag_of_wordsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_bag_of_words;
    return this;
}

Bag_of_wordsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bag_of_wordsContext.prototype.constructor = Bag_of_wordsContext;

Bag_of_wordsContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Bag_of_wordsContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Bag_of_wordsContext.prototype.bag_of_words_type = function() {
    return this.getTypedRuleContext(Bag_of_words_typeContext,0);
};

Bag_of_wordsContext.prototype.bag_of_words_scale = function() {
    return this.getTypedRuleContext(Bag_of_words_scaleContext,0);
};

Bag_of_wordsContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Bag_of_wordsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBag_of_words(this);
	}
};

Bag_of_wordsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBag_of_words(this);
	}
};

Bag_of_wordsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBag_of_words(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Bag_of_wordsContext = Bag_of_wordsContext;

SaltParser.prototype.bag_of_words = function() {

    var localctx = new Bag_of_wordsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SaltParser.RULE_bag_of_words);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1757;
        this.match(SaltParser.T__22);
        this.state = 1769;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        if(la_===1) {
            this.state = 1758;
            this.lp();
            this.state = 1765;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1759;
                this.bag_of_words_type();
                break;

            case 2:
                this.state = 1760;
                this.bag_of_words_scale();
                break;

            case 3:
                this.state = 1761;
                this.bag_of_words_type();
                this.state = 1762;
                this.comma();
                this.state = 1763;
                this.bag_of_words_scale();
                break;

            }
            this.state = 1767;
            this.rp();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bag_of_words_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_bag_of_words_type;
    return this;
}

Bag_of_words_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bag_of_words_typeContext.prototype.constructor = Bag_of_words_typeContext;


Bag_of_words_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBag_of_words_type(this);
	}
};

Bag_of_words_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBag_of_words_type(this);
	}
};

Bag_of_words_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBag_of_words_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Bag_of_words_typeContext = Bag_of_words_typeContext;

SaltParser.prototype.bag_of_words_type = function() {

    var localctx = new Bag_of_words_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SaltParser.RULE_bag_of_words_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1771;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__175 || _la===SaltParser.T__211 || ((((_la - 261)) & ~0x1f) == 0 && ((1 << (_la - 261)) & ((1 << (SaltParser.T__260 - 261)) | (1 << (SaltParser.T__261 - 261)) | (1 << (SaltParser.T__262 - 261)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Bag_of_words_scaleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_bag_of_words_scale;
    return this;
}

Bag_of_words_scaleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bag_of_words_scaleContext.prototype.constructor = Bag_of_words_scaleContext;


Bag_of_words_scaleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBag_of_words_scale(this);
	}
};

Bag_of_words_scaleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBag_of_words_scale(this);
	}
};

Bag_of_words_scaleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBag_of_words_scale(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Bag_of_words_scaleContext = Bag_of_words_scaleContext;

SaltParser.prototype.bag_of_words_scale = function() {

    var localctx = new Bag_of_words_scaleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SaltParser.RULE_bag_of_words_scale);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1773;
        _la = this._input.LA(1);
        if(!(((((_la - 264)) & ~0x1f) == 0 && ((1 << (_la - 264)) & ((1 << (SaltParser.T__263 - 264)) | (1 << (SaltParser.T__264 - 264)) | (1 << (SaltParser.T__265 - 264)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Permitted_intContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_permitted_int;
    return this;
}

Permitted_intContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Permitted_intContext.prototype.constructor = Permitted_intContext;

Permitted_intContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Permitted_intContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Permitted_intContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterPermitted_int(this);
	}
};

Permitted_intContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitPermitted_int(this);
	}
};

Permitted_intContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitPermitted_int(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Permitted_intContext = Permitted_intContext;

SaltParser.prototype.permitted_int = function() {

    var localctx = new Permitted_intContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SaltParser.RULE_permitted_int);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1775;
        this.comma();
        this.state = 1776;
        this.match(SaltParser.INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Permitted_blankContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_permitted_blank;
    return this;
}

Permitted_blankContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Permitted_blankContext.prototype.constructor = Permitted_blankContext;

Permitted_blankContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Permitted_blankContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterPermitted_blank(this);
	}
};

Permitted_blankContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitPermitted_blank(this);
	}
};

Permitted_blankContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitPermitted_blank(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Permitted_blankContext = Permitted_blankContext;

SaltParser.prototype.permitted_blank = function() {

    var localctx = new Permitted_blankContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SaltParser.RULE_permitted_blank);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1778;
        this.comma();
        this.state = 1779;
        this.match(SaltParser.T__266);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nulls_replaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_nulls_replace;
    return this;
}

Nulls_replaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nulls_replaceContext.prototype.constructor = Nulls_replaceContext;

Nulls_replaceContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Nulls_replaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNulls_replace(this);
	}
};

Nulls_replaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNulls_replace(this);
	}
};

Nulls_replaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNulls_replace(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Nulls_replaceContext = Nulls_replaceContext;

SaltParser.prototype.nulls_replace = function() {

    var localctx = new Nulls_replaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SaltParser.RULE_nulls_replace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1781;
        this.match(SaltParser.T__267);
        this.state = 1782;
        this.comma();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Multiple_manyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_multiple_many;
    return this;
}

Multiple_manyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Multiple_manyContext.prototype.constructor = Multiple_manyContext;


Multiple_manyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterMultiple_many(this);
	}
};

Multiple_manyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitMultiple_many(this);
	}
};

Multiple_manyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitMultiple_many(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Multiple_manyContext = Multiple_manyContext;

SaltParser.prototype.multiple_many = function() {

    var localctx = new Multiple_manyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SaltParser.RULE_multiple_many);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1784;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__175 || _la===SaltParser.T__211 || _la===SaltParser.T__260 || _la===SaltParser.T__261)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SegrefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_segref;
    return this;
}

SegrefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SegrefContext.prototype.constructor = SegrefContext;


 
SegrefContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SegrefSegtypeContext(parser, ctx) {
	SegrefContext.call(this, parser);
    SegrefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SegrefSegtypeContext.prototype = Object.create(SegrefContext.prototype);
SegrefSegtypeContext.prototype.constructor = SegrefSegtypeContext;

SaltParser.SegrefSegtypeContext = SegrefSegtypeContext;

SegrefSegtypeContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};
SegrefSegtypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSegrefSegtype(this);
	}
};

SegrefSegtypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSegrefSegtype(this);
	}
};

SegrefSegtypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSegrefSegtype(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SegrefSegmentContext(parser, ctx) {
	SegrefContext.call(this, parser);
    SegrefContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SegrefSegmentContext.prototype = Object.create(SegrefContext.prototype);
SegrefSegmentContext.prototype.constructor = SegrefSegmentContext;

SaltParser.SegrefSegmentContext = SegrefSegmentContext;

SegrefSegmentContext.prototype.nonempty_stuff_in_brackets = function() {
    return this.getTypedRuleContext(Nonempty_stuff_in_bracketsContext,0);
};
SegrefSegmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSegrefSegment(this);
	}
};

SegrefSegmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSegrefSegment(this);
	}
};

SegrefSegmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSegrefSegment(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.SegrefContext = SegrefContext;

SaltParser.prototype.segref = function() {

    var localctx = new SegrefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SaltParser.RULE_segref);
    try {
        this.state = 1790;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__268:
            localctx = new SegrefSegmentContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1786;
            this.match(SaltParser.T__268);
            this.state = 1787;
            this.nonempty_stuff_in_brackets();
            break;
        case SaltParser.T__269:
            localctx = new SegrefSegtypeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1788;
            this.match(SaltParser.T__269);
            this.state = 1789;
            this.id_param();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollup_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_rollup_option;
    return this;
}

Rollup_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollup_optionContext.prototype.constructor = Rollup_optionContext;

Rollup_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Rollup_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Rollup_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRollup_option(this);
	}
};

Rollup_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRollup_option(this);
	}
};

Rollup_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRollup_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Rollup_optionContext = Rollup_optionContext;

SaltParser.prototype.rollup_option = function() {

    var localctx = new Rollup_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SaltParser.RULE_rollup_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1792;
        this.match(SaltParser.T__270);
        this.state = 1793;
        this.lp();
        this.state = 1794;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__271 || _la===SaltParser.T__272)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1795;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Weight_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_weight_option;
    return this;
}

Weight_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Weight_optionContext.prototype.constructor = Weight_optionContext;

Weight_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Weight_optionContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

Weight_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Weight_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterWeight_option(this);
	}
};

Weight_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitWeight_option(this);
	}
};

Weight_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitWeight_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Weight_optionContext = Weight_optionContext;

SaltParser.prototype.weight_option = function() {

    var localctx = new Weight_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SaltParser.RULE_weight_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1797;
        this.match(SaltParser.T__273);
        this.state = 1798;
        this.lp();
        this.state = 1799;
        this.real();
        this.state = 1800;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Distrib_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_distrib_option;
    return this;
}

Distrib_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Distrib_optionContext.prototype.constructor = Distrib_optionContext;

Distrib_optionContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};

Distrib_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDistrib_option(this);
	}
};

Distrib_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDistrib_option(this);
	}
};

Distrib_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDistrib_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Distrib_optionContext = Distrib_optionContext;

SaltParser.prototype.distrib_option = function() {

    var localctx = new Distrib_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SaltParser.RULE_distrib_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1802;
        this.match(SaltParser.T__57);
        this.state = 1803;
        this.id_param();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Like_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_like_option;
    return this;
}

Like_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Like_optionContext.prototype.constructor = Like_optionContext;

Like_optionContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};

Like_optionContext.prototype.opt_param = function() {
    return this.getTypedRuleContext(Opt_paramContext,0);
};

Like_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLike_option(this);
	}
};

Like_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLike_option(this);
	}
};

Like_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLike_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Like_optionContext = Like_optionContext;

SaltParser.prototype.like_option = function() {

    var localctx = new Like_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SaltParser.RULE_like_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1805;
        this.match(SaltParser.T__159);
        this.state = 1808;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1806;
            this.id_param();
            break;

        case 2:
            this.state = 1807;
            this.opt_param();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Supports_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_supports_option;
    return this;
}

Supports_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Supports_optionContext.prototype.constructor = Supports_optionContext;

Supports_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Supports_optionContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Supports_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Supports_optionContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Supports_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSupports_option(this);
	}
};

Supports_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSupports_option(this);
	}
};

Supports_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSupports_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Supports_optionContext = Supports_optionContext;

SaltParser.prototype.supports_option = function() {

    var localctx = new Supports_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SaltParser.RULE_supports_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1810;
        this.match(SaltParser.T__274);
        this.state = 1811;
        this.lp();
        this.state = 1812;
        this.match(SaltParser.ID);
        this.state = 1816;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        if(la_===1) {
            this.state = 1813;
            this.comma();
            this.state = 1814;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__267 || _la===SaltParser.T__275)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1818;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Opt_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_opt_id;
    return this;
}

Opt_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opt_idContext.prototype.constructor = Opt_idContext;


Opt_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOpt_id(this);
	}
};

Opt_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOpt_id(this);
	}
};

Opt_idContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOpt_id(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Opt_idContext = Opt_idContext;

SaltParser.prototype.opt_id = function() {

    var localctx = new Opt_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SaltParser.RULE_opt_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1823;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,186,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1820;
                _la = this._input.LA(1);
                if(_la<=0 || _la===SaltParser.T__72 || _la===SaltParser.T__276) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 1825;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,186,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Opt_id_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_opt_id_list;
    return this;
}

Opt_id_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opt_id_listContext.prototype.constructor = Opt_id_listContext;

Opt_id_listContext.prototype.opt_id = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Opt_idContext);
    } else {
        return this.getTypedRuleContext(Opt_idContext,i);
    }
};

Opt_id_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOpt_id_list(this);
	}
};

Opt_id_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOpt_id_list(this);
	}
};

Opt_id_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOpt_id_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Opt_id_listContext = Opt_id_listContext;

SaltParser.prototype.opt_id_list = function() {

    var localctx = new Opt_id_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SaltParser.RULE_opt_id_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1826;
        this.opt_id();
        this.state = 1831;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SaltParser.T__276) {
            this.state = 1827;
            this.match(SaltParser.T__276);
            this.state = 1828;
            this.opt_id();
            this.state = 1833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Abbr_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_abbr_option;
    return this;
}

Abbr_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Abbr_optionContext.prototype.constructor = Abbr_optionContext;

Abbr_optionContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};

Abbr_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAbbr_option(this);
	}
};

Abbr_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAbbr_option(this);
	}
};

Abbr_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAbbr_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Abbr_optionContext = Abbr_optionContext;

SaltParser.prototype.abbr_option = function() {

    var localctx = new Abbr_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SaltParser.RULE_abbr_option);
    try {
        this.state = 1839;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__150:
            this.enterOuterAlt(localctx, 1);
            this.state = 1834;
            this.match(SaltParser.T__150);
            break;
        case SaltParser.T__277:
            this.enterOuterAlt(localctx, 2);
            this.state = 1835;
            this.match(SaltParser.T__277);
            this.state = 1836;
            this.num_param();
            break;
        case SaltParser.T__278:
            this.enterOuterAlt(localctx, 3);
            this.state = 1837;
            this.match(SaltParser.T__278);
            break;
        case SaltParser.T__240:
            this.enterOuterAlt(localctx, 4);
            this.state = 1838;
            this.match(SaltParser.T__240);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Abbr_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_abbr_options;
    return this;
}

Abbr_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Abbr_optionsContext.prototype.constructor = Abbr_optionsContext;

Abbr_optionsContext.prototype.abbr_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Abbr_optionContext);
    } else {
        return this.getTypedRuleContext(Abbr_optionContext,i);
    }
};

Abbr_optionsContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Abbr_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterAbbr_options(this);
	}
};

Abbr_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitAbbr_options(this);
	}
};

Abbr_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitAbbr_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Abbr_optionsContext = Abbr_optionsContext;

SaltParser.prototype.abbr_options = function() {

    var localctx = new Abbr_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SaltParser.RULE_abbr_options);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1841;
        this.abbr_option();
        this.state = 1847;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,189,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1842;
                this.comma();
                this.state = 1843;
                this.abbr_option(); 
            }
            this.state = 1849;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,189,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Force_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_force_option;
    return this;
}

Force_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Force_optionContext.prototype.constructor = Force_optionContext;

Force_optionContext.prototype.opt_param = function() {
    return this.getTypedRuleContext(Opt_paramContext,0);
};

Force_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Force_optionContext.prototype.force_option_part = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Force_option_partContext);
    } else {
        return this.getTypedRuleContext(Force_option_partContext,i);
    }
};

Force_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Force_optionContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Force_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterForce_option(this);
	}
};

Force_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitForce_option(this);
	}
};

Force_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitForce_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Force_optionContext = Force_optionContext;

SaltParser.prototype.force_option = function() {

    var localctx = new Force_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SaltParser.RULE_force_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1850;
        this.match(SaltParser.T__279);
        this.state = 1864;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        if(la_===1) {
            this.state = 1851;
            this.opt_param();

        } else if(la_===2) {
            this.state = 1852;
            this.lp();
            this.state = 1853;
            this.force_option_part();
            this.state = 1859;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,190,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1854;
                    this.comma();
                    this.state = 1855;
                    this.force_option_part(); 
                }
                this.state = 1861;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,190,this._ctx);
            }

            this.state = 1862;
            this.rp();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Force_option_partContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_force_option_part;
    return this;
}

Force_option_partContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Force_option_partContext.prototype.constructor = Force_option_partContext;

Force_option_partContext.prototype.force_option_sign = function() {
    return this.getTypedRuleContext(Force_option_signContext,0);
};

Force_option_partContext.prototype.signed_num = function() {
    return this.getTypedRuleContext(Signed_numContext,0);
};

Force_option_partContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};

Force_option_partContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Force_option_partContext.prototype.or_force_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Or_force_optionContext);
    } else {
        return this.getTypedRuleContext(Or_force_optionContext,i);
    }
};

Force_option_partContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Force_option_partContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

Force_option_partContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterForce_option_part(this);
	}
};

Force_option_partContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitForce_option_part(this);
	}
};

Force_option_partContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitForce_option_part(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Force_option_partContext = Force_option_partContext;

SaltParser.prototype.force_option_part = function() {

    var localctx = new Force_option_partContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SaltParser.RULE_force_option_part);
    var _la = 0; // Token type
    try {
        this.state = 1890;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__72:
        case SaltParser.T__94:
        case SaltParser.T__282:
        case SaltParser.T__340:
        case SaltParser.INT:
        case SaltParser.NINT:
        case SaltParser.WS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1867;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__94 || _la===SaltParser.T__282) {
                this.state = 1866;
                this.force_option_sign();
            }

            this.state = 1870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.INT || _la===SaltParser.NINT) {
                this.state = 1869;
                this.signed_num();
            }

            break;
        case SaltParser.T__280:
            this.enterOuterAlt(localctx, 2);
            this.state = 1872;
            this.match(SaltParser.T__280);
            this.state = 1874;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
            if(la_===1) {
                this.state = 1873;
                this.num_param();

            }
            break;
        case SaltParser.T__175:
            this.enterOuterAlt(localctx, 3);
            this.state = 1876;
            this.match(SaltParser.T__175);
            break;
        case SaltParser.T__281:
            this.enterOuterAlt(localctx, 4);
            this.state = 1877;
            this.match(SaltParser.T__281);
            this.state = 1878;
            this.lp();
            this.state = 1879;
            this.or_force_option();
            this.state = 1885;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,195,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1880;
                    this.co();
                    this.state = 1881;
                    this.or_force_option(); 
                }
                this.state = 1887;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,195,this._ctx);
            }

            this.state = 1888;
            this.rp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Force_option_signContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_force_option_sign;
    return this;
}

Force_option_signContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Force_option_signContext.prototype.constructor = Force_option_signContext;


Force_option_signContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterForce_option_sign(this);
	}
};

Force_option_signContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitForce_option_sign(this);
	}
};

Force_option_signContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitForce_option_sign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Force_option_signContext = Force_option_signContext;

SaltParser.prototype.force_option_sign = function() {

    var localctx = new Force_option_signContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SaltParser.RULE_force_option_sign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1892;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__94 || _la===SaltParser.T__282)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Signed_numContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_signed_num;
    return this;
}

Signed_numContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_numContext.prototype.constructor = Signed_numContext;

Signed_numContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Signed_numContext.prototype.NINT = function() {
    return this.getToken(SaltParser.NINT, 0);
};

Signed_numContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSigned_num(this);
	}
};

Signed_numContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSigned_num(this);
	}
};

Signed_numContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSigned_num(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Signed_numContext = Signed_numContext;

SaltParser.prototype.signed_num = function() {

    var localctx = new Signed_numContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SaltParser.RULE_signed_num);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1894;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.INT || _la===SaltParser.NINT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Or_force_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_or_force_option;
    return this;
}

Or_force_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Or_force_optionContext.prototype.constructor = Or_force_optionContext;

Or_force_optionContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Or_force_optionContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Or_force_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOr_force_option(this);
	}
};

Or_force_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOr_force_option(this);
	}
};

Or_force_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOr_force_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Or_force_optionContext = Or_force_optionContext;

SaltParser.prototype.or_force_option = function() {

    var localctx = new Or_force_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SaltParser.RULE_or_force_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1896;
        this.match(SaltParser.ID);
        this.state = 1900;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.T__283) {
            this.state = 1897;
            this.match(SaltParser.T__283);
            this.state = 1898;
            this.match(SaltParser.INT);
            this.state = 1899;
            this.match(SaltParser.T__284);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Besttype_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_besttype_options;
    return this;
}

Besttype_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Besttype_optionsContext.prototype.constructor = Besttype_optionsContext;


 
Besttype_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BestCommonestContext(parser, ctx) {
	Besttype_optionsContext.call(this, parser);
    Besttype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BestCommonestContext.prototype = Object.create(Besttype_optionsContext.prototype);
BestCommonestContext.prototype.constructor = BestCommonestContext;

SaltParser.BestCommonestContext = BestCommonestContext;

BestCommonestContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};
BestCommonestContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBestCommonest(this);
	}
};

BestCommonestContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBestCommonest(this);
	}
};

BestCommonestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBestCommonest(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BestFlagContext(parser, ctx) {
	Besttype_optionsContext.call(this, parser);
    Besttype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BestFlagContext.prototype = Object.create(Besttype_optionsContext.prototype);
BestFlagContext.prototype.constructor = BestFlagContext;

SaltParser.BestFlagContext = BestFlagContext;

BestFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBestFlag(this);
	}
};

BestFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBestFlag(this);
	}
};

BestFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBestFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BestMinimumContext(parser, ctx) {
	Besttype_optionsContext.call(this, parser);
    Besttype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BestMinimumContext.prototype = Object.create(Besttype_optionsContext.prototype);
BestMinimumContext.prototype.constructor = BestMinimumContext;

SaltParser.BestMinimumContext = BestMinimumContext;

BestMinimumContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};
BestMinimumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBestMinimum(this);
	}
};

BestMinimumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBestMinimum(this);
	}
};

BestMinimumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBestMinimum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BestSkipContext(parser, ctx) {
	Besttype_optionsContext.call(this, parser);
    Besttype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BestSkipContext.prototype = Object.create(Besttype_optionsContext.prototype);
BestSkipContext.prototype.constructor = BestSkipContext;

SaltParser.BestSkipContext = BestSkipContext;

BestSkipContext.prototype.basis_option = function() {
    return this.getTypedRuleContext(Basis_optionContext,0);
};
BestSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBestSkip(this);
	}
};

BestSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBestSkip(this);
	}
};

BestSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBestSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BestRecentEarlyContext(parser, ctx) {
	Besttype_optionsContext.call(this, parser);
    Besttype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BestRecentEarlyContext.prototype = Object.create(Besttype_optionsContext.prototype);
BestRecentEarlyContext.prototype.constructor = BestRecentEarlyContext;

SaltParser.BestRecentEarlyContext = BestRecentEarlyContext;

BestRecentEarlyContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

BestRecentEarlyContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

BestRecentEarlyContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

BestRecentEarlyContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};
BestRecentEarlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBestRecentEarly(this);
	}
};

BestRecentEarlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBestRecentEarly(this);
	}
};

BestRecentEarlyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBestRecentEarly(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BestValidContext(parser, ctx) {
	Besttype_optionsContext.call(this, parser);
    Besttype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BestValidContext.prototype = Object.create(Besttype_optionsContext.prototype);
BestValidContext.prototype.constructor = BestValidContext;

SaltParser.BestValidContext = BestValidContext;

BestValidContext.prototype.periodic_ids_param = function() {
    return this.getTypedRuleContext(Periodic_ids_paramContext,0);
};
BestValidContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBestValid(this);
	}
};

BestValidContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBestValid(this);
	}
};

BestValidContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBestValid(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BestVotedContext(parser, ctx) {
	Besttype_optionsContext.call(this, parser);
    Besttype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BestVotedContext.prototype = Object.create(Besttype_optionsContext.prototype);
BestVotedContext.prototype.constructor = BestVotedContext;

SaltParser.BestVotedContext = BestVotedContext;

BestVotedContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

BestVotedContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

BestVotedContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

BestVotedContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

BestVotedContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};
BestVotedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBestVoted(this);
	}
};

BestVotedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBestVoted(this);
	}
};

BestVotedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBestVoted(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Besttype_optionsContext = Besttype_optionsContext;

SaltParser.prototype.besttype_options = function() {

    var localctx = new Besttype_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SaltParser.RULE_besttype_options);
    var _la = 0; // Token type
    try {
        this.state = 1934;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__139:
            localctx = new BestSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1902;
            this.basis_option();
            break;
        case SaltParser.T__20:
        case SaltParser.T__207:
        case SaltParser.T__227:
        case SaltParser.T__285:
        case SaltParser.T__286:
        case SaltParser.T__287:
        case SaltParser.T__288:
            localctx = new BestFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1903;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__20 || _la===SaltParser.T__207 || _la===SaltParser.T__227 || ((((_la - 286)) & ~0x1f) == 0 && ((1 << (_la - 286)) & ((1 << (SaltParser.T__285 - 286)) | (1 << (SaltParser.T__286 - 286)) | (1 << (SaltParser.T__287 - 286)) | (1 << (SaltParser.T__288 - 286)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SaltParser.T__289:
        case SaltParser.T__290:
            localctx = new BestRecentEarlyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1904;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__289 || _la===SaltParser.T__290)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1905;
            this.lp();
            this.state = 1906;
            this.match(SaltParser.ID);
            this.state = 1910;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
            if(la_===1) {
                this.state = 1907;
                this.comma();
                this.state = 1908;
                _la = this._input.LA(1);
                if(!(_la===SaltParser.T__150 || _la===SaltParser.T__291)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1912;
            this.rp();
            break;
        case SaltParser.T__189:
            localctx = new BestValidContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1914;
            this.match(SaltParser.T__189);
            this.state = 1916;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
            if(la_===1) {
                this.state = 1915;
                this.periodic_ids_param();

            }
            break;
        case SaltParser.T__292:
            localctx = new BestVotedContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1918;
            this.match(SaltParser.T__292);
            this.state = 1919;
            this.lp();
            this.state = 1920;
            this.periodic_ids();
            this.state = 1924;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
            if(la_===1) {
                this.state = 1921;
                this.comma();
                this.state = 1922;
                this.match(SaltParser.INT);

            }
            this.state = 1926;
            this.rp();
            break;
        case SaltParser.T__293:
            localctx = new BestCommonestContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1928;
            this.match(SaltParser.T__293);
            this.state = 1930;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
            if(la_===1) {
                this.state = 1929;
                this.num_param();

            }
            break;
        case SaltParser.T__209:
            localctx = new BestMinimumContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1932;
            this.match(SaltParser.T__209);
            this.state = 1933;
            this.num_param();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fuzzy_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_fuzzy_options;
    return this;
}

Fuzzy_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fuzzy_optionsContext.prototype.constructor = Fuzzy_optionsContext;


 
Fuzzy_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FuzzyFlagContext(parser, ctx) {
	Fuzzy_optionsContext.call(this, parser);
    Fuzzy_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuzzyFlagContext.prototype = Object.create(Fuzzy_optionsContext.prototype);
FuzzyFlagContext.prototype.constructor = FuzzyFlagContext;

SaltParser.FuzzyFlagContext = FuzzyFlagContext;

FuzzyFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFuzzyFlag(this);
	}
};

FuzzyFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFuzzyFlag(this);
	}
};

FuzzyFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFuzzyFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FuzzyWeightContext(parser, ctx) {
	Fuzzy_optionsContext.call(this, parser);
    Fuzzy_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuzzyWeightContext.prototype = Object.create(Fuzzy_optionsContext.prototype);
FuzzyWeightContext.prototype.constructor = FuzzyWeightContext;

SaltParser.FuzzyWeightContext = FuzzyWeightContext;

FuzzyWeightContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FuzzyWeightContext.prototype.real = function() {
    return this.getTypedRuleContext(RealContext,0);
};

FuzzyWeightContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FuzzyWeightContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};
FuzzyWeightContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFuzzyWeight(this);
	}
};

FuzzyWeightContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFuzzyWeight(this);
	}
};

FuzzyWeightContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFuzzyWeight(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FuzzyIdContext(parser, ctx) {
	Fuzzy_optionsContext.call(this, parser);
    Fuzzy_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuzzyIdContext.prototype = Object.create(Fuzzy_optionsContext.prototype);
FuzzyIdContext.prototype.constructor = FuzzyIdContext;

SaltParser.FuzzyIdContext = FuzzyIdContext;

FuzzyIdContext.prototype.id_param = function() {
    return this.getTypedRuleContext(Id_paramContext,0);
};

FuzzyIdContext.prototype.periodic_ids_param = function() {
    return this.getTypedRuleContext(Periodic_ids_paramContext,0);
};
FuzzyIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFuzzyId(this);
	}
};

FuzzyIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFuzzyId(this);
	}
};

FuzzyIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFuzzyId(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FuzzySkipContext(parser, ctx) {
	Fuzzy_optionsContext.call(this, parser);
    Fuzzy_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FuzzySkipContext.prototype = Object.create(Fuzzy_optionsContext.prototype);
FuzzySkipContext.prototype.constructor = FuzzySkipContext;

SaltParser.FuzzySkipContext = FuzzySkipContext;

FuzzySkipContext.prototype.custom_attr = function() {
    return this.getTypedRuleContext(Custom_attrContext,0);
};
FuzzySkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFuzzySkip(this);
	}
};

FuzzySkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFuzzySkip(this);
	}
};

FuzzySkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFuzzySkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Fuzzy_optionsContext = Fuzzy_optionsContext;

SaltParser.prototype.fuzzy_options = function() {

    var localctx = new Fuzzy_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SaltParser.RULE_fuzzy_options);
    var _la = 0; // Token type
    try {
        this.state = 1952;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__24:
        case SaltParser.T__294:
        case SaltParser.T__295:
            localctx = new FuzzyFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1936;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__24 || _la===SaltParser.T__294 || _la===SaltParser.T__295)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case SaltParser.T__81:
            localctx = new FuzzyIdContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1937;
            this.match(SaltParser.T__81);
            this.state = 1938;
            this.id_param();
            break;
        case SaltParser.T__296:
            localctx = new FuzzyIdContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1939;
            this.match(SaltParser.T__296);
            this.state = 1940;
            this.periodic_ids_param();
            break;
        case SaltParser.T__273:
            localctx = new FuzzyWeightContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1941;
            this.match(SaltParser.T__273);
            this.state = 1942;
            this.lp();
            this.state = 1943;
            this.real();
            this.state = 1947;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
            if(la_===1) {
                this.state = 1944;
                this.comma();
                this.state = 1945;
                _la = this._input.LA(1);
                if(!(_la===SaltParser.T__89 || _la===SaltParser.T__297)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1949;
            this.rp();
            break;
        case SaltParser.T__326:
            localctx = new FuzzySkipContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1951;
            this.custom_attr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fieldtype_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_fieldtype_options;
    return this;
}

Fieldtype_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fieldtype_optionsContext.prototype.constructor = Fieldtype_optionsContext;


 
Fieldtype_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FieldTypeInrangeContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeInrangeContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeInrangeContext.prototype.constructor = FieldTypeInrangeContext;

SaltParser.FieldTypeInrangeContext = FieldTypeInrangeContext;

FieldTypeInrangeContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeInrangeContext.prototype.real = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RealContext);
    } else {
        return this.getTypedRuleContext(RealContext,i);
    }
};

FieldTypeInrangeContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

FieldTypeInrangeContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeInrangeContext.prototype.num_param = function() {
    return this.getTypedRuleContext(Num_paramContext,0);
};

FieldTypeInrangeContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};
FieldTypeInrangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeInrange(this);
	}
};

FieldTypeInrangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeInrange(this);
	}
};

FieldTypeInrangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeInrange(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeLikeContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeLikeContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeLikeContext.prototype.constructor = FieldTypeLikeContext;

SaltParser.FieldTypeLikeContext = FieldTypeLikeContext;

FieldTypeLikeContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeLikeContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeLikeContext.prototype.id_comma_list = function() {
    return this.getTypedRuleContext(Id_comma_listContext,0);
};
FieldTypeLikeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeLike(this);
	}
};

FieldTypeLikeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeLike(this);
	}
};

FieldTypeLikeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeLike(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeBracketsContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeBracketsContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeBracketsContext.prototype.constructor = FieldTypeBracketsContext;

SaltParser.FieldTypeBracketsContext = FieldTypeBracketsContext;

FieldTypeBracketsContext.prototype.stuff_escape_brackets = function() {
    return this.getTypedRuleContext(Stuff_escape_bracketsContext,0);
};

FieldTypeBracketsContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

FieldTypeBracketsContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};
FieldTypeBracketsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeBrackets(this);
	}
};

FieldTypeBracketsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeBrackets(this);
	}
};

FieldTypeBracketsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeBrackets(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeDateContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeDateContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeDateContext.prototype.constructor = FieldTypeDateContext;

SaltParser.FieldTypeDateContext = FieldTypeDateContext;

FieldTypeDateContext.prototype.stuff_escape_brackets = function() {
    return this.getTypedRuleContext(Stuff_escape_bracketsContext,0);
};

FieldTypeDateContext.prototype.strictdate = function() {
    return this.getTypedRuleContext(StrictdateContext,0);
};

FieldTypeDateContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

FieldTypeDateContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};
FieldTypeDateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeDate(this);
	}
};

FieldTypeDateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeDate(this);
	}
};

FieldTypeDateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeDate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeNumberlistContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeNumberlistContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeNumberlistContext.prototype.constructor = FieldTypeNumberlistContext;

SaltParser.FieldTypeNumberlistContext = FieldTypeNumberlistContext;

FieldTypeNumberlistContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeNumberlistContext.prototype.numberlist = function() {
    return this.getTypedRuleContext(NumberlistContext,0);
};

FieldTypeNumberlistContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeNumberlistContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

FieldTypeNumberlistContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};
FieldTypeNumberlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeNumberlist(this);
	}
};

FieldTypeNumberlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeNumberlist(this);
	}
};

FieldTypeNumberlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeNumberlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeParseContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeParseContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeParseContext.prototype.constructor = FieldTypeParseContext;

SaltParser.FieldTypeParseContext = FieldTypeParseContext;

FieldTypeParseContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeParseContext.prototype.parse_option = function() {
    return this.getTypedRuleContext(Parse_optionContext,0);
};

FieldTypeParseContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
FieldTypeParseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeParse(this);
	}
};

FieldTypeParseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeParse(this);
	}
};

FieldTypeParseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeParse(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeCustomContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeCustomContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeCustomContext.prototype.constructor = FieldTypeCustomContext;

SaltParser.FieldTypeCustomContext = FieldTypeCustomContext;

FieldTypeCustomContext.prototype.custom_attr_ft = function() {
    return this.getTypedRuleContext(Custom_attr_ftContext,0);
};
FieldTypeCustomContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeCustom(this);
	}
};

FieldTypeCustomContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeCustom(this);
	}
};

FieldTypeCustomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeCustom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeWithinContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeWithinContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeWithinContext.prototype.constructor = FieldTypeWithinContext;

SaltParser.FieldTypeWithinContext = FieldTypeWithinContext;

FieldTypeWithinContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeWithinContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

FieldTypeWithinContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

FieldTypeWithinContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

FieldTypeWithinContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeWithinContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};
FieldTypeWithinContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeWithin(this);
	}
};

FieldTypeWithinContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeWithin(this);
	}
};

FieldTypeWithinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeWithin(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeEnumContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeEnumContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeEnumContext.prototype.constructor = FieldTypeEnumContext;

SaltParser.FieldTypeEnumContext = FieldTypeEnumContext;

FieldTypeEnumContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeEnumContext.prototype.opt_id_list = function() {
    return this.getTypedRuleContext(Opt_id_listContext,0);
};

FieldTypeEnumContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeEnumContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

FieldTypeEnumContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};
FieldTypeEnumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeEnum(this);
	}
};

FieldTypeEnumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeEnum(this);
	}
};

FieldTypeEnumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeEnum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeFlagsContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeFlagsContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeFlagsContext.prototype.constructor = FieldTypeFlagsContext;

SaltParser.FieldTypeFlagsContext = FieldTypeFlagsContext;

FieldTypeFlagsContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeFlagsContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};

FieldTypeFlagsContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};
FieldTypeFlagsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeFlags(this);
	}
};

FieldTypeFlagsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeFlags(this);
	}
};

FieldTypeFlagsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeFlags(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeOnfailContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeOnfailContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeOnfailContext.prototype.constructor = FieldTypeOnfailContext;

SaltParser.FieldTypeOnfailContext = FieldTypeOnfailContext;

FieldTypeOnfailContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeOnfailContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeOnfailContext.prototype.onfail_flag = function() {
    return this.getTypedRuleContext(Onfail_flagContext,0);
};

FieldTypeOnfailContext.prototype.onfail_default = function() {
    return this.getTypedRuleContext(Onfail_defaultContext,0);
};

FieldTypeOnfailContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};
FieldTypeOnfailContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeOnfail(this);
	}
};

FieldTypeOnfailContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeOnfail(this);
	}
};

FieldTypeOnfailContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeOnfail(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeCustomCleanContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeCustomCleanContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeCustomCleanContext.prototype.constructor = FieldTypeCustomCleanContext;

SaltParser.FieldTypeCustomCleanContext = FieldTypeCustomCleanContext;

FieldTypeCustomCleanContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeCustomCleanContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

FieldTypeCustomCleanContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeCustomCleanContext.prototype.nestedclass = function() {
    return this.getTypedRuleContext(NestedclassContext,0);
};

FieldTypeCustomCleanContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

FieldTypeCustomCleanContext.prototype.mixed_params = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mixed_paramsContext);
    } else {
        return this.getTypedRuleContext(Mixed_paramsContext,i);
    }
};
FieldTypeCustomCleanContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeCustomClean(this);
	}
};

FieldTypeCustomCleanContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeCustomClean(this);
	}
};

FieldTypeCustomCleanContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeCustomClean(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeRegexContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeRegexContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeRegexContext.prototype.constructor = FieldTypeRegexContext;

SaltParser.FieldTypeRegexContext = FieldTypeRegexContext;

FieldTypeRegexContext.prototype.useon_stuff = function() {
    return this.getTypedRuleContext(Useon_stuffContext,0);
};

FieldTypeRegexContext.prototype.replace_section = function() {
    return this.getTypedRuleContext(Replace_sectionContext,0);
};

FieldTypeRegexContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

FieldTypeRegexContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};
FieldTypeRegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeRegex(this);
	}
};

FieldTypeRegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeRegex(this);
	}
};

FieldTypeRegexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeRegex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeSkipContext(parser, ctx) {
	Fieldtype_optionsContext.call(this, parser);
    Fieldtype_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeSkipContext.prototype = Object.create(Fieldtype_optionsContext.prototype);
FieldTypeSkipContext.prototype.constructor = FieldTypeSkipContext;

SaltParser.FieldTypeSkipContext = FieldTypeSkipContext;

FieldTypeSkipContext.prototype.useon = function() {
    return this.getTypedRuleContext(UseonContext,0);
};
FieldTypeSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeSkip(this);
	}
};

FieldTypeSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeSkip(this);
	}
};

FieldTypeSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Fieldtype_optionsContext = Fieldtype_optionsContext;

SaltParser.prototype.fieldtype_options = function() {

    var localctx = new Fieldtype_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SaltParser.RULE_fieldtype_options);
    var _la = 0; // Token type
    try {
        this.state = 2102;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__298:
        case SaltParser.T__299:
            localctx = new FieldTypeBracketsContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1954;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__298 || _la===SaltParser.T__299)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1955;
            this.match(SaltParser.T__71);
            this.state = 1956;
            this.stuff_escape_brackets();
            this.state = 1960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__340 || _la===SaltParser.WS) {
                this.state = 1957;
                this.comma();
                this.state = 1958;
                this.custinfo_options();
            }

            this.state = 1962;
            this.match(SaltParser.T__72);
            break;
        case SaltParser.T__144:
        case SaltParser.T__300:
            localctx = new FieldTypeBracketsContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1964;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__144 || _la===SaltParser.T__300)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1965;
            this.match(SaltParser.T__71);
            this.state = 1966;
            this.stuff_escape_brackets();
            this.state = 1967;
            this.match(SaltParser.T__72);
            break;
        case SaltParser.T__13:
        case SaltParser.T__301:
        case SaltParser.T__302:
            localctx = new FieldTypeFlagsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1969;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__13 || _la===SaltParser.T__301 || _la===SaltParser.T__302)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1974;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
            if(la_===1) {
                this.state = 1970;
                this.lp();
                this.state = 1971;
                this.custinfo_options();
                this.state = 1972;
                this.rp();

            }
            break;
        case SaltParser.T__159:
            localctx = new FieldTypeLikeContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1976;
            this.match(SaltParser.T__159);
            this.state = 1977;
            this.lp();
            this.state = 1979;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.ID) {
                this.state = 1978;
                this.id_comma_list();
            }

            this.state = 1981;
            this.rp();
            break;
        case SaltParser.T__303:
            localctx = new FieldTypeEnumContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1983;
            this.match(SaltParser.T__303);
            this.state = 1984;
            this.lp();
            this.state = 1985;
            this.opt_id_list();
            this.state = 1989;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
            if(la_===1) {
                this.state = 1986;
                this.comma();
                this.state = 1987;
                this.custinfo_options();

            }
            this.state = 1991;
            this.rp();
            break;
        case SaltParser.T__259:
            localctx = new FieldTypeEnumContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1993;
            this.match(SaltParser.T__259);
            this.state = 1994;
            this.lp();
            this.state = 1995;
            this.opt_id_list();
            this.state = 1996;
            this.rp();
            break;
        case SaltParser.T__235:
            localctx = new FieldTypeWithinContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 1998;
            this.match(SaltParser.T__235);
            this.state = 1999;
            this.lp();
            this.state = 2000;
            this.periodic_ids();
            this.state = 2001;
            this.comma();
            this.state = 2002;
            this.match(SaltParser.ID);
            this.state = 2006;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
            if(la_===1) {
                this.state = 2003;
                this.comma();
                this.state = 2004;
                this.custinfo_options();

            }
            this.state = 2008;
            this.rp();
            break;
        case SaltParser.T__187:
            localctx = new FieldTypeOnfailContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 2010;
            this.match(SaltParser.T__187);
            this.state = 2011;
            this.lp();
            this.state = 2014;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
            if(la_===1) {
                this.state = 2012;
                this.match(SaltParser.T__141);
                this.state = 2013;
                this.comma();

            }
            this.state = 2018;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SaltParser.T__141:
            case SaltParser.T__144:
            case SaltParser.T__188:
            case SaltParser.T__266:
                this.state = 2016;
                this.onfail_flag();
                break;
            case SaltParser.T__317:
                this.state = 2017;
                this.onfail_default();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2020;
            this.rp();
            break;
        case SaltParser.T__304:
            localctx = new FieldTypeParseContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 2022;
            this.match(SaltParser.T__304);
            this.state = 2023;
            this.lp();
            this.state = 2024;
            this.parse_option();
            this.state = 2025;
            this.rp();
            break;
        case SaltParser.T__305:
        case SaltParser.T__306:
            localctx = new FieldTypeNumberlistContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 2027;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__305 || _la===SaltParser.T__306)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2028;
            this.lp();
            this.state = 2029;
            this.numberlist();
            this.state = 2033;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
            if(la_===1) {
                this.state = 2030;
                this.comma();
                this.state = 2031;
                this.custinfo_options();

            }
            this.state = 2035;
            this.rp();
            break;
        case SaltParser.T__307:
            localctx = new FieldTypeInrangeContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 2037;
            this.match(SaltParser.T__307);
            this.state = 2038;
            this.lp();
            this.state = 2039;
            this.real();
            this.state = 2040;
            this.comma();
            this.state = 2041;
            this.real();
            this.state = 2046;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
            if(la_===1) {
                this.state = 2042;
                this.comma();
                this.state = 2043;
                this.match(SaltParser.T__308);
                this.state = 2044;
                this.num_param();

            }
            this.state = 2051;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
            if(la_===1) {
                this.state = 2048;
                this.comma();
                this.state = 2049;
                this.custinfo_options();

            }
            this.state = 2053;
            this.rp();
            break;
        case SaltParser.T__309:
            localctx = new FieldTypeDateContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 2055;
            this.match(SaltParser.T__309);
            this.state = 2056;
            this.match(SaltParser.T__71);
            this.state = 2057;
            this.stuff_escape_brackets();
            this.state = 2059;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
            if(la_===1) {
                this.state = 2058;
                this.strictdate();

            }
            this.state = 2064;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__340 || _la===SaltParser.WS) {
                this.state = 2061;
                this.comma();
                this.state = 2062;
                this.custinfo_options();
            }

            this.state = 2066;
            this.match(SaltParser.T__72);
            break;
        case SaltParser.T__310:
            localctx = new FieldTypeRegexContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 2068;
            this.match(SaltParser.T__310);
            this.state = 2069;
            this.match(SaltParser.T__71);
            this.state = 2070;
            this.match(SaltParser.T__311);
            this.state = 2072;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
            if(la_===1) {
                this.state = 2071;
                this.useon_stuff();

            }
            this.state = 2074;
            this.match(SaltParser.T__311);
            this.state = 2076;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
            if(la_===1) {
                this.state = 2075;
                this.replace_section();

            }
            this.state = 2081;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__340 || _la===SaltParser.WS) {
                this.state = 2078;
                this.comma();
                this.state = 2079;
                this.custinfo_options();
            }

            this.state = 2083;
            this.match(SaltParser.T__72);
            break;
        case SaltParser.T__312:
            localctx = new FieldTypeCustomCleanContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 2084;
            this.match(SaltParser.T__312);
            this.state = 2085;
            this.lp();
            this.state = 2086;
            this.periodic_ids();
            this.state = 2088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__163) {
                this.state = 2087;
                this.nestedclass();
            }

            this.state = 2095;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2090;
                    this.comma();
                    this.state = 2091;
                    this.mixed_params(); 
                }
                this.state = 2097;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
            }

            this.state = 2098;
            this.rp();
            break;
        case SaltParser.T__337:
            localctx = new FieldTypeSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 2100;
            this.useon();
            break;
        case SaltParser.T__326:
            localctx = new FieldTypeCustomContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 2101;
            this.custom_attr_ft();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Enum_detect_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_enum_detect_option;
    return this;
}

Enum_detect_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Enum_detect_optionContext.prototype.constructor = Enum_detect_optionContext;

Enum_detect_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Enum_detect_optionContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Enum_detect_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Enum_detect_optionContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Enum_detect_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterEnum_detect_option(this);
	}
};

Enum_detect_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitEnum_detect_option(this);
	}
};

Enum_detect_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitEnum_detect_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Enum_detect_optionContext = Enum_detect_optionContext;

SaltParser.prototype.enum_detect_option = function() {

    var localctx = new Enum_detect_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SaltParser.RULE_enum_detect_option);
    try {
        this.state = 2119;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__313:
            this.enterOuterAlt(localctx, 1);
            this.state = 2104;
            this.match(SaltParser.T__313);
            this.state = 2105;
            this.lp();
            this.state = 2106;
            this.match(SaltParser.INT);
            this.state = 2107;
            this.rp();
            break;
        case SaltParser.T__314:
            this.enterOuterAlt(localctx, 2);
            this.state = 2109;
            this.match(SaltParser.T__314);
            this.state = 2110;
            this.lp();
            this.state = 2111;
            this.match(SaltParser.INT);
            this.state = 2112;
            this.rp();
            break;
        case SaltParser.T__315:
            this.enterOuterAlt(localctx, 3);
            this.state = 2114;
            this.match(SaltParser.T__315);
            this.state = 2115;
            this.lp();
            this.state = 2116;
            this.match(SaltParser.ID);
            this.state = 2117;
            this.rp();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Fieldtypedetect_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_fieldtypedetect_options;
    return this;
}

Fieldtypedetect_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Fieldtypedetect_optionsContext.prototype.constructor = Fieldtypedetect_optionsContext;


 
Fieldtypedetect_optionsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FieldTypeDetectEnumContext(parser, ctx) {
	Fieldtypedetect_optionsContext.call(this, parser);
    Fieldtypedetect_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeDetectEnumContext.prototype = Object.create(Fieldtypedetect_optionsContext.prototype);
FieldTypeDetectEnumContext.prototype.constructor = FieldTypeDetectEnumContext;

SaltParser.FieldTypeDetectEnumContext = FieldTypeDetectEnumContext;

FieldTypeDetectEnumContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

FieldTypeDetectEnumContext.prototype.enum_detect_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Enum_detect_optionContext);
    } else {
        return this.getTypedRuleContext(Enum_detect_optionContext,i);
    }
};

FieldTypeDetectEnumContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

FieldTypeDetectEnumContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};
FieldTypeDetectEnumContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeDetectEnum(this);
	}
};

FieldTypeDetectEnumContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeDetectEnum(this);
	}
};

FieldTypeDetectEnumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeDetectEnum(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeDetectSkipContext(parser, ctx) {
	Fieldtypedetect_optionsContext.call(this, parser);
    Fieldtypedetect_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeDetectSkipContext.prototype = Object.create(Fieldtypedetect_optionsContext.prototype);
FieldTypeDetectSkipContext.prototype.constructor = FieldTypeDetectSkipContext;

SaltParser.FieldTypeDetectSkipContext = FieldTypeDetectSkipContext;

FieldTypeDetectSkipContext.prototype.useon = function() {
    return this.getTypedRuleContext(UseonContext,0);
};
FieldTypeDetectSkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeDetectSkip(this);
	}
};

FieldTypeDetectSkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeDetectSkip(this);
	}
};

FieldTypeDetectSkipContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeDetectSkip(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FieldTypeDetectFlagContext(parser, ctx) {
	Fieldtypedetect_optionsContext.call(this, parser);
    Fieldtypedetect_optionsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldTypeDetectFlagContext.prototype = Object.create(Fieldtypedetect_optionsContext.prototype);
FieldTypeDetectFlagContext.prototype.constructor = FieldTypeDetectFlagContext;

SaltParser.FieldTypeDetectFlagContext = FieldTypeDetectFlagContext;

FieldTypeDetectFlagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterFieldTypeDetectFlag(this);
	}
};

FieldTypeDetectFlagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitFieldTypeDetectFlag(this);
	}
};

FieldTypeDetectFlagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitFieldTypeDetectFlag(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SaltParser.Fieldtypedetect_optionsContext = Fieldtypedetect_optionsContext;

SaltParser.prototype.fieldtypedetect_options = function() {

    var localctx = new Fieldtypedetect_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SaltParser.RULE_fieldtypedetect_options);
    try {
        this.state = 2136;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__303:
            localctx = new FieldTypeDetectEnumContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 2121;
            this.match(SaltParser.T__303);
            this.state = 2122;
            this.lp();
            this.state = 2123;
            this.enum_detect_option();
            this.state = 2129;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 2124;
                    this.comma();
                    this.state = 2125;
                    this.enum_detect_option(); 
                }
                this.state = 2131;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
            }

            this.state = 2132;
            this.rp();
            break;
        case SaltParser.T__316:
            localctx = new FieldTypeDetectFlagContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 2134;
            this.match(SaltParser.T__316);
            break;
        case SaltParser.T__337:
            localctx = new FieldTypeDetectSkipContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 2135;
            this.useon();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Onfail_flagContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_onfail_flag;
    return this;
}

Onfail_flagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Onfail_flagContext.prototype.constructor = Onfail_flagContext;


Onfail_flagContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOnfail_flag(this);
	}
};

Onfail_flagContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOnfail_flag(this);
	}
};

Onfail_flagContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOnfail_flag(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Onfail_flagContext = Onfail_flagContext;

SaltParser.prototype.onfail_flag = function() {

    var localctx = new Onfail_flagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SaltParser.RULE_onfail_flag);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2138;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__141 || _la===SaltParser.T__144 || _la===SaltParser.T__188 || _la===SaltParser.T__266)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Onfail_defaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_onfail_default;
    return this;
}

Onfail_defaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Onfail_defaultContext.prototype.constructor = Onfail_defaultContext;

Onfail_defaultContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Onfail_defaultContext.prototype.useon_stuff = function() {
    return this.getTypedRuleContext(Useon_stuffContext,0);
};

Onfail_defaultContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Onfail_defaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOnfail_default(this);
	}
};

Onfail_defaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOnfail_default(this);
	}
};

Onfail_defaultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOnfail_default(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Onfail_defaultContext = Onfail_defaultContext;

SaltParser.prototype.onfail_default = function() {

    var localctx = new Onfail_defaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, SaltParser.RULE_onfail_default);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2140;
        this.match(SaltParser.T__317);
        this.state = 2141;
        this.lp();
        this.state = 2142;
        this.useon_stuff();
        this.state = 2143;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaxblocksizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_maxblocksize;
    return this;
}

MaxblocksizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaxblocksizeContext.prototype.constructor = MaxblocksizeContext;

MaxblocksizeContext.prototype.co = function() {
    return this.getTypedRuleContext(CoContext,0);
};

MaxblocksizeContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.INT);
    } else {
        return this.getToken(SaltParser.INT, i);
    }
};


MaxblocksizeContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

MaxblocksizeContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

MaxblocksizeContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

MaxblocksizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterMaxblocksize(this);
	}
};

MaxblocksizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitMaxblocksize(this);
	}
};

MaxblocksizeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitMaxblocksize(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.MaxblocksizeContext = MaxblocksizeContext;

SaltParser.prototype.maxblocksize = function() {

    var localctx = new MaxblocksizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, SaltParser.RULE_maxblocksize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2145;
        this.match(SaltParser.T__318);
        this.state = 2162;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2146;
            this.co();
            this.state = 2147;
            this.match(SaltParser.INT);
            this.state = 2151;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
            if(la_===1) {
                this.state = 2148;
                this.comma();
                this.state = 2149;
                this.match(SaltParser.INT);

            }
            break;

        case 2:
            this.state = 2153;
            this.lp();
            this.state = 2154;
            this.match(SaltParser.INT);
            this.state = 2158;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
            if(la_===1) {
                this.state = 2155;
                this.comma();
                this.state = 2156;
                this.match(SaltParser.INT);

            }
            this.state = 2160;
            this.rp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parse_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_parse_option;
    return this;
}

Parse_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parse_optionContext.prototype.constructor = Parse_optionContext;

Parse_optionContext.prototype.parse_auto = function() {
    return this.getTypedRuleContext(Parse_autoContext,0);
};

Parse_optionContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

Parse_optionContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Parse_optionContext.prototype.parse_attr = function() {
    return this.getTypedRuleContext(Parse_attrContext,0);
};

Parse_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterParse_option(this);
	}
};

Parse_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitParse_option(this);
	}
};

Parse_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitParse_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Parse_optionContext = Parse_optionContext;

SaltParser.prototype.parse_option = function() {

    var localctx = new Parse_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, SaltParser.RULE_parse_option);
    try {
        this.state = 2171;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__161:
            this.enterOuterAlt(localctx, 1);
            this.state = 2164;
            this.parse_auto();
            break;
        case SaltParser.ID:
            this.enterOuterAlt(localctx, 2);
            this.state = 2165;
            this.periodic_ids();
            this.state = 2169;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
            if(la_===1) {
                this.state = 2166;
                this.comma();
                this.state = 2167;
                this.parse_attr();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parse_attrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_parse_attr;
    return this;
}

Parse_attrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parse_attrContext.prototype.constructor = Parse_attrContext;

Parse_attrContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

Parse_attrContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterParse_attr(this);
	}
};

Parse_attrContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitParse_attr(this);
	}
};

Parse_attrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitParse_attr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Parse_attrContext = Parse_attrContext;

SaltParser.prototype.parse_attr = function() {

    var localctx = new Parse_attrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, SaltParser.RULE_parse_attr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.T__93 || _la===SaltParser.T__94) {
            this.state = 2173;
            _la = this._input.LA(1);
            if(!(_la===SaltParser.T__93 || _la===SaltParser.T__94)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2176;
        this.periodic_ids();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Parse_autoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_parse_auto;
    return this;
}

Parse_autoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Parse_autoContext.prototype.constructor = Parse_autoContext;

Parse_autoContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Parse_autoContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterParse_auto(this);
	}
};

Parse_autoContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitParse_auto(this);
	}
};

Parse_autoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitParse_auto(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Parse_autoContext = Parse_autoContext;

SaltParser.prototype.parse_auto = function() {

    var localctx = new Parse_autoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, SaltParser.RULE_parse_auto);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2178;
        this.match(SaltParser.T__161);
        this.state = 2180;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.ID) {
            this.state = 2179;
            this.match(SaltParser.ID);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Recorddate_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_recorddate_option;
    return this;
}

Recorddate_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Recorddate_optionContext.prototype.constructor = Recorddate_optionContext;

Recorddate_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Recorddate_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Recorddate_optionContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Recorddate_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRecorddate_option(this);
	}
};

Recorddate_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRecorddate_option(this);
	}
};

Recorddate_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRecorddate_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Recorddate_optionContext = Recorddate_optionContext;

SaltParser.prototype.recorddate_option = function() {

    var localctx = new Recorddate_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, SaltParser.RULE_recorddate_option);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2182;
        this.match(SaltParser.T__319);
        this.state = 2183;
        this.lp();
        this.state = 2184;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.T__150 || _la===SaltParser.T__291)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2188;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
        if(la_===1) {
            this.state = 2185;
            this.comma();
            this.state = 2186;
            _la = this._input.LA(1);
            if(!(((((_la - 321)) & ~0x1f) == 0 && ((1 << (_la - 321)) & ((1 << (SaltParser.T__320 - 321)) | (1 << (SaltParser.T__321 - 321)) | (1 << (SaltParser.T__322 - 321)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 2190;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StrictdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_strictdate;
    return this;
}

StrictdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrictdateContext.prototype.constructor = StrictdateContext;

StrictdateContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

StrictdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterStrictdate(this);
	}
};

StrictdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitStrictdate(this);
	}
};

StrictdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitStrictdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.StrictdateContext = StrictdateContext;

SaltParser.prototype.strictdate = function() {

    var localctx = new StrictdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, SaltParser.RULE_strictdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2192;
        this.comma();
        this.state = 2193;
        this.match(SaltParser.T__323);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Replace_sectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_replace_section;
    return this;
}

Replace_sectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Replace_sectionContext.prototype.constructor = Replace_sectionContext;

Replace_sectionContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Replace_sectionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Replace_sectionContext.prototype.pip_string = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Pip_stringContext);
    } else {
        return this.getTypedRuleContext(Pip_stringContext,i);
    }
};

Replace_sectionContext.prototype.goes_to = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Goes_toContext);
    } else {
        return this.getTypedRuleContext(Goes_toContext,i);
    }
};

Replace_sectionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Replace_sectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterReplace_section(this);
	}
};

Replace_sectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitReplace_section(this);
	}
};

Replace_sectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitReplace_section(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Replace_sectionContext = Replace_sectionContext;

SaltParser.prototype.replace_section = function() {

    var localctx = new Replace_sectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, SaltParser.RULE_replace_section);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2195;
        this.comma();
        this.state = 2196;
        this.match(SaltParser.T__267);
        this.state = 2197;
        this.lp();
        this.state = 2198;
        this.pip_string();
        this.state = 2199;
        this.goes_to();
        this.state = 2200;
        this.pip_string();
        this.state = 2208;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,234,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2201;
                this.comma();
                this.state = 2202;
                this.pip_string();
                this.state = 2203;
                this.goes_to();
                this.state = 2204;
                this.pip_string(); 
            }
            this.state = 2210;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,234,this._ctx);
        }

        this.state = 2211;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Goes_toContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_goes_to;
    return this;
}

Goes_toContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Goes_toContext.prototype.constructor = Goes_toContext;

Goes_toContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


Goes_toContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterGoes_to(this);
	}
};

Goes_toContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitGoes_to(this);
	}
};

Goes_toContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitGoes_to(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Goes_toContext = Goes_toContext;

SaltParser.prototype.goes_to = function() {

    var localctx = new Goes_toContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, SaltParser.RULE_goes_to);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2214;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 2213;
            this.match(SaltParser.WS);
        }

        this.state = 2216;
        this.match(SaltParser.T__324);
        this.state = 2218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 2217;
            this.match(SaltParser.WS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Periodic_ids_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_periodic_ids_param;
    return this;
}

Periodic_ids_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Periodic_ids_paramContext.prototype.constructor = Periodic_ids_paramContext;

Periodic_ids_paramContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Periodic_ids_paramContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

Periodic_ids_paramContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Periodic_ids_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterPeriodic_ids_param(this);
	}
};

Periodic_ids_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitPeriodic_ids_param(this);
	}
};

Periodic_ids_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitPeriodic_ids_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Periodic_ids_paramContext = Periodic_ids_paramContext;

SaltParser.prototype.periodic_ids_param = function() {

    var localctx = new Periodic_ids_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, SaltParser.RULE_periodic_ids_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2220;
        this.lp();
        this.state = 2221;
        this.periodic_ids();
        this.state = 2222;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_numberlist;
    return this;
}

NumberlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberlistContext.prototype.constructor = NumberlistContext;

NumberlistContext.prototype.intrange = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IntrangeContext);
    } else {
        return this.getTypedRuleContext(IntrangeContext,i);
    }
};

NumberlistContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

NumberlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNumberlist(this);
	}
};

NumberlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNumberlist(this);
	}
};

NumberlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNumberlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.NumberlistContext = NumberlistContext;

SaltParser.prototype.numberlist = function() {

    var localctx = new NumberlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, SaltParser.RULE_numberlist);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2224;
        this.intrange();
        this.state = 2230;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2225;
                this.comma();
                this.state = 2226;
                this.intrange(); 
            }
            this.state = 2232;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntrangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_intrange;
    return this;
}

IntrangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntrangeContext.prototype.constructor = IntrangeContext;

IntrangeContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.INT);
    } else {
        return this.getToken(SaltParser.INT, i);
    }
};


IntrangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterIntrange(this);
	}
};

IntrangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitIntrange(this);
	}
};

IntrangeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitIntrange(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.IntrangeContext = IntrangeContext;

SaltParser.prototype.intrange = function() {

    var localctx = new IntrangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, SaltParser.RULE_intrange);
    var _la = 0; // Token type
    try {
        this.state = 2239;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2233;
            this.match(SaltParser.INT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2234;
            this.match(SaltParser.INT);
            this.state = 2235;
            this.match(SaltParser.T__325);
            this.state = 2237;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.INT) {
                this.state = 2236;
                this.match(SaltParser.INT);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Opt_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_opt_param;
    return this;
}

Opt_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Opt_paramContext.prototype.constructor = Opt_paramContext;

Opt_paramContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Opt_paramContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Opt_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOpt_param(this);
	}
};

Opt_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOpt_param(this);
	}
};

Opt_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOpt_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Opt_paramContext = Opt_paramContext;

SaltParser.prototype.opt_param = function() {

    var localctx = new Opt_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, SaltParser.RULE_opt_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2241;
        this.lp();
        this.state = 2242;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Id_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_id_param;
    return this;
}

Id_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_paramContext.prototype.constructor = Id_paramContext;

Id_paramContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Id_paramContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Id_paramContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Id_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterId_param(this);
	}
};

Id_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitId_param(this);
	}
};

Id_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitId_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Id_paramContext = Id_paramContext;

SaltParser.prototype.id_param = function() {

    var localctx = new Id_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, SaltParser.RULE_id_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2244;
        this.lp();
        this.state = 2245;
        this.match(SaltParser.ID);
        this.state = 2246;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Num_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_num_param;
    return this;
}

Num_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Num_paramContext.prototype.constructor = Num_paramContext;

Num_paramContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Num_paramContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Num_paramContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Num_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNum_param(this);
	}
};

Num_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNum_param(this);
	}
};

Num_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNum_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Num_paramContext = Num_paramContext;

SaltParser.prototype.num_param = function() {

    var localctx = new Num_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, SaltParser.RULE_num_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2248;
        this.lp();
        this.state = 2249;
        this.match(SaltParser.INT);
        this.state = 2250;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Neg_num_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_neg_num_param;
    return this;
}

Neg_num_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Neg_num_paramContext.prototype.constructor = Neg_num_paramContext;

Neg_num_paramContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Neg_num_paramContext.prototype.NINT = function() {
    return this.getToken(SaltParser.NINT, 0);
};

Neg_num_paramContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Neg_num_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNeg_num_param(this);
	}
};

Neg_num_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNeg_num_param(this);
	}
};

Neg_num_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNeg_num_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Neg_num_paramContext = Neg_num_paramContext;

SaltParser.prototype.neg_num_param = function() {

    var localctx = new Neg_num_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, SaltParser.RULE_neg_num_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2252;
        this.lp();
        this.state = 2253;
        this.match(SaltParser.NINT);
        this.state = 2254;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Custom_attrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_custom_attr;
    return this;
}

Custom_attrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Custom_attrContext.prototype.constructor = Custom_attrContext;

Custom_attrContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Custom_attrContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

Custom_attrContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Custom_attrContext.prototype.nestedclass = function() {
    return this.getTypedRuleContext(NestedclassContext,0);
};

Custom_attrContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Custom_attrContext.prototype.param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParamContext);
    } else {
        return this.getTypedRuleContext(ParamContext,i);
    }
};

Custom_attrContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCustom_attr(this);
	}
};

Custom_attrContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCustom_attr(this);
	}
};

Custom_attrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCustom_attr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Custom_attrContext = Custom_attrContext;

SaltParser.prototype.custom_attr = function() {

    var localctx = new Custom_attrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, SaltParser.RULE_custom_attr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2256;
        this.match(SaltParser.T__326);
        this.state = 2257;
        this.lp();
        this.state = 2258;
        this.periodic_ids();
        this.state = 2260;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.T__163) {
            this.state = 2259;
            this.nestedclass();
        }

        this.state = 2267;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,241,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2262;
                this.comma();
                this.state = 2263;
                this.param(); 
            }
            this.state = 2269;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,241,this._ctx);
        }

        this.state = 2270;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Custom_attr_ftContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_custom_attr_ft;
    return this;
}

Custom_attr_ftContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Custom_attr_ftContext.prototype.constructor = Custom_attr_ftContext;

Custom_attr_ftContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Custom_attr_ftContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

Custom_attr_ftContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Custom_attr_ftContext.prototype.nestedclass = function() {
    return this.getTypedRuleContext(NestedclassContext,0);
};

Custom_attr_ftContext.prototype.condition_operator = function() {
    return this.getTypedRuleContext(Condition_operatorContext,0);
};

Custom_attr_ftContext.prototype.signed_num = function() {
    return this.getTypedRuleContext(Signed_numContext,0);
};

Custom_attr_ftContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Custom_attr_ftContext.prototype.mixed_params = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mixed_paramsContext);
    } else {
        return this.getTypedRuleContext(Mixed_paramsContext,i);
    }
};

Custom_attr_ftContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};

Custom_attr_ftContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


Custom_attr_ftContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCustom_attr_ft(this);
	}
};

Custom_attr_ftContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCustom_attr_ft(this);
	}
};

Custom_attr_ftContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCustom_attr_ft(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Custom_attr_ftContext = Custom_attr_ftContext;

SaltParser.prototype.custom_attr_ft = function() {

    var localctx = new Custom_attr_ftContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, SaltParser.RULE_custom_attr_ft);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2272;
        this.match(SaltParser.T__326);
        this.state = 2273;
        this.lp();
        this.state = 2274;
        this.periodic_ids();
        this.state = 2276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.T__163) {
            this.state = 2275;
            this.nestedclass();
        }

        this.state = 2287;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
        if(la_===1) {
            this.state = 2279;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.WS) {
                this.state = 2278;
                this.match(SaltParser.WS);
            }

            this.state = 2281;
            this.condition_operator();
            this.state = 2283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.WS) {
                this.state = 2282;
                this.match(SaltParser.WS);
            }

            this.state = 2285;
            this.signed_num();

        }
        this.state = 2297;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,247,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2289;
                this.comma();
                this.state = 2291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SaltParser.WS) {
                    this.state = 2290;
                    this.match(SaltParser.WS);
                }

                this.state = 2293;
                this.mixed_params(); 
            }
            this.state = 2299;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,247,this._ctx);
        }

        this.state = 2303;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
        if(la_===1) {
            this.state = 2300;
            this.comma();
            this.state = 2301;
            this.custinfo_options();

        }
        this.state = 2305;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Custom_attr_dtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_custom_attr_dt;
    return this;
}

Custom_attr_dtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Custom_attr_dtContext.prototype.constructor = Custom_attr_dtContext;

Custom_attr_dtContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Custom_attr_dtContext.prototype.periodic_ids = function() {
    return this.getTypedRuleContext(Periodic_idsContext,0);
};

Custom_attr_dtContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Custom_attr_dtContext.prototype.nestedclass = function() {
    return this.getTypedRuleContext(NestedclassContext,0);
};

Custom_attr_dtContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Custom_attr_dtContext.prototype.mixed_params = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Mixed_paramsContext);
    } else {
        return this.getTypedRuleContext(Mixed_paramsContext,i);
    }
};

Custom_attr_dtContext.prototype.custinfo_options = function() {
    return this.getTypedRuleContext(Custinfo_optionsContext,0);
};

Custom_attr_dtContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


Custom_attr_dtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCustom_attr_dt(this);
	}
};

Custom_attr_dtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCustom_attr_dt(this);
	}
};

Custom_attr_dtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCustom_attr_dt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Custom_attr_dtContext = Custom_attr_dtContext;

SaltParser.prototype.custom_attr_dt = function() {

    var localctx = new Custom_attr_dtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, SaltParser.RULE_custom_attr_dt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2307;
        this.match(SaltParser.T__326);
        this.state = 2308;
        this.lp();
        this.state = 2309;
        this.periodic_ids();
        this.state = 2311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.T__163) {
            this.state = 2310;
            this.nestedclass();
        }

        this.state = 2321;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,251,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2313;
                this.comma();
                this.state = 2315;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SaltParser.WS) {
                    this.state = 2314;
                    this.match(SaltParser.WS);
                }

                this.state = 2317;
                this.mixed_params(); 
            }
            this.state = 2323;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,251,this._ctx);
        }

        this.state = 2327;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
        if(la_===1) {
            this.state = 2324;
            this.comma();
            this.state = 2325;
            this.custinfo_options();

        }
        this.state = 2329;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NestedclassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_nestedclass;
    return this;
}

NestedclassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestedclassContext.prototype.constructor = NestedclassContext;

NestedclassContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

NestedclassContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNestedclass(this);
	}
};

NestedclassContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNestedclass(this);
	}
};

NestedclassContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNestedclass(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.NestedclassContext = NestedclassContext;

SaltParser.prototype.nestedclass = function() {

    var localctx = new NestedclassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, SaltParser.RULE_nestedclass);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2331;
        this.match(SaltParser.T__163);
        this.state = 2332;
        this.match(SaltParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Mixed_paramsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_mixed_params;
    return this;
}

Mixed_paramsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Mixed_paramsContext.prototype.constructor = Mixed_paramsContext;

Mixed_paramsContext.prototype.param = function() {
    return this.getTypedRuleContext(ParamContext,0);
};

Mixed_paramsContext.prototype.pip_string = function() {
    return this.getTypedRuleContext(Pip_stringContext,0);
};

Mixed_paramsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterMixed_params(this);
	}
};

Mixed_paramsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitMixed_params(this);
	}
};

Mixed_paramsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitMixed_params(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Mixed_paramsContext = Mixed_paramsContext;

SaltParser.prototype.mixed_params = function() {

    var localctx = new Mixed_paramsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, SaltParser.RULE_mixed_params);
    try {
        this.state = 2336;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.INT:
        case SaltParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 2334;
            this.param();
            break;
        case SaltParser.T__311:
            this.enterOuterAlt(localctx, 2);
            this.state = 2335;
            this.pip_string();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParamContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_param;
    return this;
}

ParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParamContext.prototype.constructor = ParamContext;

ParamContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

ParamContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

ParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterParam(this);
	}
};

ParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitParam(this);
	}
};

ParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.ParamContext = ParamContext;

SaltParser.prototype.param = function() {

    var localctx = new ParamContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, SaltParser.RULE_param);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2338;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.INT || _la===SaltParser.ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Signed_realContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_signed_real;
    return this;
}

Signed_realContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_realContext.prototype.constructor = Signed_realContext;

Signed_realContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Signed_realContext.prototype.NINT = function() {
    return this.getToken(SaltParser.NINT, 0);
};

Signed_realContext.prototype.REAL = function() {
    return this.getToken(SaltParser.REAL, 0);
};

Signed_realContext.prototype.NREAL = function() {
    return this.getToken(SaltParser.NREAL, 0);
};

Signed_realContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSigned_real(this);
	}
};

Signed_realContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSigned_real(this);
	}
};

Signed_realContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSigned_real(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Signed_realContext = Signed_realContext;

SaltParser.prototype.signed_real = function() {

    var localctx = new Signed_realContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, SaltParser.RULE_signed_real);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2340;
        _la = this._input.LA(1);
        if(!(((((_la - 345)) & ~0x1f) == 0 && ((1 << (_la - 345)) & ((1 << (SaltParser.INT - 345)) | (1 << (SaltParser.NINT - 345)) | (1 << (SaltParser.REAL - 345)) | (1 << (SaltParser.NREAL - 345)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RealContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_real;
    return this;
}

RealContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RealContext.prototype.constructor = RealContext;

RealContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

RealContext.prototype.REAL = function() {
    return this.getToken(SaltParser.REAL, 0);
};

RealContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterReal(this);
	}
};

RealContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitReal(this);
	}
};

RealContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitReal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.RealContext = RealContext;

SaltParser.prototype.real = function() {

    var localctx = new RealContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, SaltParser.RULE_real);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2342;
        _la = this._input.LA(1);
        if(!(_la===SaltParser.INT || _la===SaltParser.REAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dashed_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_dashed_id;
    return this;
}

Dashed_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dashed_idContext.prototype.constructor = Dashed_idContext;

Dashed_idContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


Dashed_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterDashed_id(this);
	}
};

Dashed_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitDashed_id(this);
	}
};

Dashed_idContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitDashed_id(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Dashed_idContext = Dashed_idContext;

SaltParser.prototype.dashed_id = function() {

    var localctx = new Dashed_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, SaltParser.RULE_dashed_id);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2344;
        this.match(SaltParser.ID);
        this.state = 2349;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SaltParser.T__97) {
            this.state = 2345;
            this.match(SaltParser.T__97);
            this.state = 2346;
            this.match(SaltParser.ID);
            this.state = 2351;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Id_spec_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_id_spec_list;
    return this;
}

Id_spec_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_spec_listContext.prototype.constructor = Id_spec_listContext;

Id_spec_listContext.prototype.id_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Id_specContext);
    } else {
        return this.getTypedRuleContext(Id_specContext,i);
    }
};

Id_spec_listContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Id_spec_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterId_spec_list(this);
	}
};

Id_spec_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitId_spec_list(this);
	}
};

Id_spec_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitId_spec_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Id_spec_listContext = Id_spec_listContext;

SaltParser.prototype.id_spec_list = function() {

    var localctx = new Id_spec_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, SaltParser.RULE_id_spec_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2352;
        this.id_spec();
        this.state = 2358;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,255,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2353;
                this.comma();
                this.state = 2354;
                this.id_spec(); 
            }
            this.state = 2360;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,255,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Id_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_id_spec;
    return this;
}

Id_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_specContext.prototype.constructor = Id_specContext;

Id_specContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Id_specContext.prototype.co = function() {
    return this.getTypedRuleContext(CoContext,0);
};

Id_specContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Id_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterId_spec(this);
	}
};

Id_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitId_spec(this);
	}
};

Id_specContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitId_spec(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Id_specContext = Id_specContext;

SaltParser.prototype.id_spec = function() {

    var localctx = new Id_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, SaltParser.RULE_id_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2361;
        this.match(SaltParser.ID);
        this.state = 2362;
        this.co();
        this.state = 2363;
        this.match(SaltParser.INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Id_comma_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_id_comma_list;
    return this;
}

Id_comma_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_comma_listContext.prototype.constructor = Id_comma_listContext;

Id_comma_listContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


Id_comma_listContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Id_comma_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterId_comma_list(this);
	}
};

Id_comma_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitId_comma_list(this);
	}
};

Id_comma_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitId_comma_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Id_comma_listContext = Id_comma_listContext;

SaltParser.prototype.id_comma_list = function() {

    var localctx = new Id_comma_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, SaltParser.RULE_id_comma_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2365;
        this.match(SaltParser.ID);
        this.state = 2371;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,256,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2366;
                this.comma();
                this.state = 2367;
                this.match(SaltParser.ID); 
            }
            this.state = 2373;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,256,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Id_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_id_list;
    return this;
}

Id_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Id_listContext.prototype.constructor = Id_listContext;

Id_listContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


Id_listContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

Id_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterId_list(this);
	}
};

Id_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitId_list(this);
	}
};

Id_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitId_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Id_listContext = Id_listContext;

SaltParser.prototype.id_list = function() {

    var localctx = new Id_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, SaltParser.RULE_id_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2374;
        this.match(SaltParser.ID);
        this.state = 2380;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,257,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2375;
                this.co();
                this.state = 2376;
                this.match(SaltParser.ID); 
            }
            this.state = 2382;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,257,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Basis_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_basis_option;
    return this;
}

Basis_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Basis_optionContext.prototype.constructor = Basis_optionContext;

Basis_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Basis_optionContext.prototype.basis_list = function() {
    return this.getTypedRuleContext(Basis_listContext,0);
};

Basis_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Basis_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBasis_option(this);
	}
};

Basis_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBasis_option(this);
	}
};

Basis_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBasis_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Basis_optionContext = Basis_optionContext;

SaltParser.prototype.basis_option = function() {

    var localctx = new Basis_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, SaltParser.RULE_basis_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2383;
        this.match(SaltParser.T__139);
        this.state = 2384;
        this.lp();
        this.state = 2385;
        this.basis_list();
        this.state = 2386;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Basis_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_basis_list;
    return this;
}

Basis_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Basis_listContext.prototype.constructor = Basis_listContext;

Basis_listContext.prototype.basis_element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Basis_elementContext);
    } else {
        return this.getTypedRuleContext(Basis_elementContext,i);
    }
};

Basis_listContext.prototype.co = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoContext);
    } else {
        return this.getTypedRuleContext(CoContext,i);
    }
};

Basis_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBasis_list(this);
	}
};

Basis_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBasis_list(this);
	}
};

Basis_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBasis_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Basis_listContext = Basis_listContext;

SaltParser.prototype.basis_list = function() {

    var localctx = new Basis_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, SaltParser.RULE_basis_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2388;
        this.basis_element();
        this.state = 2394;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,258,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2389;
                this.co();
                this.state = 2390;
                this.basis_element(); 
            }
            this.state = 2396;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,258,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Basis_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_basis_element;
    return this;
}

Basis_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Basis_elementContext.prototype.constructor = Basis_elementContext;

Basis_elementContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Basis_elementContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Basis_elementContext.prototype.basis_qualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Basis_qualifierContext);
    } else {
        return this.getTypedRuleContext(Basis_qualifierContext,i);
    }
};

Basis_elementContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Basis_elementContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Basis_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBasis_element(this);
	}
};

Basis_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBasis_element(this);
	}
};

Basis_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBasis_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Basis_elementContext = Basis_elementContext;

SaltParser.prototype.basis_element = function() {

    var localctx = new Basis_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, SaltParser.RULE_basis_element);
    try {
        this.state = 2417;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 2397;
            this.match(SaltParser.ID);
            this.state = 2410;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
            if(la_===1) {
                this.state = 2398;
                this.lp();
                this.state = 2399;
                this.basis_qualifier();
                this.state = 2405;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,259,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 2400;
                        this.comma();
                        this.state = 2401;
                        this.basis_qualifier(); 
                    }
                    this.state = 2407;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,259,this._ctx);
                }

                this.state = 2408;
                this.rp();

            }
            break;
        case SaltParser.T__2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2412;
            this.match(SaltParser.T__2);
            break;
        case SaltParser.T__12:
            this.enterOuterAlt(localctx, 3);
            this.state = 2413;
            this.match(SaltParser.T__12);
            break;
        case SaltParser.T__93:
            this.enterOuterAlt(localctx, 4);
            this.state = 2414;
            this.match(SaltParser.T__93);
            break;
        case SaltParser.T__94:
            this.enterOuterAlt(localctx, 5);
            this.state = 2415;
            this.match(SaltParser.T__94);
            break;
        case SaltParser.T__97:
            this.enterOuterAlt(localctx, 6);
            this.state = 2416;
            this.match(SaltParser.T__97);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Basis_qualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_basis_qualifier;
    return this;
}

Basis_qualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Basis_qualifierContext.prototype.constructor = Basis_qualifierContext;

Basis_qualifierContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Basis_qualifierContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

Basis_qualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterBasis_qualifier(this);
	}
};

Basis_qualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitBasis_qualifier(this);
	}
};

Basis_qualifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitBasis_qualifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Basis_qualifierContext = Basis_qualifierContext;

SaltParser.prototype.basis_qualifier = function() {

    var localctx = new Basis_qualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, SaltParser.RULE_basis_qualifier);
    try {
        this.state = 2428;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__327:
            this.enterOuterAlt(localctx, 1);
            this.state = 2419;
            this.match(SaltParser.T__327);
            break;
        case SaltParser.T__328:
            this.enterOuterAlt(localctx, 2);
            this.state = 2420;
            this.match(SaltParser.T__328);
            break;
        case SaltParser.T__329:
            this.enterOuterAlt(localctx, 3);
            this.state = 2421;
            this.match(SaltParser.T__329);
            break;
        case SaltParser.T__320:
            this.enterOuterAlt(localctx, 4);
            this.state = 2422;
            this.match(SaltParser.T__320);
            break;
        case SaltParser.T__330:
            this.enterOuterAlt(localctx, 5);
            this.state = 2423;
            this.match(SaltParser.T__330);
            break;
        case SaltParser.T__331:
            this.enterOuterAlt(localctx, 6);
            this.state = 2424;
            this.match(SaltParser.T__331);
            break;
        case SaltParser.T__332:
            this.enterOuterAlt(localctx, 7);
            this.state = 2425;
            this.match(SaltParser.T__332);
            break;
        case SaltParser.ID:
            this.enterOuterAlt(localctx, 8);
            this.state = 2426;
            this.match(SaltParser.ID);
            break;
        case SaltParser.T__94:
        case SaltParser.INT:
        case SaltParser.NINT:
            this.enterOuterAlt(localctx, 9);
            this.state = 2427;
            this.signed_int();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Signed_intContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_signed_int;
    return this;
}

Signed_intContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_intContext.prototype.constructor = Signed_intContext;

Signed_intContext.prototype.INT = function() {
    return this.getToken(SaltParser.INT, 0);
};

Signed_intContext.prototype.NINT = function() {
    return this.getToken(SaltParser.NINT, 0);
};

Signed_intContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterSigned_int(this);
	}
};

Signed_intContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitSigned_int(this);
	}
};

Signed_intContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitSigned_int(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Signed_intContext = Signed_intContext;

SaltParser.prototype.signed_int = function() {

    var localctx = new Signed_intContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, SaltParser.RULE_signed_int);
    var _la = 0; // Token type
    try {
        this.state = 2435;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SaltParser.T__94:
        case SaltParser.INT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2431;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SaltParser.T__94) {
                this.state = 2430;
                this.match(SaltParser.T__94);
            }

            this.state = 2433;
            this.match(SaltParser.INT);
            break;
        case SaltParser.NINT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2434;
            this.match(SaltParser.NINT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Periodic_idsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_periodic_ids;
    return this;
}

Periodic_idsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Periodic_idsContext.prototype.constructor = Periodic_idsContext;

Periodic_idsContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ID);
    } else {
        return this.getToken(SaltParser.ID, i);
    }
};


Periodic_idsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterPeriodic_ids(this);
	}
};

Periodic_idsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitPeriodic_ids(this);
	}
};

Periodic_idsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitPeriodic_ids(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Periodic_idsContext = Periodic_idsContext;

SaltParser.prototype.periodic_ids = function() {

    var localctx = new Periodic_idsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, SaltParser.RULE_periodic_ids);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2437;
        this.match(SaltParser.ID);
        this.state = 2442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SaltParser.T__333) {
            this.state = 2438;
            this.match(SaltParser.T__333);
            this.state = 2439;
            this.match(SaltParser.ID);
            this.state = 2444;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Stuff_in_bracketsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_stuff_in_brackets;
    return this;
}

Stuff_in_bracketsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stuff_in_bracketsContext.prototype.constructor = Stuff_in_bracketsContext;

Stuff_in_bracketsContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Stuff_in_bracketsContext.prototype.stuff_escape_brackets = function() {
    return this.getTypedRuleContext(Stuff_escape_bracketsContext,0);
};

Stuff_in_bracketsContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Stuff_in_bracketsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterStuff_in_brackets(this);
	}
};

Stuff_in_bracketsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitStuff_in_brackets(this);
	}
};

Stuff_in_bracketsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitStuff_in_brackets(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Stuff_in_bracketsContext = Stuff_in_bracketsContext;

SaltParser.prototype.stuff_in_brackets = function() {

    var localctx = new Stuff_in_bracketsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, SaltParser.RULE_stuff_in_brackets);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2445;
        this.lp();
        this.state = 2446;
        this.stuff_escape_brackets();
        this.state = 2447;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Stuff_escape_bracketsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_stuff_escape_brackets;
    return this;
}

Stuff_escape_bracketsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stuff_escape_bracketsContext.prototype.constructor = Stuff_escape_bracketsContext;


Stuff_escape_bracketsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterStuff_escape_brackets(this);
	}
};

Stuff_escape_bracketsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitStuff_escape_brackets(this);
	}
};

Stuff_escape_bracketsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitStuff_escape_brackets(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Stuff_escape_bracketsContext = Stuff_escape_bracketsContext;

SaltParser.prototype.stuff_escape_brackets = function() {

    var localctx = new Stuff_escape_bracketsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, SaltParser.RULE_stuff_escape_brackets);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2454;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,267,this._ctx)
        while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1+1) {
                this.state = 2452;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2449;
                    this.match(SaltParser.T__334);
                    break;

                case 2:
                    this.state = 2450;
                    this.match(SaltParser.T__335);
                    break;

                case 3:
                    this.state = 2451;
                    _la = this._input.LA(1);
                    if(_la<=0 || _la===SaltParser.T__71 || _la===SaltParser.T__72) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                } 
            }
            this.state = 2456;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,267,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonempty_stuff_in_bracketsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_nonempty_stuff_in_brackets;
    return this;
}

Nonempty_stuff_in_bracketsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonempty_stuff_in_bracketsContext.prototype.constructor = Nonempty_stuff_in_bracketsContext;

Nonempty_stuff_in_bracketsContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Nonempty_stuff_in_bracketsContext.prototype.nonempty_stuff_escape_brackets = function() {
    return this.getTypedRuleContext(Nonempty_stuff_escape_bracketsContext,0);
};

Nonempty_stuff_in_bracketsContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Nonempty_stuff_in_bracketsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNonempty_stuff_in_brackets(this);
	}
};

Nonempty_stuff_in_bracketsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNonempty_stuff_in_brackets(this);
	}
};

Nonempty_stuff_in_bracketsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNonempty_stuff_in_brackets(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Nonempty_stuff_in_bracketsContext = Nonempty_stuff_in_bracketsContext;

SaltParser.prototype.nonempty_stuff_in_brackets = function() {

    var localctx = new Nonempty_stuff_in_bracketsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, SaltParser.RULE_nonempty_stuff_in_brackets);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2457;
        this.lp();
        this.state = 2458;
        this.nonempty_stuff_escape_brackets();
        this.state = 2459;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonempty_stuff_escape_bracketsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_nonempty_stuff_escape_brackets;
    return this;
}

Nonempty_stuff_escape_bracketsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonempty_stuff_escape_bracketsContext.prototype.constructor = Nonempty_stuff_escape_bracketsContext;


Nonempty_stuff_escape_bracketsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNonempty_stuff_escape_brackets(this);
	}
};

Nonempty_stuff_escape_bracketsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNonempty_stuff_escape_brackets(this);
	}
};

Nonempty_stuff_escape_bracketsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNonempty_stuff_escape_brackets(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Nonempty_stuff_escape_bracketsContext = Nonempty_stuff_escape_bracketsContext;

SaltParser.prototype.nonempty_stuff_escape_brackets = function() {

    var localctx = new Nonempty_stuff_escape_bracketsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, SaltParser.RULE_nonempty_stuff_escape_brackets);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2464; 
        this._errHandler.sync(this);
        var _alt = 1+1;
        do {
        	switch (_alt) {
        	case 1+1:
        		this.state = 2464;
        		this._errHandler.sync(this);
        		var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 2461;
        		    this.match(SaltParser.T__334);
        		    break;

        		case 2:
        		    this.state = 2462;
        		    this.match(SaltParser.T__335);
        		    break;

        		case 3:
        		    this.state = 2463;
        		    _la = this._input.LA(1);
        		    if(_la<=0 || _la===SaltParser.T__71 || _la===SaltParser.T__72) {
        		    this._errHandler.recoverInline(this);
        		    }
        		    else {
        		    	this._errHandler.reportMatch(this);
        		        this.consume();
        		    }
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2466; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,269, this._ctx);
        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Custinfo_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_custinfo_options;
    return this;
}

Custinfo_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Custinfo_optionsContext.prototype.constructor = Custinfo_optionsContext;

Custinfo_optionsContext.prototype.custinfo_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Custinfo_optionContext);
    } else {
        return this.getTypedRuleContext(Custinfo_optionContext,i);
    }
};

Custinfo_optionsContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

Custinfo_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCustinfo_options(this);
	}
};

Custinfo_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCustinfo_options(this);
	}
};

Custinfo_optionsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCustinfo_options(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Custinfo_optionsContext = Custinfo_optionsContext;

SaltParser.prototype.custinfo_options = function() {

    var localctx = new Custinfo_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, SaltParser.RULE_custinfo_options);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2468;
        this.custinfo_option();
        this.state = 2474;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,270,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2469;
                this.comma();
                this.state = 2470;
                this.custinfo_option(); 
            }
            this.state = 2476;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,270,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Custinfo_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_custinfo_option;
    return this;
}

Custinfo_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Custinfo_optionContext.prototype.constructor = Custinfo_optionContext;

Custinfo_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Custinfo_optionContext.prototype.ID = function() {
    return this.getToken(SaltParser.ID, 0);
};

Custinfo_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Custinfo_optionContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Custinfo_optionContext.prototype.useon = function() {
    return this.getTypedRuleContext(UseonContext,0);
};

Custinfo_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCustinfo_option(this);
	}
};

Custinfo_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCustinfo_option(this);
	}
};

Custinfo_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCustinfo_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Custinfo_optionContext = Custinfo_optionContext;

SaltParser.prototype.custinfo_option = function() {

    var localctx = new Custinfo_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, SaltParser.RULE_custinfo_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2477;
        this.match(SaltParser.T__336);
        this.state = 2478;
        this.lp();
        this.state = 2479;
        this.match(SaltParser.ID);
        this.state = 2483;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
        if(la_===1) {
            this.state = 2480;
            this.comma();
            this.state = 2481;
            this.useon();

        }
        this.state = 2485;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UseonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_useon;
    return this;
}

UseonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseonContext.prototype.constructor = UseonContext;

UseonContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

UseonContext.prototype.useon_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Useon_optionContext);
    } else {
        return this.getTypedRuleContext(Useon_optionContext,i);
    }
};

UseonContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

UseonContext.prototype.comma = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CommaContext);
    } else {
        return this.getTypedRuleContext(CommaContext,i);
    }
};

UseonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterUseon(this);
	}
};

UseonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitUseon(this);
	}
};

UseonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitUseon(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.UseonContext = UseonContext;

SaltParser.prototype.useon = function() {

    var localctx = new UseonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, SaltParser.RULE_useon);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2487;
        this.match(SaltParser.T__337);
        this.state = 2488;
        this.lp();
        this.state = 2489;
        this.useon_option();
        this.state = 2495;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,272,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 2490;
                this.comma();
                this.state = 2491;
                this.useon_option(); 
            }
            this.state = 2497;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,272,this._ctx);
        }

        this.state = 2498;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Useon_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_useon_option;
    return this;
}

Useon_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Useon_optionContext.prototype.constructor = Useon_optionContext;

Useon_optionContext.prototype.lp = function() {
    return this.getTypedRuleContext(LpContext,0);
};

Useon_optionContext.prototype.useon_stuff = function() {
    return this.getTypedRuleContext(Useon_stuffContext,0);
};

Useon_optionContext.prototype.rp = function() {
    return this.getTypedRuleContext(RpContext,0);
};

Useon_optionContext.prototype.comma = function() {
    return this.getTypedRuleContext(CommaContext,0);
};

Useon_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterUseon_option(this);
	}
};

Useon_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitUseon_option(this);
	}
};

Useon_optionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitUseon_option(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Useon_optionContext = Useon_optionContext;

SaltParser.prototype.useon_option = function() {

    var localctx = new Useon_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, SaltParser.RULE_useon_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2500;
        this.match(SaltParser.T__338);
        this.state = 2501;
        this.lp();
        this.state = 2502;
        this.useon_stuff();
        this.state = 2506;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
        if(la_===1) {
            this.state = 2503;
            this.comma();
            this.state = 2504;
            this.match(SaltParser.T__339);

        }
        this.state = 2508;
        this.rp();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Useon_stuffContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_useon_stuff;
    return this;
}

Useon_stuffContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Useon_stuffContext.prototype.constructor = Useon_stuffContext;

Useon_stuffContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.NL);
    } else {
        return this.getToken(SaltParser.NL, i);
    }
};


Useon_stuffContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterUseon_stuff(this);
	}
};

Useon_stuffContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitUseon_stuff(this);
	}
};

Useon_stuffContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitUseon_stuff(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Useon_stuffContext = Useon_stuffContext;

SaltParser.prototype.useon_stuff = function() {

    var localctx = new Useon_stuffContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, SaltParser.RULE_useon_stuff);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2511; 
        this._errHandler.sync(this);
        var _alt = 1+1;
        do {
        	switch (_alt) {
        	case 1+1:
        		this.state = 2510;
        		_la = this._input.LA(1);
        		if(_la<=0 || _la===SaltParser.NL) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2513; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,274, this._ctx);
        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptiontextContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_optiontext;
    return this;
}

OptiontextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptiontextContext.prototype.constructor = OptiontextContext;

OptiontextContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.NL);
    } else {
        return this.getToken(SaltParser.NL, i);
    }
};


OptiontextContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


OptiontextContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterOptiontext(this);
	}
};

OptiontextContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitOptiontext(this);
	}
};

OptiontextContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitOptiontext(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.OptiontextContext = OptiontextContext;

SaltParser.prototype.optiontext = function() {

    var localctx = new OptiontextContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, SaltParser.RULE_optiontext);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2516; 
        this._errHandler.sync(this);
        var _alt = 1+1;
        do {
        	switch (_alt) {
        	case 1+1:
        		this.state = 2515;
        		_la = this._input.LA(1);
        		if(_la<=0 || _la===SaltParser.NL || _la===SaltParser.WS) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2518; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,275, this._ctx);
        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rttag_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_rttag_param;
    return this;
}

Rttag_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rttag_paramContext.prototype.constructor = Rttag_paramContext;

Rttag_paramContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.NL);
    } else {
        return this.getToken(SaltParser.NL, i);
    }
};


Rttag_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRttag_param(this);
	}
};

Rttag_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRttag_param(this);
	}
};

Rttag_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRttag_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Rttag_paramContext = Rttag_paramContext;

SaltParser.prototype.rttag_param = function() {

    var localctx = new Rttag_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, SaltParser.RULE_rttag_param);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2521; 
        this._errHandler.sync(this);
        var _alt = 1+1;
        do {
        	switch (_alt) {
        	case 1+1:
        		this.state = 2520;
        		_la = this._input.LA(1);
        		if(_la<=0 || _la===SaltParser.T__72 || _la===SaltParser.T__340 || _la===SaltParser.NL) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2523; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,276, this._ctx);
        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RestoflineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_restofline;
    return this;
}

RestoflineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RestoflineContext.prototype.constructor = RestoflineContext;

RestoflineContext.prototype.co = function() {
    return this.getTypedRuleContext(CoContext,0);
};

RestoflineContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.NL);
    } else {
        return this.getToken(SaltParser.NL, i);
    }
};


RestoflineContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRestofline(this);
	}
};

RestoflineContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRestofline(this);
	}
};

RestoflineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRestofline(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.RestoflineContext = RestoflineContext;

SaltParser.prototype.restofline = function() {

    var localctx = new RestoflineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, SaltParser.RULE_restofline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2525;
        this.co();
        this.state = 2527; 
        this._errHandler.sync(this);
        var _alt = 1+1;
        do {
        	switch (_alt) {
        	case 1+1:
        		this.state = 2526;
        		_la = this._input.LA(1);
        		if(_la<=0 || _la===SaltParser.NL) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2529; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,277, this._ctx);
        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 2531;
        this.match(SaltParser.NL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_nl;
    return this;
}

NlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NlContext.prototype.constructor = NlContext;

NlContext.prototype.WS = function() {
    return this.getToken(SaltParser.WS, 0);
};

NlContext.prototype.NL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.NL);
    } else {
        return this.getToken(SaltParser.NL, i);
    }
};


NlContext.prototype.COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.COMMENT);
    } else {
        return this.getToken(SaltParser.COMMENT, i);
    }
};


NlContext.prototype.ML_COMMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.ML_COMMENT);
    } else {
        return this.getToken(SaltParser.ML_COMMENT, i);
    }
};


NlContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterNl(this);
	}
};

NlContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitNl(this);
	}
};

NlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitNl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.NlContext = NlContext;

SaltParser.prototype.nl = function() {

    var localctx = new NlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, SaltParser.RULE_nl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2534;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 2533;
            this.match(SaltParser.WS);
        }

        this.state = 2537; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 2536;
        		_la = this._input.LA(1);
        		if(!(((((_la - 343)) & ~0x1f) == 0 && ((1 << (_la - 343)) & ((1 << (SaltParser.NL - 343)) | (1 << (SaltParser.COMMENT - 343)) | (1 << (SaltParser.ML_COMMENT - 343)))) !== 0))) {
        		this._errHandler.recoverInline(this);
        		}
        		else {
        			this._errHandler.reportMatch(this);
        		    this.consume();
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 2539; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,279, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_lp;
    return this;
}

LpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LpContext.prototype.constructor = LpContext;

LpContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


LpContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterLp(this);
	}
};

LpContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitLp(this);
	}
};

LpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitLp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.LpContext = LpContext;

SaltParser.prototype.lp = function() {

    var localctx = new LpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, SaltParser.RULE_lp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2542;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 2541;
            this.match(SaltParser.WS);
        }

        this.state = 2544;
        this.match(SaltParser.T__71);
        this.state = 2546;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
        if(la_===1) {
            this.state = 2545;
            this.match(SaltParser.WS);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_rp;
    return this;
}

RpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RpContext.prototype.constructor = RpContext;

RpContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


RpContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterRp(this);
	}
};

RpContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitRp(this);
	}
};

RpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitRp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.RpContext = RpContext;

SaltParser.prototype.rp = function() {

    var localctx = new RpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, SaltParser.RULE_rp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 2548;
            this.match(SaltParser.WS);
        }

        this.state = 2551;
        this.match(SaltParser.T__72);
        this.state = 2553;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
        if(la_===1) {
            this.state = 2552;
            this.match(SaltParser.WS);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_co;
    return this;
}

CoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoContext.prototype.constructor = CoContext;

CoContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


CoContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterCo(this);
	}
};

CoContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitCo(this);
	}
};

CoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitCo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.CoContext = CoContext;

SaltParser.prototype.co = function() {

    var localctx = new CoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 278, SaltParser.RULE_co);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2556;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 2555;
            this.match(SaltParser.WS);
        }

        this.state = 2558;
        this.match(SaltParser.T__341);
        this.state = 2560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
        if(la_===1) {
            this.state = 2559;
            this.match(SaltParser.WS);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_comma;
    return this;
}

CommaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommaContext.prototype.constructor = CommaContext;

CommaContext.prototype.WS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SaltParser.WS);
    } else {
        return this.getToken(SaltParser.WS, i);
    }
};


CommaContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterComma(this);
	}
};

CommaContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitComma(this);
	}
};

CommaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitComma(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.CommaContext = CommaContext;

SaltParser.prototype.comma = function() {

    var localctx = new CommaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 280, SaltParser.RULE_comma);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2563;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SaltParser.WS) {
            this.state = 2562;
            this.match(SaltParser.WS);
        }

        this.state = 2565;
        this.match(SaltParser.T__340);
        this.state = 2567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
        if(la_===1) {
            this.state = 2566;
            this.match(SaltParser.WS);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pip_stringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SaltParser.RULE_pip_string;
    return this;
}

Pip_stringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pip_stringContext.prototype.constructor = Pip_stringContext;


Pip_stringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.enterPip_string(this);
	}
};

Pip_stringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SaltListener ) {
        listener.exitPip_string(this);
	}
};

Pip_stringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SaltVisitor ) {
        return visitor.visitPip_string(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SaltParser.Pip_stringContext = Pip_stringContext;

SaltParser.prototype.pip_string = function() {

    var localctx = new Pip_stringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 282, SaltParser.RULE_pip_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2569;
        this.match(SaltParser.T__311);
        this.state = 2573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SaltParser.T__0) | (1 << SaltParser.T__1) | (1 << SaltParser.T__2) | (1 << SaltParser.T__3) | (1 << SaltParser.T__4) | (1 << SaltParser.T__5) | (1 << SaltParser.T__6) | (1 << SaltParser.T__7) | (1 << SaltParser.T__8) | (1 << SaltParser.T__9) | (1 << SaltParser.T__10) | (1 << SaltParser.T__11) | (1 << SaltParser.T__12) | (1 << SaltParser.T__13) | (1 << SaltParser.T__14) | (1 << SaltParser.T__15) | (1 << SaltParser.T__16) | (1 << SaltParser.T__17) | (1 << SaltParser.T__18) | (1 << SaltParser.T__19) | (1 << SaltParser.T__20) | (1 << SaltParser.T__21) | (1 << SaltParser.T__22) | (1 << SaltParser.T__23) | (1 << SaltParser.T__24) | (1 << SaltParser.T__25) | (1 << SaltParser.T__26) | (1 << SaltParser.T__27) | (1 << SaltParser.T__28) | (1 << SaltParser.T__29) | (1 << SaltParser.T__30))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SaltParser.T__31 - 32)) | (1 << (SaltParser.T__32 - 32)) | (1 << (SaltParser.T__33 - 32)) | (1 << (SaltParser.T__34 - 32)) | (1 << (SaltParser.T__35 - 32)) | (1 << (SaltParser.T__36 - 32)) | (1 << (SaltParser.T__37 - 32)) | (1 << (SaltParser.T__38 - 32)) | (1 << (SaltParser.T__39 - 32)) | (1 << (SaltParser.T__40 - 32)) | (1 << (SaltParser.T__41 - 32)) | (1 << (SaltParser.T__42 - 32)) | (1 << (SaltParser.T__43 - 32)) | (1 << (SaltParser.T__44 - 32)) | (1 << (SaltParser.T__45 - 32)) | (1 << (SaltParser.T__46 - 32)) | (1 << (SaltParser.T__47 - 32)) | (1 << (SaltParser.T__48 - 32)) | (1 << (SaltParser.T__49 - 32)) | (1 << (SaltParser.T__50 - 32)) | (1 << (SaltParser.T__51 - 32)) | (1 << (SaltParser.T__52 - 32)) | (1 << (SaltParser.T__53 - 32)) | (1 << (SaltParser.T__54 - 32)) | (1 << (SaltParser.T__55 - 32)) | (1 << (SaltParser.T__56 - 32)) | (1 << (SaltParser.T__57 - 32)) | (1 << (SaltParser.T__58 - 32)) | (1 << (SaltParser.T__59 - 32)) | (1 << (SaltParser.T__60 - 32)) | (1 << (SaltParser.T__61 - 32)) | (1 << (SaltParser.T__62 - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SaltParser.T__63 - 64)) | (1 << (SaltParser.T__64 - 64)) | (1 << (SaltParser.T__65 - 64)) | (1 << (SaltParser.T__66 - 64)) | (1 << (SaltParser.T__67 - 64)) | (1 << (SaltParser.T__68 - 64)) | (1 << (SaltParser.T__69 - 64)) | (1 << (SaltParser.T__70 - 64)) | (1 << (SaltParser.T__71 - 64)) | (1 << (SaltParser.T__72 - 64)) | (1 << (SaltParser.T__73 - 64)) | (1 << (SaltParser.T__74 - 64)) | (1 << (SaltParser.T__75 - 64)) | (1 << (SaltParser.T__76 - 64)) | (1 << (SaltParser.T__77 - 64)) | (1 << (SaltParser.T__78 - 64)) | (1 << (SaltParser.T__79 - 64)) | (1 << (SaltParser.T__80 - 64)) | (1 << (SaltParser.T__81 - 64)) | (1 << (SaltParser.T__82 - 64)) | (1 << (SaltParser.T__83 - 64)) | (1 << (SaltParser.T__84 - 64)) | (1 << (SaltParser.T__85 - 64)) | (1 << (SaltParser.T__86 - 64)) | (1 << (SaltParser.T__87 - 64)) | (1 << (SaltParser.T__88 - 64)) | (1 << (SaltParser.T__89 - 64)) | (1 << (SaltParser.T__90 - 64)) | (1 << (SaltParser.T__91 - 64)) | (1 << (SaltParser.T__92 - 64)) | (1 << (SaltParser.T__93 - 64)) | (1 << (SaltParser.T__94 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SaltParser.T__95 - 96)) | (1 << (SaltParser.T__96 - 96)) | (1 << (SaltParser.T__97 - 96)) | (1 << (SaltParser.T__98 - 96)) | (1 << (SaltParser.T__99 - 96)) | (1 << (SaltParser.T__100 - 96)) | (1 << (SaltParser.T__101 - 96)) | (1 << (SaltParser.T__102 - 96)) | (1 << (SaltParser.T__103 - 96)) | (1 << (SaltParser.T__104 - 96)) | (1 << (SaltParser.T__105 - 96)) | (1 << (SaltParser.T__106 - 96)) | (1 << (SaltParser.T__107 - 96)) | (1 << (SaltParser.T__108 - 96)) | (1 << (SaltParser.T__109 - 96)) | (1 << (SaltParser.T__110 - 96)) | (1 << (SaltParser.T__111 - 96)) | (1 << (SaltParser.T__112 - 96)) | (1 << (SaltParser.T__113 - 96)) | (1 << (SaltParser.T__114 - 96)) | (1 << (SaltParser.T__115 - 96)) | (1 << (SaltParser.T__116 - 96)) | (1 << (SaltParser.T__117 - 96)) | (1 << (SaltParser.T__118 - 96)) | (1 << (SaltParser.T__119 - 96)) | (1 << (SaltParser.T__120 - 96)) | (1 << (SaltParser.T__121 - 96)) | (1 << (SaltParser.T__122 - 96)) | (1 << (SaltParser.T__123 - 96)) | (1 << (SaltParser.T__124 - 96)) | (1 << (SaltParser.T__125 - 96)) | (1 << (SaltParser.T__126 - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SaltParser.T__127 - 128)) | (1 << (SaltParser.T__128 - 128)) | (1 << (SaltParser.T__129 - 128)) | (1 << (SaltParser.T__130 - 128)) | (1 << (SaltParser.T__131 - 128)) | (1 << (SaltParser.T__132 - 128)) | (1 << (SaltParser.T__133 - 128)) | (1 << (SaltParser.T__134 - 128)) | (1 << (SaltParser.T__135 - 128)) | (1 << (SaltParser.T__136 - 128)) | (1 << (SaltParser.T__137 - 128)) | (1 << (SaltParser.T__138 - 128)) | (1 << (SaltParser.T__139 - 128)) | (1 << (SaltParser.T__140 - 128)) | (1 << (SaltParser.T__141 - 128)) | (1 << (SaltParser.T__142 - 128)) | (1 << (SaltParser.T__143 - 128)) | (1 << (SaltParser.T__144 - 128)) | (1 << (SaltParser.T__145 - 128)) | (1 << (SaltParser.T__146 - 128)) | (1 << (SaltParser.T__147 - 128)) | (1 << (SaltParser.T__148 - 128)) | (1 << (SaltParser.T__149 - 128)) | (1 << (SaltParser.T__150 - 128)) | (1 << (SaltParser.T__151 - 128)) | (1 << (SaltParser.T__152 - 128)) | (1 << (SaltParser.T__153 - 128)) | (1 << (SaltParser.T__154 - 128)) | (1 << (SaltParser.T__155 - 128)) | (1 << (SaltParser.T__156 - 128)) | (1 << (SaltParser.T__157 - 128)) | (1 << (SaltParser.T__158 - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SaltParser.T__159 - 160)) | (1 << (SaltParser.T__160 - 160)) | (1 << (SaltParser.T__161 - 160)) | (1 << (SaltParser.T__162 - 160)) | (1 << (SaltParser.T__163 - 160)) | (1 << (SaltParser.T__164 - 160)) | (1 << (SaltParser.T__165 - 160)) | (1 << (SaltParser.T__166 - 160)) | (1 << (SaltParser.T__167 - 160)) | (1 << (SaltParser.T__168 - 160)) | (1 << (SaltParser.T__169 - 160)) | (1 << (SaltParser.T__170 - 160)) | (1 << (SaltParser.T__171 - 160)) | (1 << (SaltParser.T__172 - 160)) | (1 << (SaltParser.T__173 - 160)) | (1 << (SaltParser.T__174 - 160)) | (1 << (SaltParser.T__175 - 160)) | (1 << (SaltParser.T__176 - 160)) | (1 << (SaltParser.T__177 - 160)) | (1 << (SaltParser.T__178 - 160)) | (1 << (SaltParser.T__179 - 160)) | (1 << (SaltParser.T__180 - 160)) | (1 << (SaltParser.T__181 - 160)) | (1 << (SaltParser.T__182 - 160)) | (1 << (SaltParser.T__183 - 160)) | (1 << (SaltParser.T__184 - 160)) | (1 << (SaltParser.T__185 - 160)) | (1 << (SaltParser.T__186 - 160)) | (1 << (SaltParser.T__187 - 160)) | (1 << (SaltParser.T__188 - 160)) | (1 << (SaltParser.T__189 - 160)) | (1 << (SaltParser.T__190 - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SaltParser.T__191 - 192)) | (1 << (SaltParser.T__192 - 192)) | (1 << (SaltParser.T__193 - 192)) | (1 << (SaltParser.T__194 - 192)) | (1 << (SaltParser.T__195 - 192)) | (1 << (SaltParser.T__196 - 192)) | (1 << (SaltParser.T__197 - 192)) | (1 << (SaltParser.T__198 - 192)) | (1 << (SaltParser.T__199 - 192)) | (1 << (SaltParser.T__200 - 192)) | (1 << (SaltParser.T__201 - 192)) | (1 << (SaltParser.T__202 - 192)) | (1 << (SaltParser.T__203 - 192)) | (1 << (SaltParser.T__204 - 192)) | (1 << (SaltParser.T__205 - 192)) | (1 << (SaltParser.T__206 - 192)) | (1 << (SaltParser.T__207 - 192)) | (1 << (SaltParser.T__208 - 192)) | (1 << (SaltParser.T__209 - 192)) | (1 << (SaltParser.T__210 - 192)) | (1 << (SaltParser.T__211 - 192)) | (1 << (SaltParser.T__212 - 192)) | (1 << (SaltParser.T__213 - 192)) | (1 << (SaltParser.T__214 - 192)) | (1 << (SaltParser.T__215 - 192)) | (1 << (SaltParser.T__216 - 192)) | (1 << (SaltParser.T__217 - 192)) | (1 << (SaltParser.T__218 - 192)) | (1 << (SaltParser.T__219 - 192)) | (1 << (SaltParser.T__220 - 192)) | (1 << (SaltParser.T__221 - 192)) | (1 << (SaltParser.T__222 - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SaltParser.T__223 - 224)) | (1 << (SaltParser.T__224 - 224)) | (1 << (SaltParser.T__225 - 224)) | (1 << (SaltParser.T__226 - 224)) | (1 << (SaltParser.T__227 - 224)) | (1 << (SaltParser.T__228 - 224)) | (1 << (SaltParser.T__229 - 224)) | (1 << (SaltParser.T__230 - 224)) | (1 << (SaltParser.T__231 - 224)) | (1 << (SaltParser.T__232 - 224)) | (1 << (SaltParser.T__233 - 224)) | (1 << (SaltParser.T__234 - 224)) | (1 << (SaltParser.T__235 - 224)) | (1 << (SaltParser.T__236 - 224)) | (1 << (SaltParser.T__237 - 224)) | (1 << (SaltParser.T__238 - 224)) | (1 << (SaltParser.T__239 - 224)) | (1 << (SaltParser.T__240 - 224)) | (1 << (SaltParser.T__241 - 224)) | (1 << (SaltParser.T__242 - 224)) | (1 << (SaltParser.T__243 - 224)) | (1 << (SaltParser.T__244 - 224)) | (1 << (SaltParser.T__245 - 224)) | (1 << (SaltParser.T__246 - 224)) | (1 << (SaltParser.T__247 - 224)) | (1 << (SaltParser.T__248 - 224)) | (1 << (SaltParser.T__249 - 224)) | (1 << (SaltParser.T__250 - 224)) | (1 << (SaltParser.T__251 - 224)) | (1 << (SaltParser.T__252 - 224)) | (1 << (SaltParser.T__253 - 224)) | (1 << (SaltParser.T__254 - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (SaltParser.T__255 - 256)) | (1 << (SaltParser.T__256 - 256)) | (1 << (SaltParser.T__257 - 256)) | (1 << (SaltParser.T__258 - 256)) | (1 << (SaltParser.T__259 - 256)) | (1 << (SaltParser.T__260 - 256)) | (1 << (SaltParser.T__261 - 256)) | (1 << (SaltParser.T__262 - 256)) | (1 << (SaltParser.T__263 - 256)) | (1 << (SaltParser.T__264 - 256)) | (1 << (SaltParser.T__265 - 256)) | (1 << (SaltParser.T__266 - 256)) | (1 << (SaltParser.T__267 - 256)) | (1 << (SaltParser.T__268 - 256)) | (1 << (SaltParser.T__269 - 256)) | (1 << (SaltParser.T__270 - 256)) | (1 << (SaltParser.T__271 - 256)) | (1 << (SaltParser.T__272 - 256)) | (1 << (SaltParser.T__273 - 256)) | (1 << (SaltParser.T__274 - 256)) | (1 << (SaltParser.T__275 - 256)) | (1 << (SaltParser.T__276 - 256)) | (1 << (SaltParser.T__277 - 256)) | (1 << (SaltParser.T__278 - 256)) | (1 << (SaltParser.T__279 - 256)) | (1 << (SaltParser.T__280 - 256)) | (1 << (SaltParser.T__281 - 256)) | (1 << (SaltParser.T__282 - 256)) | (1 << (SaltParser.T__283 - 256)) | (1 << (SaltParser.T__284 - 256)) | (1 << (SaltParser.T__285 - 256)) | (1 << (SaltParser.T__286 - 256)))) !== 0) || ((((_la - 288)) & ~0x1f) == 0 && ((1 << (_la - 288)) & ((1 << (SaltParser.T__287 - 288)) | (1 << (SaltParser.T__288 - 288)) | (1 << (SaltParser.T__289 - 288)) | (1 << (SaltParser.T__290 - 288)) | (1 << (SaltParser.T__291 - 288)) | (1 << (SaltParser.T__292 - 288)) | (1 << (SaltParser.T__293 - 288)) | (1 << (SaltParser.T__294 - 288)) | (1 << (SaltParser.T__295 - 288)) | (1 << (SaltParser.T__296 - 288)) | (1 << (SaltParser.T__297 - 288)) | (1 << (SaltParser.T__298 - 288)) | (1 << (SaltParser.T__299 - 288)) | (1 << (SaltParser.T__300 - 288)) | (1 << (SaltParser.T__301 - 288)) | (1 << (SaltParser.T__302 - 288)) | (1 << (SaltParser.T__303 - 288)) | (1 << (SaltParser.T__304 - 288)) | (1 << (SaltParser.T__305 - 288)) | (1 << (SaltParser.T__306 - 288)) | (1 << (SaltParser.T__307 - 288)) | (1 << (SaltParser.T__308 - 288)) | (1 << (SaltParser.T__309 - 288)) | (1 << (SaltParser.T__310 - 288)) | (1 << (SaltParser.T__312 - 288)) | (1 << (SaltParser.T__313 - 288)) | (1 << (SaltParser.T__314 - 288)) | (1 << (SaltParser.T__315 - 288)) | (1 << (SaltParser.T__316 - 288)) | (1 << (SaltParser.T__317 - 288)) | (1 << (SaltParser.T__318 - 288)))) !== 0) || ((((_la - 320)) & ~0x1f) == 0 && ((1 << (_la - 320)) & ((1 << (SaltParser.T__319 - 320)) | (1 << (SaltParser.T__320 - 320)) | (1 << (SaltParser.T__321 - 320)) | (1 << (SaltParser.T__322 - 320)) | (1 << (SaltParser.T__323 - 320)) | (1 << (SaltParser.T__324 - 320)) | (1 << (SaltParser.T__325 - 320)) | (1 << (SaltParser.T__326 - 320)) | (1 << (SaltParser.T__327 - 320)) | (1 << (SaltParser.T__328 - 320)) | (1 << (SaltParser.T__329 - 320)) | (1 << (SaltParser.T__330 - 320)) | (1 << (SaltParser.T__331 - 320)) | (1 << (SaltParser.T__332 - 320)) | (1 << (SaltParser.T__333 - 320)) | (1 << (SaltParser.T__334 - 320)) | (1 << (SaltParser.T__335 - 320)) | (1 << (SaltParser.T__336 - 320)) | (1 << (SaltParser.T__337 - 320)) | (1 << (SaltParser.T__338 - 320)) | (1 << (SaltParser.T__339 - 320)) | (1 << (SaltParser.T__340 - 320)) | (1 << (SaltParser.T__341 - 320)) | (1 << (SaltParser.NL - 320)) | (1 << (SaltParser.PNL - 320)) | (1 << (SaltParser.INT - 320)) | (1 << (SaltParser.NINT - 320)) | (1 << (SaltParser.REAL - 320)) | (1 << (SaltParser.NREAL - 320)) | (1 << (SaltParser.YEARSHIFT - 320)) | (1 << (SaltParser.ID - 320)) | (1 << (SaltParser.WS - 320)))) !== 0) || ((((_la - 352)) & ~0x1f) == 0 && ((1 << (_la - 352)) & ((1 << (SaltParser.COMMENT - 352)) | (1 << (SaltParser.ML_COMMENT - 352)) | (1 << (SaltParser.ANY - 352)))) !== 0)) {
            this.state = 2570;
            _la = this._input.LA(1);
            if(_la<=0 || _la===SaltParser.T__311) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2576;
        this.match(SaltParser.T__311);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.SaltParser = SaltParser;
