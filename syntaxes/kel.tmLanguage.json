{
    "scopeName": "source.kel",
    "fileTypes": [
        "kel"
    ],
    "name": "KEL",
    "patterns": [
        {
            "include": "#expression"
        },
        {
            "name": "entity.name.type.kel",
            "match": "\\b(?i:(boolean|date|integer|real|string|timestamp|uid|unk))\\b"
        },
        {
            "name": "entity.other.kel",
            "match": "\\b(?i:(asof|fdc|filter|flat|format|global|kelbase|kelquery|link|null|resources|using))\\b"
        },
        {
            "name": "keyword.operator.kel",
            "match": "\\b(?i:(%|\\*|\\+|-|/|and|div|in|not|or))\\b"
        },
        {
            "match": "([A-Za-z_]+)\\s*(\\()",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#functionsEcl"
                        },
                        {
                            "include": "#functionSequence"
                        },
                        {
                            "include": "#functionStats"
                        }
                    ]
                }
            }
        }
    ],
    "repository": {
        "functions": {
            "name": "entity.name.function.kel",
            "match": "\\b(?i:(adjustcalendar|all|association|ave|avenz|boundsclip|boundsfold|ceiling|concat|contains|convertdateformat|count|currentdate|datefromparts|datesformonthend|datesformonthstart|datesforweekend|datesforweekstart|datetostring|day|dayofweek|dayofyear|daysbetween|dayssince1900|default|endswith|entity|era|era|floor|fromdayssince1900|fromgregoriandate|fromstringtodate|function|import|integerfromdate|iqr|isdateleapyear|isjulianleapyear|isleapyear|isvaliddate|known|max|median|min|month|monthsbetween|only|package|percentile|permits|quartile|query|range|rank|rankdown|sequence.allcontiguouslyfollowing|sequence.allcontiguouslypreceding|sequence.allfollowing|sequence.allpreceding|sequence.dedup|sequence.next|sequence.nextwhere|sequence.previous|sequence.previouswhere|shell|startswith|stats.covariance|stats.populationstddev|stats.populationvariance|stats.samplestddev|stats.samplevariance|stats.slope|stats.weightedpopulationstddev|stats.weightedpopulationvariance|stats.weightedsamplestddev|stats.weightedsamplevariance|std|stddev|substr|sum|today|todayssince1900|togregoriandate|trimall|trimboth|trimleft|upcase|use|variance|visualize|weightedave|weightedavenz|weightedcount|weightediqr|weightedmedian|weightedpercentile|weightedquartile|weightedrank|weightedrankdown|weightedstddev|weightedsum|weightedvariance|word|wordcount|year|yearsbetween))\\b"
        },
        "functionsEcl": {
            "name": "entity.name.function.ecl",
            "match": "\\b(?i:(abs|acos|asin|atan|atan2|cos|cosh|exists|exp|if|intformat|length|ln|log|map|power|realformat|round|roundup|sin|sinh|sqrt|tan|tanh|topn|trim|truncate))\\b"
        },
        "functionSequence": {
            "name": "entity.name.function.kel",
            "match": "\\b(?i:(sequence).(allcontiguouslyfollowing|allcontiguouslypreceding|allfollowing|allpreceding|dedup|next|nextwhere|previous|previouswhere))\\b"
        },
        "functionStats": {
            "name": "entity.name.function.kel",
            "match": "\\b(?i:(stats).(covariance|populationstddev|populationvariance|samplestddev|samplevariance|slope|weightedpopulationstddev|weightedpopulationvariance|weightedsamplestddev|weightedsamplevariance))\\b"
        },
        "expression": {
            "name": "meta.expression.kel",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#literal"
                }
            ]
        },
        "comment": {
            "name": "comment.kel",
            "patterns": [
                {
                    "include": "#comment-block-doc"
                },
                {
                    "include": "#comment-block"
                },
                {
                    "include": "#comment-line"
                }
            ]
        },
        "comment-block": {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment.block.kel"
        },
        "comment-block-doc": {
            "begin": "/\\*\\*(?!/)",
            "end": "\\*/",
            "name": "comment.block.documentation.kel"
        },
        "comment-line": {
            "match": "(//).*$\\n?",
            "name": "comment.line.kel"
        },
        "string": {
            "name": "string.kel",
            "patterns": [
                {
                    "include": "#qstring-single"
                }
            ]
        },
        "qstring-single": {
            "begin": "'",
            "end": "\\'|(?:[^\\\\\\n]$)",
            "name": "string.single.kel",
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        "string-character-escape": {
            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)",
            "name": "constant.character.escape.kel"
        },
        "literal": {
            "name": "literal.kel",
            "patterns": [
                {
                    "include": "#numeric-literal"
                },
                {
                    "include": "#boolean-literal"
                }
            ]
        },
        "numeric-literal": {
            "match": "\\b(?<=[^$])((0(x|X)[0-9a-fA-F]+)|(0(o|O)[0-7]+)|(0(b|B)(0|1)+)|(([0-9]+(\\.[0-9]+)?))([eE]([+-]?)[0-9]+(\\.[0-9]+)?)?)\\b",
            "name": "constant.numeric.kel"
        },
        "boolean-literal": {
            "match": "\\b(?i:(false|true))\\b",
            "name": "constant.language.boolean.kel"
        }
    }
}